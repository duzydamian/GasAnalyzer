			writeFrame.clear();
			writeFrame.add( 0x10 ); //Command ''k', 2 Read all measured values of the channel
			writeFrame.add( 0x01 );
			writeFrame.add( 0xA0 );
			writeFrame.add( 0xE0 );
			writeFrame.add( 0x6B ); //k
			//writeFrame.add( 0x06 ); //device info
			writeFrame.add( 0x02 ); //pomiary
			//writeFrame.add( 0x01 ); //pojedynczy pomiar
			//writeFrame.add( 0x77 ); //odczyt kontrastu LCD 'w'
			//writeFrame.add( 0x14 ); //odczyt kontrastu LCD
			writeFrame.add( 0x10 );
			writeFrame.add( 0x03 );
			//writeFrame.add( 0x79 ); //device info
			//writeFrame.add( 0x55 ); //device info
			writeFrame.add( 0x38 ); //pomiary
			writeFrame.add( 0x94 ); //pomiary
			//writeFrame.add( 0xC8 ); //pojedynczy pomiar
			//writeFrame.add( 0x94 ); //pojedynczy pomiar
			//writeFrame.add( 0xDE ); //odczyt kontrastu LCD
			//writeFrame.add( 0xC0 ); //odczyt kontrastu LCD
			
			
//		nanoTime = 0; miliDiff = 0; currentTimeMillis = 0; nanoTime2 = 0; currentTimeMillis2 = 0; nanoDiff = 0;
//		nanoAvg = 0; miliAvg = 0;
//		nanoMin = 0; miliMin = 0;
//		nanoMax = 0; miliMax = 0;
//		count = 0;
//		
//		writeFrame.clear();
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x01 );
//		//writeFrame.add( 0xA1 );
//		writeFrame.add( 0xA0 );
//		writeFrame.add( 0xE0 );
//		writeFrame.add( 0x6B ); //k		
//		writeFrame.add( 0x01 ); //pojedynczy pomiar
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x03 );
//		writeFrame.add( 0xC8 ); //pojedynczy pomiar
//		writeFrame.add( 0x94 ); //pojedynczy pomiar
//		//writeFrame.add( 0xC9 ); //pojedynczy pomiar
//		//writeFrame.add( 0x45 ); //pojedynczy pomiar
//		
//		
//		timeOutput.newLine();
//		timeOutput.write( "				K1 A1				 " );
//		timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "				K1 A1				 " );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		
//		for ( int i = 0; i < 1000; i++ )
//		{			
//			for( Integer value2: writeFrame )
//			{
//				connection.write( value2 );
//			}
//			nanoTime = System.nanoTime();			
//			currentTimeMillis = System.currentTimeMillis();
//						
//	    	previousCharacter = -1;
//	    	//Read first character from new frame
//	    	curentCharacter = connection.read();
//			nanoTime2 = System.nanoTime();
//			currentTimeMillis2 = System.currentTimeMillis();	
//	    	while(curentCharacter!=-1)
//	    	{
//	    		//loop reading until detect start of frame 16,1
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    		}
//	    		while ( !( (previousCharacter == 16) & (curentCharacter == 1) ) );
//	    		
//	    		//Add start of frame detect in previous loop
//	    		data.add(previousCharacter);
//	    		data.add(curentCharacter);
//	    		
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    			//Add current character to collected frame
//	    			data.add(curentCharacter);
//	    		}
//	    		while ( !( (previousCharacter==16) & (curentCharacter==3) ) );
//	    		
//	    		if ( Main.isDebug() )
//				{
//	    			System.out.println( dateFormater.format( new Date() ) + " : ramka z ELAN Communication" );
//	            	System.out.println( data );
//				}    		        	
//	        	
//	    		//Add CRC16 to frame
//				CRCLow = connection.read();
//				CRCHigh = connection.read();		
//				CRC = ( CRCHigh << 8 ) + CRCLow;
//				
//				if( ELANCRC16.checkCRC16( data, CRC ) )
//				{
//					count++;
//					miliDiff = currentTimeMillis2 - currentTimeMillis;
//					nanoDiff = nanoTime2 - nanoTime;
//					if (miliAvg == 0)
//					{
//						miliAvg = miliMin = miliMax = miliDiff;
//					}
//					else
//					{
//						miliAvg = (miliAvg + miliDiff);
//						if ( miliMin > miliDiff )
//						{
//							miliMin = miliDiff;
//						}
//						if ( miliMax < miliDiff )
//						{
//							miliMax = miliDiff;
//						}
//					}
//					
//					if (nanoAvg == 0)
//					{
//						nanoAvg = nanoMin = nanoMax = nanoDiff;
//					}
//					else
//					{
//						nanoAvg = (nanoAvg + nanoDiff);
//						if ( nanoMin > nanoDiff )
//						{
//							nanoMin = nanoDiff;
//						}
//						if ( nanoMax < nanoDiff )
//						{
//							nanoMax = nanoDiff;
//						}
//					}
//					
//					timeOutput.write( miliDiff +"" );
//					timeOutput.newLine();
//					timeNanoOutput.write( nanoDiff +"" );
//					timeNanoOutput.newLine();
//					//System.out.println( "Czas mili: " + miliDiff );
//					//System.out.println( "Czas nano: " + nanoDiff );
//					data.clear();
//					break;					
//				}
//				else
//				{
//					System.out.println( "CC error: " );
//					data.clear();
//					break;
//				}
//	    	}			
//		}
//	
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeOutput.write( "Count: " + count );timeOutput.newLine();
//		timeOutput.write( "Avg: " + miliAvg );timeOutput.newLine();
//		timeOutput.write( "Avg/count: " + miliAvg/count );timeOutput.newLine();
//		timeOutput.write( "Min: " + miliMin );timeOutput.newLine();
//		timeOutput.write( "Max:"  + miliMax );timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.flush();
//		
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "Count:: " + count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg: " + nanoAvg );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg/count: " + nanoAvg/count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Min: " + nanoMin );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Max:"  + nanoMax );timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );				
//		timeNanoOutput.flush();
		
//		nanoTime = 0; miliDiff = 0; currentTimeMillis = 0; nanoTime2 = 0; currentTimeMillis2 = 0; nanoDiff = 0;
//		nanoAvg = 0; miliAvg = 0;
//		nanoMin = 0; miliMin = 0;
//		nanoMax = 0; miliMax = 0;
//		count = 0;
//		
//		writeFrame.clear();
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x01 );
//		writeFrame.add( 0xA2 );
//		writeFrame.add( 0xE0 );
//		writeFrame.add( 0x6B ); //k		
//		writeFrame.add( 0x01 ); //pojedynczy pomiar
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x03 );
//		writeFrame.add( 0xC9 ); //pojedynczy pomiar
//		writeFrame.add( 0x76 ); //pojedynczy pomiar
//		
//		timeOutput.newLine();
//		timeOutput.write( "				K1 A2				 " );
//		timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "				K1 A2				 " );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		
//		for ( int i = 0; i < 100; i++ )
//		{			
//			for( Integer value2: writeFrame )
//			{
//				connection.write( value2 );
//			}
//			nanoTime = System.nanoTime();			
//			currentTimeMillis = System.currentTimeMillis();
//						
//	    	previousCharacter = -1;
//	    	//Read first character from new frame
//	    	curentCharacter = connection.read();
//			nanoTime2 = System.nanoTime();
//			currentTimeMillis2 = System.currentTimeMillis();	
//	    	while(curentCharacter!=-1)
//	    	{
//	    		//loop reading until detect start of frame 16,1
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    		}
//	    		while ( !( (previousCharacter == 16) & (curentCharacter == 1) ) );
//	    		
//	    		//Add start of frame detect in previous loop
//	    		data.add(previousCharacter);
//	    		data.add(curentCharacter);
//	    		
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    			//Add current character to collected frame
//	    			data.add(curentCharacter);
//	    		}
//	    		while ( !( (previousCharacter==16) & (curentCharacter==3) ) );
//	    		
//	    		if ( Main.isDebug() )
//				{
//	    			System.out.println( dateFormater.format( new Date() ) + " : ramka z ELAN Communication" );
//	            	System.out.println( data );
//				}    		        	
//	        	
//	    		//Add CRC16 to frame
//				CRCLow = connection.read();
//				CRCHigh = connection.read();		
//				CRC = ( CRCHigh << 8 ) + CRCLow;
//				
//				if( ELANCRC16.checkCRC16( data, CRC ) )
//				{
//					count++;
//					miliDiff = currentTimeMillis2 - currentTimeMillis;
//					nanoDiff = nanoTime2 - nanoTime;
//					if (miliAvg == 0)
//					{
//						miliAvg = miliMin = miliMax = miliDiff;
//					}
//					else
//					{
//						miliAvg = (miliAvg + miliDiff);
//						if ( miliMin > miliDiff )
//						{
//							miliMin = miliDiff;
//						}
//						if ( miliMax < miliDiff )
//						{
//							miliMax = miliDiff;
//						}
//					}
//					
//					if (nanoAvg == 0)
//					{
//						nanoAvg = nanoMin = nanoMax = nanoDiff;
//					}
//					else
//					{
//						nanoAvg = (nanoAvg + nanoDiff);
//						if ( nanoMin > nanoDiff )
//						{
//							nanoMin = nanoDiff;
//						}
//						if ( nanoMax < nanoDiff )
//						{
//							nanoMax = nanoDiff;
//						}
//					}
//					
//					timeOutput.write( miliDiff +"" );
//					timeOutput.newLine();
//					timeNanoOutput.write( nanoDiff +"" );
//					timeNanoOutput.newLine();
//					//System.out.println( "Czas mili: " + miliDiff );
//					//System.out.println( "Czas nano: " + nanoDiff );
//					data.clear();
//					break;					
//				}
//				else
//				{
//					System.out.println( "CC error: " );
//					data.clear();
//					break;
//				}
//	    	}			
//		}
//	
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeOutput.write( "Count: " + count );timeOutput.newLine();
//		timeOutput.write( "Avg: " + miliAvg );timeOutput.newLine();
//		timeOutput.write( "Avg/count: " + miliAvg/count );timeOutput.newLine();
//		timeOutput.write( "Min: " + miliMin );timeOutput.newLine();
//		timeOutput.write( "Max:"  + miliMax );timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.flush();
//		
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "Count:: " + count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg: " + nanoAvg );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg/count: " + nanoAvg/count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Min: " + nanoMin );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Max:"  + nanoMax );timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );				
//		timeNanoOutput.flush();
//		
//		nanoTime = 0; miliDiff = 0; currentTimeMillis = 0; nanoTime2 = 0; currentTimeMillis2 = 0; nanoDiff = 0;
//		nanoAvg = 0; miliAvg = 0;
//		nanoMin = 0; miliMin = 0;
//		nanoMax = 0; miliMax = 0;
//		count = 0;
//		
//		writeFrame.clear();
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x01 );
//		writeFrame.add( 0xA0 );
//		writeFrame.add( 0xE0 );
//		writeFrame.add( 0x6B ); //k		
//		writeFrame.add( 0x02 ); //
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x03 );
//		writeFrame.add( 0x38 ); //
//		writeFrame.add( 0x94 ); //
//		
//		timeOutput.newLine();
//		timeOutput.write( "				K2 A0				 " );
//		timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "				K2 A0				 " );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		
//		for ( int i = 0; i < 100; i++ )
//		{			
//			for( Integer value2: writeFrame )
//			{
//				connection.write( value2 );
//			}
//			nanoTime = System.nanoTime();			
//			currentTimeMillis = System.currentTimeMillis();
//						
//	    	previousCharacter = -1;
//	    	//Read first character from new frame
//	    	curentCharacter = connection.read();
//			nanoTime2 = System.nanoTime();
//			currentTimeMillis2 = System.currentTimeMillis();	
//	    	while(curentCharacter!=-1)
//	    	{
//	    		//loop reading until detect start of frame 16,1
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    		}
//	    		while ( !( (previousCharacter == 16) & (curentCharacter == 1) ) );
//	    		
//	    		//Add start of frame detect in previous loop
//	    		data.add(previousCharacter);
//	    		data.add(curentCharacter);
//	    		
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    			//Add current character to collected frame
//	    			data.add(curentCharacter);
//	    		}
//	    		while ( !( (previousCharacter==16) & (curentCharacter==3) ) );
//	    		
//	    		if ( Main.isDebug() )
//				{
//	    			System.out.println( dateFormater.format( new Date() ) + " : ramka z ELAN Communication" );
//	            	System.out.println( data );
//				}    		        	
//	        	
//	    		//Add CRC16 to frame
//				CRCLow = connection.read();
//				CRCHigh = connection.read();		
//				CRC = ( CRCHigh << 8 ) + CRCLow;
//				
//				if( ELANCRC16.checkCRC16( data, CRC ) )
//				{
//					count++;
//					miliDiff = currentTimeMillis2 - currentTimeMillis;
//					nanoDiff = nanoTime2 - nanoTime;
//					if (miliAvg == 0)
//					{
//						miliAvg = miliMin = miliMax = miliDiff;
//					}
//					else
//					{
//						miliAvg = (miliAvg + miliDiff);
//						if ( miliMin > miliDiff )
//						{
//							miliMin = miliDiff;
//						}
//						if ( miliMax < miliDiff )
//						{
//							miliMax = miliDiff;
//						}
//					}
//					
//					if (nanoAvg == 0)
//					{
//						nanoAvg = nanoMin = nanoMax = nanoDiff;
//					}
//					else
//					{
//						nanoAvg = (nanoAvg + nanoDiff);
//						if ( nanoMin > nanoDiff )
//						{
//							nanoMin = nanoDiff;
//						}
//						if ( nanoMax < nanoDiff )
//						{
//							nanoMax = nanoDiff;
//						}
//					}
//					
//					timeOutput.write( miliDiff +"" );
//					timeOutput.newLine();
//					timeNanoOutput.write( nanoDiff +"" );
//					timeNanoOutput.newLine();
//					//System.out.println( "Czas mili: " + miliDiff );
//					//System.out.println( "Czas nano: " + nanoDiff );
//					data.clear();
//					break;					
//				}
//				else
//				{
//					System.out.println( "CC error: " );
//					data.clear();
//					break;
//				}
//	    	}			
//		}
//	
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeOutput.write( "Count: " + count );timeOutput.newLine();
//		timeOutput.write( "Avg: " + miliAvg );timeOutput.newLine();
//		timeOutput.write( "Avg/count: " + miliAvg/count );timeOutput.newLine();
//		timeOutput.write( "Min: " + miliMin );timeOutput.newLine();
//		timeOutput.write( "Max:"  + miliMax );timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.flush();
//		
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "Count:: " + count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg: " + nanoAvg );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg/count: " + nanoAvg/count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Min: " + nanoMin );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Max:"  + nanoMax );timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );				
//		timeNanoOutput.flush();
//		
//		nanoTime = 0; miliDiff = 0; currentTimeMillis = 0; nanoTime2 = 0; currentTimeMillis2 = 0; nanoDiff = 0;
//		nanoAvg = 0; miliAvg = 0;
//		nanoMin = 0; miliMin = 0;
//		nanoMax = 0; miliMax = 0;
//		count = 0;
//		
//		writeFrame.clear();
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x01 );
//		writeFrame.add( 0xA3 );
//		writeFrame.add( 0xE0 );
//		writeFrame.add( 0x6B ); //k		
//		writeFrame.add( 0x01 ); //pojedynczy pomiar
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x03 );
//		writeFrame.add( 0xC8 ); //pojedynczy pomiar
//		writeFrame.add( 0xA7 ); //pojedynczy pomiar
//		
//		timeOutput.newLine();
//		timeOutput.write( "				K1 A3				 " );
//		timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "				K1 A3				 " );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		
//		for ( int i = 0; i < 100; i++ )
//		{			
//			for( Integer value2: writeFrame )
//			{
//				connection.write( value2 );
//			}
//			nanoTime = System.nanoTime();			
//			currentTimeMillis = System.currentTimeMillis();
//						
//	    	previousCharacter = -1;
//	    	//Read first character from new frame
//	    	curentCharacter = connection.read();
//			nanoTime2 = System.nanoTime();
//			currentTimeMillis2 = System.currentTimeMillis();	
//	    	while(curentCharacter!=-1)
//	    	{
//	    		//loop reading until detect start of frame 16,1
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    		}
//	    		while ( !( (previousCharacter == 16) & (curentCharacter == 1) ) );
//	    		
//	    		//Add start of frame detect in previous loop
//	    		data.add(previousCharacter);
//	    		data.add(curentCharacter);
//	    		
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    			//Add current character to collected frame
//	    			data.add(curentCharacter);
//	    		}
//	    		while ( !( (previousCharacter==16) & (curentCharacter==3) ) );
//	    		
//	    		if ( Main.isDebug() )
//				{
//	    			System.out.println( dateFormater.format( new Date() ) + " : ramka z ELAN Communication" );
//	            	System.out.println( data );
//				}    		        	
//	        	
//	    		//Add CRC16 to frame
//				CRCLow = connection.read();
//				CRCHigh = connection.read();		
//				CRC = ( CRCHigh << 8 ) + CRCLow;
//				
//				if( ELANCRC16.checkCRC16( data, CRC ) )
//				{
//					count++;
//					miliDiff = currentTimeMillis2 - currentTimeMillis;
//					nanoDiff = nanoTime2 - nanoTime;
//					if (miliAvg == 0)
//					{
//						miliAvg = miliMin = miliMax = miliDiff;
//					}
//					else
//					{
//						miliAvg = (miliAvg + miliDiff);
//						if ( miliMin > miliDiff )
//						{
//							miliMin = miliDiff;
//						}
//						if ( miliMax < miliDiff )
//						{
//							miliMax = miliDiff;
//						}
//					}
//					
//					if (nanoAvg == 0)
//					{
//						nanoAvg = nanoMin = nanoMax = nanoDiff;
//					}
//					else
//					{
//						nanoAvg = (nanoAvg + nanoDiff);
//						if ( nanoMin > nanoDiff )
//						{
//							nanoMin = nanoDiff;
//						}
//						if ( nanoMax < nanoDiff )
//						{
//							nanoMax = nanoDiff;
//						}
//					}
//					
//					timeOutput.write( miliDiff +"" );
//					timeOutput.newLine();
//					timeNanoOutput.write( nanoDiff +"" );
//					timeNanoOutput.newLine();
//					//System.out.println( "Czas mili: " + miliDiff );
//					//System.out.println( "Czas nano: " + nanoDiff );
//					data.clear();
//					break;					
//				}
//				else
//				{
//					System.out.println( "CC error: " );
//					data.clear();
//					break;
//				}
//	    	}			
//		}
//	
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeOutput.write( "Count: " + count );timeOutput.newLine();
//		timeOutput.write( "Avg: " + miliAvg );timeOutput.newLine();
//		timeOutput.write( "Avg/count: " + miliAvg/count );timeOutput.newLine();
//		timeOutput.write( "Min: " + miliMin );timeOutput.newLine();
//		timeOutput.write( "Max:"  + miliMax );timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.flush();
//		
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "Count:: " + count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg: " + nanoAvg );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg/count: " + nanoAvg/count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Min: " + nanoMin );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Max:"  + nanoMax );timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );				
//		timeNanoOutput.flush();
//		
//		nanoTime = 0; miliDiff = 0; currentTimeMillis = 0; nanoTime2 = 0; currentTimeMillis2 = 0; nanoDiff = 0;
//		nanoAvg = 0; miliAvg = 0;
//		nanoMin = 0; miliMin = 0;
//		nanoMax = 0; miliMax = 0;
//		count = 0;
//		
//		writeFrame.clear();
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x01 );
//		writeFrame.add( 0xA4 );
//		writeFrame.add( 0xE0 );
//		writeFrame.add( 0x6B ); //k		
//		writeFrame.add( 0x01 ); //pojedynczy pomiar
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x03 );
//		writeFrame.add( 0xC9 ); //pojedynczy pomiar
//		writeFrame.add( 0x10 ); //pojedynczy pomiar
//		
//		timeOutput.newLine();
//		timeOutput.write( "				K1 A4				 " );
//		timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "				K1 A4				 " );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		
//		for ( int i = 0; i < 100; i++ )
//		{			
//			for( Integer value2: writeFrame )
//			{
//				connection.write( value2 );
//			}
//			nanoTime = System.nanoTime();			
//			currentTimeMillis = System.currentTimeMillis();
//						
//	    	previousCharacter = -1;
//	    	//Read first character from new frame
//	    	curentCharacter = connection.read();
//			nanoTime2 = System.nanoTime();
//			currentTimeMillis2 = System.currentTimeMillis();	
//	    	while(curentCharacter!=-1)
//	    	{
//	    		//loop reading until detect start of frame 16,1
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    		}
//	    		while ( !( (previousCharacter == 16) & (curentCharacter == 1) ) );
//	    		
//	    		//Add start of frame detect in previous loop
//	    		data.add(previousCharacter);
//	    		data.add(curentCharacter);
//	    		
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    			//Add current character to collected frame
//	    			data.add(curentCharacter);
//	    		}
//	    		while ( !( (previousCharacter==16) & (curentCharacter==3) ) );
//	    		
//	    		if ( Main.isDebug() )
//				{
//	    			System.out.println( dateFormater.format( new Date() ) + " : ramka z ELAN Communication" );
//	            	System.out.println( data );
//				}    		        	
//	        	
//	    		//Add CRC16 to frame
//				CRCLow = connection.read();
//				CRCHigh = connection.read();		
//				CRC = ( CRCHigh << 8 ) + CRCLow;
//				
//				if( ELANCRC16.checkCRC16( data, CRC ) )
//				{
//					count++;
//					miliDiff = currentTimeMillis2 - currentTimeMillis;
//					nanoDiff = nanoTime2 - nanoTime;
//					if (miliAvg == 0)
//					{
//						miliAvg = miliMin = miliMax = miliDiff;
//					}
//					else
//					{
//						miliAvg = (miliAvg + miliDiff);
//						if ( miliMin > miliDiff )
//						{
//							miliMin = miliDiff;
//						}
//						if ( miliMax < miliDiff )
//						{
//							miliMax = miliDiff;
//						}
//					}
//					
//					if (nanoAvg == 0)
//					{
//						nanoAvg = nanoMin = nanoMax = nanoDiff;
//					}
//					else
//					{
//						nanoAvg = (nanoAvg + nanoDiff);
//						if ( nanoMin > nanoDiff )
//						{
//							nanoMin = nanoDiff;
//						}
//						if ( nanoMax < nanoDiff )
//						{
//							nanoMax = nanoDiff;
//						}
//					}
//					
//					timeOutput.write( miliDiff +"" );
//					timeOutput.newLine();
//					timeNanoOutput.write( nanoDiff +"" );
//					timeNanoOutput.newLine();
//					//System.out.println( "Czas mili: " + miliDiff );
//					//System.out.println( "Czas nano: " + nanoDiff );
//					data.clear();
//					break;					
//				}
//				else
//				{
//					System.out.println( "CC error: " );
//					data.clear();
//					break;
//				}
//	    	}			
//		}
//	
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeOutput.write( "Count: " + count );timeOutput.newLine();
//		timeOutput.write( "Avg: " + miliAvg );timeOutput.newLine();
//		timeOutput.write( "Avg/count: " + miliAvg/count );timeOutput.newLine();
//		timeOutput.write( "Min: " + miliMin );timeOutput.newLine();
//		timeOutput.write( "Max:"  + miliMax );timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.flush();
//		
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "Count:: " + count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg: " + nanoAvg );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg/count: " + nanoAvg/count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Min: " + nanoMin );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Max:"  + nanoMax );timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );				
//		timeNanoOutput.flush();
//		
//		nanoTime = 0; miliDiff = 0; currentTimeMillis = 0; nanoTime2 = 0; currentTimeMillis2 = 0; nanoDiff = 0;
//		nanoAvg = 0; miliAvg = 0;
//		nanoMin = 0; miliMin = 0;
//		nanoMax = 0; miliMax = 0;
//		count = 0;
//		
//		writeFrame.clear();
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x01 );
//		writeFrame.add( 0xAA );
//		writeFrame.add( 0xE0 );
//		writeFrame.add( 0x6B ); //k		
//		writeFrame.add( 0x01 ); //pojedynczy pomiar
//		writeFrame.add( 0x10 );
//		writeFrame.add( 0x03 );
//		writeFrame.add( 0xC8 ); //pojedynczy pomiar
//		writeFrame.add( 0x3E ); //pojedynczy pomiar
//		
//		timeOutput.newLine();
//		timeOutput.write( "				K1 AA				 " );
//		timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "				K1 AA				 " );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		
//		for ( int i = 0; i < 100; i++ )
//		{			
//			for( Integer value2: writeFrame )
//			{
//				connection.write( value2 );
//			}
//			nanoTime = System.nanoTime();			
//			currentTimeMillis = System.currentTimeMillis();
//						
//	    	previousCharacter = -1;
//	    	//Read first character from new frame
//	    	curentCharacter = connection.read();
//			nanoTime2 = System.nanoTime();
//			currentTimeMillis2 = System.currentTimeMillis();	
//	    	while(curentCharacter!=-1)
//	    	{
//	    		//loop reading until detect start of frame 16,1
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    		}
//	    		while ( !( (previousCharacter == 16) & (curentCharacter == 1) ) );
//	    		
//	    		//Add start of frame detect in previous loop
//	    		data.add(previousCharacter);
//	    		data.add(curentCharacter);
//	    		
//	    		do
//	    		{   
//	    			previousCharacter = curentCharacter;  
//	    			//Read next character from new frame
//	    			curentCharacter = connection.read();	
//	    			//Add current character to collected frame
//	    			data.add(curentCharacter);
//	    		}
//	    		while ( !( (previousCharacter==16) & (curentCharacter==3) ) );
//	    		
//	    		if ( Main.isDebug() )
//				{
//	    			System.out.println( dateFormater.format( new Date() ) + " : ramka z ELAN Communication" );
//	            	System.out.println( data );
//				}    		        	
//	        	
//	    		//Add CRC16 to frame
//				CRCLow = connection.read();
//				CRCHigh = connection.read();		
//				CRC = ( CRCHigh << 8 ) + CRCLow;
//				
//				if( ELANCRC16.checkCRC16( data, CRC ) )
//				{
//					count++;
//					miliDiff = currentTimeMillis2 - currentTimeMillis;
//					nanoDiff = nanoTime2 - nanoTime;
//					if (miliAvg == 0)
//					{
//						miliAvg = miliMin = miliMax = miliDiff;
//					}
//					else
//					{
//						miliAvg = (miliAvg + miliDiff);
//						if ( miliMin > miliDiff )
//						{
//							miliMin = miliDiff;
//						}
//						if ( miliMax < miliDiff )
//						{
//							miliMax = miliDiff;
//						}
//					}
//					
//					if (nanoAvg == 0)
//					{
//						nanoAvg = nanoMin = nanoMax = nanoDiff;
//					}
//					else
//					{
//						nanoAvg = (nanoAvg + nanoDiff);
//						if ( nanoMin > nanoDiff )
//						{
//							nanoMin = nanoDiff;
//						}
//						if ( nanoMax < nanoDiff )
//						{
//							nanoMax = nanoDiff;
//						}
//					}
//					
//					timeOutput.write( miliDiff +"" );
//					timeOutput.newLine();
//					timeNanoOutput.write( nanoDiff +"" );
//					timeNanoOutput.newLine();
//					//System.out.println( "Czas mili: " + miliDiff );
//					//System.out.println( "Czas nano: " + nanoDiff );
//					data.clear();
//					break;					
//				}
//				else
//				{
//					System.out.println( "CC error: " );
//					data.clear();
//					break;
//				}
//	    	}			
//		}
//	
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.newLine();
//		timeOutput.write( "Count: " + count );timeOutput.newLine();
//		timeOutput.write( "Avg: " + miliAvg );timeOutput.newLine();
//		timeOutput.write( "Avg/count: " + miliAvg/count );timeOutput.newLine();
//		timeOutput.write( "Min: " + miliMin );timeOutput.newLine();
//		timeOutput.write( "Max:"  + miliMax );timeOutput.newLine();
//		timeOutput.write( "------------------------------------------" );
//		timeOutput.flush();
//		
//		timeNanoOutput.write( "------------------------------------------" );
//		timeNanoOutput.newLine();
//		timeNanoOutput.write( "Count:: " + count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg: " + nanoAvg );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Avg/count: " + nanoAvg/count );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Min: " + nanoMin );timeNanoOutput.newLine();
//		timeNanoOutput.write( "Max:"  + nanoMax );timeNanoOutput.newLine();
//		timeNanoOutput.write( "------------------------------------------" );				
//		timeNanoOutput.flush();