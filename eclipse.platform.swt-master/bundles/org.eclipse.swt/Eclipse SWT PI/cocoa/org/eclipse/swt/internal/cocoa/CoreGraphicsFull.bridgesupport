<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/IOSurface.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<struct name='CGAffineTransform' type64='{CGAffineTransform=&quot;a&quot;d&quot;b&quot;d&quot;c&quot;d&quot;d&quot;d&quot;tx&quot;d&quot;ty&quot;d}' type='{CGAffineTransform=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f&quot;tx&quot;f&quot;ty&quot;f}'>
<field name='a' declared_type='CGFloat' type64='d' type='f'/>
<field name='b' declared_type='CGFloat' type64='d' type='f'/>
<field name='c' declared_type='CGFloat' type64='d' type='f'/>
<field name='d' declared_type='CGFloat' type64='d' type='f'/>
<field name='tx' declared_type='CGFloat' type64='d' type='f'/>
<field name='ty' declared_type='CGFloat' type64='d' type='f'/>
</struct>
<struct name='CGDataConsumerCallbacks' type='{CGDataConsumerCallbacks=&quot;putBytes&quot;^?&quot;releaseConsumer&quot;^?}'>
<field name='putBytes' function_pointer='true' declared_type='CGDataConsumerPutBytesCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' const='true' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</field>
<field name='releaseConsumer' function_pointer='true' declared_type='CGDataConsumerReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGDataProviderCallbacks' type='{CGDataProviderCallbacks=&quot;getBytes&quot;^?&quot;skipBytes&quot;^?&quot;rewind&quot;^?&quot;releaseProvider&quot;^?}'>
<field name='getBytes' function_pointer='true' declared_type='CGDataProviderGetBytesCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</field>
<field name='skipBytes' function_pointer='true' declared_type='CGDataProviderSkipBytesCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rewind' function_pointer='true' declared_type='CGDataProviderRewindCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='releaseProvider' function_pointer='true' declared_type='CGDataProviderReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGDataProviderDirectAccessCallbacks' type='{CGDataProviderDirectAccessCallbacks=&quot;getBytePointer&quot;^?&quot;releaseBytePointer&quot;^?&quot;getBytes&quot;^?&quot;releaseProvider&quot;^?}'>
<field name='getBytePointer' function_pointer='true' declared_type='CGDataProviderGetBytePointerCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void*' const='true' type='^v'/>
</field>
<field name='releaseBytePointer' function_pointer='true' declared_type='CGDataProviderReleaseBytePointerCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' const='true' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='getBytes' function_pointer='true' declared_type='CGDataProviderGetBytesAtOffsetCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</field>
<field name='releaseProvider' function_pointer='true' declared_type='CGDataProviderReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGDataProviderDirectCallbacks' type='{CGDataProviderDirectCallbacks=&quot;version&quot;I&quot;getBytePointer&quot;^?&quot;releaseBytePointer&quot;^?&quot;getBytesAtPosition&quot;^?&quot;releaseInfo&quot;^?}'>
<field name='version' declared_type='unsigned int' type='I'/>
<field name='getBytePointer' function_pointer='true' declared_type='CGDataProviderGetBytePointerCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void*' const='true' type='^v'/>
</field>
<field name='releaseBytePointer' function_pointer='true' declared_type='CGDataProviderReleaseBytePointerCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' const='true' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='getBytesAtPosition' function_pointer='true' declared_type='CGDataProviderGetBytesAtPositionCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='off_t' type='q'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</field>
<field name='releaseInfo' function_pointer='true' declared_type='CGDataProviderReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGDataProviderSequentialCallbacks' type='{CGDataProviderSequentialCallbacks=&quot;version&quot;I&quot;getBytes&quot;^?&quot;skipForward&quot;^?&quot;rewind&quot;^?&quot;releaseInfo&quot;^?}'>
<field name='version' declared_type='unsigned int' type='I'/>
<field name='getBytes' function_pointer='true' declared_type='CGDataProviderGetBytesCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</field>
<field name='skipForward' function_pointer='true' declared_type='CGDataProviderSkipForwardCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='off_t' type='q'/>
<retval declared_type='off_t' type='q'/>
</field>
<field name='rewind' function_pointer='true' declared_type='CGDataProviderRewindCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='releaseInfo' function_pointer='true' declared_type='CGDataProviderReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGDeviceByteColor' type='{CGDeviceByteColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C}'>
<field name='red' declared_type='uint8_t' type='C'/>
<field name='green' declared_type='uint8_t' type='C'/>
<field name='blue' declared_type='uint8_t' type='C'/>
</struct>
<struct name='CGDeviceColor' type='{CGDeviceColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f}'>
<field name='red' declared_type='float' type='f'/>
<field name='green' declared_type='float' type='f'/>
<field name='blue' declared_type='float' type='f'/>
</struct>
<struct name='CGEventTapInformation' type='{__CGEventTapInformation=&quot;eventTapID&quot;I&quot;tapPoint&quot;I&quot;options&quot;I&quot;eventsOfInterest&quot;Q&quot;tappingProcess&quot;i&quot;processBeingTapped&quot;i&quot;enabled&quot;B&quot;minUsecLatency&quot;f&quot;avgUsecLatency&quot;f&quot;maxUsecLatency&quot;f}'>
<field name='eventTapID' declared_type='uint32_t' type='I'/>
<field name='tapPoint' declared_type='CGEventTapLocation' type='I'/>
<field name='options' declared_type='CGEventTapOptions' type='I'/>
<field name='eventsOfInterest' declared_type='CGEventMask' type='Q'/>
<field name='tappingProcess' declared_type='pid_t' type='i'/>
<field name='processBeingTapped' declared_type='pid_t' type='i'/>
<field name='enabled' declared_type='_Bool' type='B'/>
<field name='minUsecLatency' declared_type='float' type='f'/>
<field name='avgUsecLatency' declared_type='float' type='f'/>
<field name='maxUsecLatency' declared_type='float' type='f'/>
</struct>
<struct name='CGFunctionCallbacks' type='{CGFunctionCallbacks=&quot;version&quot;I&quot;evaluate&quot;^?&quot;releaseInfo&quot;^?}'>
<field name='version' declared_type='unsigned int' type='I'/>
<field name='evaluate' function_pointer='true' declared_type='CGFunctionEvaluateCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg declared_type='CGFloat*' type64='^d' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='releaseInfo' function_pointer='true' declared_type='CGFunctionReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGPSConverterCallbacks' type='{CGPSConverterCallbacks=&quot;version&quot;I&quot;beginDocument&quot;^?&quot;endDocument&quot;^?&quot;beginPage&quot;^?&quot;endPage&quot;^?&quot;noteProgress&quot;^?&quot;noteMessage&quot;^?&quot;releaseInfo&quot;^?}'>
<field name='version' declared_type='unsigned int' type='I'/>
<field name='beginDocument' function_pointer='true' declared_type='CGPSConverterBeginDocumentCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='endDocument' function_pointer='true' declared_type='CGPSConverterEndDocumentCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</field>
<field name='beginPage' function_pointer='true' declared_type='CGPSConverterBeginPageCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='endPage' function_pointer='true' declared_type='CGPSConverterEndPageCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='noteProgress' function_pointer='true' declared_type='CGPSConverterProgressCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='noteMessage' function_pointer='true' declared_type='CGPSConverterMessageCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='releaseInfo' function_pointer='true' declared_type='CGPSConverterReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGPathElement' type='{CGPathElement=&quot;type&quot;i&quot;points&quot;^{CGPoint}}'>
<field name='type' declared_type='CGPathElementType' type='i'/>
<field name='points' declared_type='CGPoint*' type64='^{CGPoint=dd}' type='^{CGPoint=ff}'/>
</struct>
<struct name='CGPatternCallbacks' type='{CGPatternCallbacks=&quot;version&quot;I&quot;drawPattern&quot;^?&quot;releaseInfo&quot;^?}'>
<field name='version' declared_type='unsigned int' type='I'/>
<field name='drawPattern' function_pointer='true' declared_type='CGPatternDrawPatternCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='releaseInfo' function_pointer='true' declared_type='CGPatternReleaseInfoCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='CGPoint' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'>
<field name='x' declared_type='CGFloat' type64='d' type='f'/>
<field name='y' declared_type='CGFloat' type64='d' type='f'/>
</struct>
<struct name='CGRect' type64='{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;size&quot;{CGSize=&quot;width&quot;d&quot;height&quot;d}}' type='{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}'>
<field name='origin' declared_type='CGPoint' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='size' declared_type='CGSize' type64='{CGSize=&quot;width&quot;d&quot;height&quot;d}' type='{CGSize=&quot;width&quot;f&quot;height&quot;f}'/>
</struct>
<struct name='CGScreenUpdateMoveDelta' type='{CGScreenUpdateMoveDelta=&quot;dX&quot;i&quot;dY&quot;i}'>
<field name='dX' declared_type='int32_t' type='i'/>
<field name='dY' declared_type='int32_t' type='i'/>
</struct>
<struct name='CGSize' type64='{CGSize=&quot;width&quot;d&quot;height&quot;d}' type='{CGSize=&quot;width&quot;f&quot;height&quot;f}'>
<field name='width' declared_type='CGFloat' type64='d' type='f'/>
<field name='height' declared_type='CGFloat' type64='d' type='f'/>
</struct>
<cftype name='CGColorRef' gettypeid_func='CGColorGetTypeID' type='^{CGColor=}' tollfree='__NSCFType'/>
<cftype name='CGColorSpaceRef' gettypeid_func='CGColorSpaceGetTypeID' type='^{CGColorSpace=}' tollfree='__NSCFType'/>
<cftype name='CGContextRef' gettypeid_func='CGContextGetTypeID' type='^{CGContext=}' tollfree='__NSCFType'/>
<cftype name='CGDataConsumerRef' gettypeid_func='CGDataConsumerGetTypeID' type='^{CGDataConsumer=}' tollfree='__NSCFType'/>
<cftype name='CGDataProviderRef' gettypeid_func='CGDataProviderGetTypeID' type='^{CGDataProvider=}' tollfree='__NSCFType'/>
<cftype name='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<cftype name='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<cftype name='CGDisplayModeRef' gettypeid_func='CGDisplayModeGetTypeID' type='^{CGDisplayMode=}' tollfree='__NSCFType'/>
<cftype name='CGEventRef' gettypeid_func='CGEventGetTypeID' type='^{__CGEvent=}' tollfree='__NSCFType'/>
<cftype name='CGEventSourceRef' gettypeid_func='CGEventSourceGetTypeID' type='^{__CGEventSource=}' tollfree='__NSCFType'/>
<cftype name='CGFontRef' gettypeid_func='CGFontGetTypeID' type='^{CGFont=}' tollfree='__NSCFType'/>
<cftype name='CGFunctionRef' gettypeid_func='CGFunctionGetTypeID' type='^{CGFunction=}' tollfree='__NSCFType'/>
<cftype name='CGGradientRef' gettypeid_func='CGGradientGetTypeID' type='^{CGGradient=}' tollfree='__NSCFType'/>
<cftype name='CGImageRef' gettypeid_func='CGImageGetTypeID' type='^{CGImage=}' tollfree='__NSCFType'/>
<cftype name='CGLayerRef' gettypeid_func='CGLayerGetTypeID' type='^{CGLayer=}' tollfree='__NSCFType'/>
<cftype name='CGMutablePathRef' gettypeid_func='CGPathGetTypeID' type='^{CGPath=}' tollfree='__NSCFType'/>
<cftype name='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<cftype name='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
<cftype name='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<cftype name='CGPDFDocumentRef' gettypeid_func='CGPDFDocumentGetTypeID' type='^{CGPDFDocument=}' tollfree='__NSCFType'/>
<cftype name='CGPDFObjectRef' type='^(CGPDFObject=)'/>
<cftype name='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
<cftype name='CGPDFPageRef' gettypeid_func='CGPDFPageGetTypeID' type='^{CGPDFPage=}' tollfree='__NSCFType'/>
<cftype name='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<cftype name='CGPDFStreamRef' type='^{CGPDFStream=}'/>
<cftype name='CGPDFStringRef' type='^{CGPDFString=}'/>
<cftype name='CGPSConverterRef' gettypeid_func='CGPSConverterGetTypeID' type='^{CGPSConverter=}' tollfree='__NSCFType'/>
<cftype name='CGPathRef' gettypeid_func='CGPathGetTypeID' type='^{CGPath=}' tollfree='__NSCFType'/>
<cftype name='CGPatternRef' gettypeid_func='CGPatternGetTypeID' type='^{CGPattern=}' tollfree='__NSCFType'/>
<cftype name='CGShadingRef' gettypeid_func='CGShadingGetTypeID' type='^{CGShading=}' tollfree='__NSCFType'/>
<opaque name='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
<constant name='CGAffineTransformIdentity' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' const='true' type='{CGAffineTransform=ffffff}'/>
<constant name='CGPointZero' declared_type='CGPoint' type64='{CGPoint=dd}' const='true' type='{CGPoint=ff}'/>
<constant name='CGRectInfinite' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<constant name='CGRectNull' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<constant name='CGRectZero' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<constant name='CGSizeZero' declared_type='CGSize' type64='{CGSize=dd}' const='true' type='{CGSize=ff}'/>
<constant name='kCGColorBlack' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorClear' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorSpaceAdobeRGB1998' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorSpaceGenericCMYK' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorSpaceGenericGray' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorSpaceGenericGrayGamma2_2' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorSpaceGenericRGB' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorSpaceGenericRGBLinear' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorSpaceSRGB' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGColorWhite' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGFontVariationAxisDefaultValue' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGFontVariationAxisMaxValue' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGFontVariationAxisMinValue' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGFontVariationAxisName' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextAllowsCopying' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextAllowsPrinting' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextArtBox' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextAuthor' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextBleedBox' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextCreator' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextCropBox' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextEncryptionKeyLength' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextKeywords' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextMediaBox' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextOutputIntent' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextOutputIntents' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextOwnerPassword' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextSubject' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextTitle' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextTrimBox' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFContextUserPassword' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFXDestinationOutputProfile' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFXInfo' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFXOutputCondition' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFXOutputConditionIdentifier' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFXOutputIntentSubtype' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGPDFXRegistryName' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowAlpha' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowBackingLocationVideoMemory' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowBounds' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowIsOnscreen' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowLayer' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowMemoryUsage' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowName' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowNumber' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowOwnerName' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowOwnerPID' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowSharingState' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowStoreType' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<constant name='kCGWindowWorkspace' declared_type='CFStringRef' const='true' type='^{__CFString=}'/>
<string_constant name='kCGDisplayBitsPerPixel' nsstring='true' value='BitsPerPixel'/>
<string_constant name='kCGDisplayBitsPerSample' nsstring='true' value='BitsPerSample'/>
<string_constant name='kCGDisplayBytesPerRow' nsstring='true' value='kCGDisplayBytesPerRow'/>
<string_constant name='kCGDisplayHeight' nsstring='true' value='Height'/>
<string_constant name='kCGDisplayIOFlags' nsstring='true' value='IOFlags'/>
<string_constant name='kCGDisplayMode' nsstring='true' value='Mode'/>
<string_constant name='kCGDisplayModeIsInterlaced' nsstring='true' value='kCGDisplayModeIsInterlaced'/>
<string_constant name='kCGDisplayModeIsSafeForHardware' nsstring='true' value='kCGDisplayModeIsSafeForHardware'/>
<string_constant name='kCGDisplayModeIsStretched' nsstring='true' value='kCGDisplayModeIsStretched'/>
<string_constant name='kCGDisplayModeIsTelevisionOutput' nsstring='true' value='kCGDisplayModeIsTelevisionOutput'/>
<string_constant name='kCGDisplayModeUsableForDesktopGUI' nsstring='true' value='UsableForDesktopGUI'/>
<string_constant name='kCGDisplayRefreshRate' nsstring='true' value='RefreshRate'/>
<string_constant name='kCGDisplaySamplesPerPixel' nsstring='true' value='SamplesPerPixel'/>
<string_constant name='kCGDisplayWidth' nsstring='true' value='Width'/>
<string_constant name='kCGIODisplayModeID' nsstring='true' value='IODisplayModeID'/>
<string_constant name='kCGNotifyEventTapAdded' value='com.apple.coregraphics.eventTapAdded'/>
<string_constant name='kCGNotifyEventTapRemoved' value='com.apple.coregraphics.eventTapRemoved'/>
<string_constant name='kCGNotifyGUIConsoleSessionChanged' value='com.apple.coregraphics.GUIConsoleSessionChanged'/>
<string_constant name='kCGNotifyGUISessionUserChanged' value='com.apple.coregraphics.GUISessionUserChanged'/>
<string_constant name='kCGSessionConsoleSetKey' nsstring='true' value='kCGSSessionConsoleSetKey'/>
<string_constant name='kCGSessionLoginDoneKey' nsstring='true' value='kCGSessionLoginDoneKey'/>
<string_constant name='kCGSessionOnConsoleKey' nsstring='true' value='kCGSSessionOnConsoleKey'/>
<string_constant name='kCGSessionUserIDKey' nsstring='true' value='kCGSSessionUserIDKey'/>
<string_constant name='kCGSessionUserNameKey' nsstring='true' value='kCGSSessionUserNameKey'/>
<enum name='CGDisplayNoErr' value='0'/>
<enum name='CGEventNoErr' value='0'/>
<enum name='CGFLOAT_DEFINED' value='1'/>
<enum name='CGFLOAT_IS_DOUBLE' value64='1' value='0'/>
<enum name='CGFLOAT_MAX' value64='1.797693134862316E+308' value='3.4028235E+38'/>
<enum name='CGFLOAT_MIN' value64='2.225073858507201E-308' value='1.1754944E-38'/>
<enum name='CGGlyphMax' value='65534'/>
<enum name='CGGlyphMin' value='0'/>
<enum name='CGPDFDataFormatJPEG2000' value='2'/>
<enum name='CGPDFDataFormatJPEGEncoded' value='1'/>
<enum name='CGPDFDataFormatRaw' value='0'/>
<enum name='CGRectMaxXEdge' value='2'/>
<enum name='CGRectMaxYEdge' value='3'/>
<enum name='CGRectMinXEdge' value='0'/>
<enum name='CGRectMinYEdge' value='1'/>
<enum name='kCGAnnotatedSessionEventTap' value='2'/>
<enum name='kCGAnyInputEventType' value='4294967295'/>
<enum name='kCGAssistiveTechHighWindowLevel' value='1500'/>
<enum name='kCGAssistiveTechHighWindowLevelKey' value='20'/>
<enum name='kCGBackingStoreBuffered' value='2'/>
<enum name='kCGBackingStoreNonretained' value='1'/>
<enum name='kCGBackingStoreRetained' value='0'/>
<enum name='kCGBackstopMenuLevel' value='-20'/>
<enum name='kCGBackstopMenuLevelKey' value='3'/>
<enum name='kCGBaseWindowLevel' value='-2147483648'/>
<enum name='kCGBaseWindowLevelKey' value='0'/>
<enum name='kCGBitmapAlphaInfoMask' value='31'/>
<enum name='kCGBitmapByteOrder16Big' value='12288'/>
<enum name='kCGBitmapByteOrder16Host' value='4096'/>
<enum name='kCGBitmapByteOrder16Little' value='4096'/>
<enum name='kCGBitmapByteOrder32Big' value='16384'/>
<enum name='kCGBitmapByteOrder32Host' value='8192'/>
<enum name='kCGBitmapByteOrder32Little' value='8192'/>
<enum name='kCGBitmapByteOrderDefault' value='0'/>
<enum name='kCGBitmapByteOrderMask' value='28672'/>
<enum name='kCGBitmapFloatComponents' value='256'/>
<enum name='kCGBlendModeClear' value='16'/>
<enum name='kCGBlendModeColor' value='14'/>
<enum name='kCGBlendModeColorBurn' value='7'/>
<enum name='kCGBlendModeColorDodge' value='6'/>
<enum name='kCGBlendModeCopy' value='17'/>
<enum name='kCGBlendModeDarken' value='4'/>
<enum name='kCGBlendModeDestinationAtop' value='24'/>
<enum name='kCGBlendModeDestinationIn' value='22'/>
<enum name='kCGBlendModeDestinationOut' value='23'/>
<enum name='kCGBlendModeDestinationOver' value='21'/>
<enum name='kCGBlendModeDifference' value='10'/>
<enum name='kCGBlendModeExclusion' value='11'/>
<enum name='kCGBlendModeHardLight' value='9'/>
<enum name='kCGBlendModeHue' value='12'/>
<enum name='kCGBlendModeLighten' value='5'/>
<enum name='kCGBlendModeLuminosity' value='15'/>
<enum name='kCGBlendModeMultiply' value='1'/>
<enum name='kCGBlendModeNormal' value='0'/>
<enum name='kCGBlendModeOverlay' value='3'/>
<enum name='kCGBlendModePlusDarker' value='26'/>
<enum name='kCGBlendModePlusLighter' value='27'/>
<enum name='kCGBlendModeSaturation' value='13'/>
<enum name='kCGBlendModeScreen' value='2'/>
<enum name='kCGBlendModeSoftLight' value='8'/>
<enum name='kCGBlendModeSourceAtop' value='20'/>
<enum name='kCGBlendModeSourceIn' value='18'/>
<enum name='kCGBlendModeSourceOut' value='19'/>
<enum name='kCGBlendModeXOR' value='25'/>
<enum name='kCGCaptureNoFill' value='1'/>
<enum name='kCGCaptureNoOptions' value='0'/>
<enum name='kCGColorSpaceModelCMYK' value='2'/>
<enum name='kCGColorSpaceModelDeviceN' value='4'/>
<enum name='kCGColorSpaceModelIndexed' value='5'/>
<enum name='kCGColorSpaceModelLab' value='3'/>
<enum name='kCGColorSpaceModelMonochrome' value='0'/>
<enum name='kCGColorSpaceModelPattern' value='6'/>
<enum name='kCGColorSpaceModelRGB' value='1'/>
<enum name='kCGColorSpaceModelUnknown' value='-1'/>
<enum name='kCGConfigureForAppOnly' value='0'/>
<enum name='kCGConfigureForSession' value='1'/>
<enum name='kCGConfigurePermanently' value='2'/>
<enum name='kCGCursorWindowLevel' value='2147483630'/>
<enum name='kCGCursorWindowLevelKey' value='19'/>
<enum name='kCGDesktopIconWindowLevel' value='-2147483603'/>
<enum name='kCGDesktopIconWindowLevelKey' value='18'/>
<enum name='kCGDesktopWindowLevel' value='-2147483623'/>
<enum name='kCGDesktopWindowLevelKey' value='2'/>
<enum name='kCGDirectMainDisplay' value='69671616'/>
<enum name='kCGDisplayAddFlag' value='16'/>
<enum name='kCGDisplayBeginConfigurationFlag' value='1'/>
<enum name='kCGDisplayBlendNormal' value='0.0'/>
<enum name='kCGDisplayBlendSolidColor' value='1.0'/>
<enum name='kCGDisplayDesktopShapeChangedFlag' value='4096'/>
<enum name='kCGDisplayDisabledFlag' value='512'/>
<enum name='kCGDisplayEnabledFlag' value='256'/>
<enum name='kCGDisplayFadeReservationInvalidToken' value='0'/>
<enum name='kCGDisplayMirrorFlag' value='1024'/>
<enum name='kCGDisplayMovedFlag' value='2'/>
<enum name='kCGDisplayRemoveFlag' value='32'/>
<enum name='kCGDisplaySetMainFlag' value='4'/>
<enum name='kCGDisplaySetModeFlag' value='8'/>
<enum name='kCGDisplayUnMirrorFlag' value='2048'/>
<enum name='kCGDockWindowLevel' value='20'/>
<enum name='kCGDockWindowLevelKey' value='7'/>
<enum name='kCGDraggingWindowLevel' value='500'/>
<enum name='kCGDraggingWindowLevelKey' value='12'/>
<enum name='kCGEncodingFontSpecific' value='0'/>
<enum name='kCGEncodingMacRoman' value='1'/>
<enum name='kCGErrorApplicationAlreadyRunning' value='1025'/>
<enum name='kCGErrorApplicationCanOnlyBeRunInOneSessionAtATime' value='1026'/>
<enum name='kCGErrorApplicationIncorrectExecutableFormatFound' value='1023'/>
<enum name='kCGErrorApplicationIsLaunching' value='1024'/>
<enum name='kCGErrorApplicationNotPermittedToExecute' value='1016'/>
<enum name='kCGErrorApplicationRequiresNewerSystem' value='1015'/>
<enum name='kCGErrorCannotComplete' value='1004'/>
<enum name='kCGErrorClassicApplicationsMustBeLaunchedByClassic' value='1027'/>
<enum name='kCGErrorFailure' value='1000'/>
<enum name='kCGErrorFirst' value='1000'/>
<enum name='kCGErrorForkFailed' value='1028'/>
<enum name='kCGErrorIllegalArgument' value='1001'/>
<enum name='kCGErrorInvalidConnection' value='1002'/>
<enum name='kCGErrorInvalidContext' value='1003'/>
<enum name='kCGErrorInvalidOperation' value='1010'/>
<enum name='kCGErrorLast' value='1029'/>
<enum name='kCGErrorNameTooLong' value='1005'/>
<enum name='kCGErrorNoCurrentPoint' value='1009'/>
<enum name='kCGErrorNoneAvailable' value='1011'/>
<enum name='kCGErrorNotImplemented' value='1006'/>
<enum name='kCGErrorRangeCheck' value='1007'/>
<enum name='kCGErrorRetryRegistration' value='1029'/>
<enum name='kCGErrorSuccess' value='0'/>
<enum name='kCGErrorTypeCheck' value='1008'/>
<enum name='kCGEventFilterMaskPermitAllEvents' value='7'/>
<enum name='kCGEventFilterMaskPermitLocalKeyboardEvents' value='2'/>
<enum name='kCGEventFilterMaskPermitLocalMouseEvents' value='1'/>
<enum name='kCGEventFilterMaskPermitSystemDefinedEvents' value='4'/>
<enum name='kCGEventFlagMaskAlphaShift' value='65536'/>
<enum name='kCGEventFlagMaskAlternate' value='524288'/>
<enum name='kCGEventFlagMaskCommand' value='1048576'/>
<enum name='kCGEventFlagMaskControl' value='262144'/>
<enum name='kCGEventFlagMaskHelp' value='4194304'/>
<enum name='kCGEventFlagMaskNonCoalesced' value='256'/>
<enum name='kCGEventFlagMaskNumericPad' value='2097152'/>
<enum name='kCGEventFlagMaskSecondaryFn' value='8388608'/>
<enum name='kCGEventFlagMaskShift' value='131072'/>
<enum name='kCGEventFlagsChanged' value='12'/>
<enum name='kCGEventKeyDown' value='10'/>
<enum name='kCGEventKeyUp' value='11'/>
<enum name='kCGEventLeftMouseDown' value='1'/>
<enum name='kCGEventLeftMouseDragged' value='6'/>
<enum name='kCGEventLeftMouseUp' value='2'/>
<enum name='kCGEventMaskForAllEvents' value='18446744073709551615'/>
<enum name='kCGEventMouseMoved' value='5'/>
<enum name='kCGEventMouseSubtypeDefault' value='0'/>
<enum name='kCGEventMouseSubtypeTabletPoint' value='1'/>
<enum name='kCGEventMouseSubtypeTabletProximity' value='2'/>
<enum name='kCGEventNull' value='0'/>
<enum name='kCGEventOtherMouseDown' value='25'/>
<enum name='kCGEventOtherMouseDragged' value='27'/>
<enum name='kCGEventOtherMouseUp' value='26'/>
<enum name='kCGEventRightMouseDown' value='3'/>
<enum name='kCGEventRightMouseDragged' value='7'/>
<enum name='kCGEventRightMouseUp' value='4'/>
<enum name='kCGEventScrollWheel' value='22'/>
<enum name='kCGEventSourceGroupID' value='44'/>
<enum name='kCGEventSourceStateCombinedSessionState' value='0'/>
<enum name='kCGEventSourceStateHIDSystemState' value='1'/>
<enum name='kCGEventSourceStateID' value='45'/>
<enum name='kCGEventSourceStatePrivate' value='-1'/>
<enum name='kCGEventSourceUnixProcessID' value='41'/>
<enum name='kCGEventSourceUserData' value='42'/>
<enum name='kCGEventSourceUserID' value='43'/>
<enum name='kCGEventSuppressionStateRemoteMouseDrag' value='1'/>
<enum name='kCGEventSuppressionStateSuppressionInterval' value='0'/>
<enum name='kCGEventSupressionStateRemoteMouseDrag' value='1'/>
<enum name='kCGEventSupressionStateSupressionInterval' value='0'/>
<enum name='kCGEventTabletPointer' value='23'/>
<enum name='kCGEventTabletProximity' value='24'/>
<enum name='kCGEventTapDisabledByTimeout' value='4294967294'/>
<enum name='kCGEventTapDisabledByUserInput' value='4294967295'/>
<enum name='kCGEventTapOptionDefault' value='0'/>
<enum name='kCGEventTapOptionListenOnly' value='1'/>
<enum name='kCGEventTargetProcessSerialNumber' value='39'/>
<enum name='kCGEventTargetUnixProcessID' value='40'/>
<enum name='kCGFloatingWindowLevel' value='3'/>
<enum name='kCGFloatingWindowLevelKey' value='5'/>
<enum name='kCGFontIndexInvalid' value='65535'/>
<enum name='kCGFontIndexMax' value='65534'/>
<enum name='kCGFontPostScriptFormatType1' value='1'/>
<enum name='kCGFontPostScriptFormatType3' value='3'/>
<enum name='kCGFontPostScriptFormatType42' value='42'/>
<enum name='kCGGlyphMax' value='65534'/>
<enum name='kCGGradientDrawsAfterEndLocation' value='2'/>
<enum name='kCGGradientDrawsBeforeStartLocation' value='1'/>
<enum name='kCGHIDEventTap' value='0'/>
<enum name='kCGHeadInsertEventTap' value='0'/>
<enum name='kCGHelpWindowLevel' value='200'/>
<enum name='kCGHelpWindowLevelKey' value='16'/>
<enum name='kCGImageAlphaFirst' value='4'/>
<enum name='kCGImageAlphaLast' value='3'/>
<enum name='kCGImageAlphaNone' value='0'/>
<enum name='kCGImageAlphaNoneSkipFirst' value='6'/>
<enum name='kCGImageAlphaNoneSkipLast' value='5'/>
<enum name='kCGImageAlphaOnly' value='7'/>
<enum name='kCGImageAlphaPremultipliedFirst' value='2'/>
<enum name='kCGImageAlphaPremultipliedLast' value='1'/>
<enum name='kCGInterpolationDefault' value='0'/>
<enum name='kCGInterpolationHigh' value='3'/>
<enum name='kCGInterpolationLow' value='2'/>
<enum name='kCGInterpolationMedium' value='4'/>
<enum name='kCGInterpolationNone' value='1'/>
<enum name='kCGKeyboardEventAutorepeat' value='8'/>
<enum name='kCGKeyboardEventKeyboardType' value='10'/>
<enum name='kCGKeyboardEventKeycode' value='9'/>
<enum name='kCGLineCapButt' value='0'/>
<enum name='kCGLineCapRound' value='1'/>
<enum name='kCGLineCapSquare' value='2'/>
<enum name='kCGLineJoinBevel' value='2'/>
<enum name='kCGLineJoinMiter' value='0'/>
<enum name='kCGLineJoinRound' value='1'/>
<enum name='kCGMainMenuWindowLevel' value='24'/>
<enum name='kCGMainMenuWindowLevelKey' value='8'/>
<enum name='kCGMaxDisplayReservationInterval' value='15'/>
<enum name='kCGMaximumWindowLevel' value='2147483631'/>
<enum name='kCGMaximumWindowLevelKey' value='14'/>
<enum name='kCGMinimumWindowLevel' value='-2147483643'/>
<enum name='kCGMinimumWindowLevelKey' value='1'/>
<enum name='kCGModalPanelWindowLevel' value='8'/>
<enum name='kCGModalPanelWindowLevelKey' value='10'/>
<enum name='kCGMouseButtonCenter' value='2'/>
<enum name='kCGMouseButtonLeft' value='0'/>
<enum name='kCGMouseButtonRight' value='1'/>
<enum name='kCGMouseDownEventMaskingDeadSwitchTimeout' value='60.0'/>
<enum name='kCGMouseEventButtonNumber' value='3'/>
<enum name='kCGMouseEventClickState' value='1'/>
<enum name='kCGMouseEventDeltaX' value='4'/>
<enum name='kCGMouseEventDeltaY' value='5'/>
<enum name='kCGMouseEventInstantMouser' value='6'/>
<enum name='kCGMouseEventNumber' value='0'/>
<enum name='kCGMouseEventPressure' value='2'/>
<enum name='kCGMouseEventSubtype' value='7'/>
<enum name='kCGMouseEventWindowUnderMousePointer' value='91'/>
<enum name='kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent' value='92'/>
<enum name='kCGNormalWindowLevel' value='0'/>
<enum name='kCGNormalWindowLevelKey' value='4'/>
<enum name='kCGNullDirectDisplay' value='0'/>
<enum name='kCGNullWindowID' value='0'/>
<enum name='kCGNumReservedWindowLevels' value='16'/>
<enum name='kCGNumberOfEventSuppressionStates' value='2'/>
<enum name='kCGNumberOfEventSupressionStates' value='2'/>
<enum name='kCGNumberOfWindowLevelKeys' value='21'/>
<enum name='kCGOverlayWindowLevel' value='102'/>
<enum name='kCGOverlayWindowLevelKey' value='15'/>
<enum name='kCGPDFArtBox' value='4'/>
<enum name='kCGPDFBleedBox' value='2'/>
<enum name='kCGPDFCropBox' value='1'/>
<enum name='kCGPDFMediaBox' value='0'/>
<enum name='kCGPDFObjectTypeArray' value='7'/>
<enum name='kCGPDFObjectTypeBoolean' value='2'/>
<enum name='kCGPDFObjectTypeDictionary' value='8'/>
<enum name='kCGPDFObjectTypeInteger' value='3'/>
<enum name='kCGPDFObjectTypeName' value='5'/>
<enum name='kCGPDFObjectTypeNull' value='1'/>
<enum name='kCGPDFObjectTypeReal' value='4'/>
<enum name='kCGPDFObjectTypeStream' value='9'/>
<enum name='kCGPDFObjectTypeString' value='6'/>
<enum name='kCGPDFTrimBox' value='3'/>
<enum name='kCGPathEOFill' value='1'/>
<enum name='kCGPathEOFillStroke' value='4'/>
<enum name='kCGPathElementAddCurveToPoint' value='3'/>
<enum name='kCGPathElementAddLineToPoint' value='1'/>
<enum name='kCGPathElementAddQuadCurveToPoint' value='2'/>
<enum name='kCGPathElementCloseSubpath' value='4'/>
<enum name='kCGPathElementMoveToPoint' value='0'/>
<enum name='kCGPathFill' value='0'/>
<enum name='kCGPathFillStroke' value='3'/>
<enum name='kCGPathStroke' value='2'/>
<enum name='kCGPatternTilingConstantSpacing' value='2'/>
<enum name='kCGPatternTilingConstantSpacingMinimalDistortion' value='1'/>
<enum name='kCGPatternTilingNoDistortion' value='0'/>
<enum name='kCGPopUpMenuWindowLevel' value='101'/>
<enum name='kCGPopUpMenuWindowLevelKey' value='11'/>
<enum name='kCGRenderingIntentAbsoluteColorimetric' value='1'/>
<enum name='kCGRenderingIntentDefault' value='0'/>
<enum name='kCGRenderingIntentPerceptual' value='3'/>
<enum name='kCGRenderingIntentRelativeColorimetric' value='2'/>
<enum name='kCGRenderingIntentSaturation' value='4'/>
<enum name='kCGScreenSaverWindowLevel' value='1000'/>
<enum name='kCGScreenSaverWindowLevelKey' value='13'/>
<enum name='kCGScreenUpdateOperationMove' value='1'/>
<enum name='kCGScreenUpdateOperationReducedDirtyRectangleCount' value='-2147483648'/>
<enum name='kCGScreenUpdateOperationRefresh' value='0'/>
<enum name='kCGScrollEventUnitLine' value='1'/>
<enum name='kCGScrollEventUnitPixel' value='0'/>
<enum name='kCGScrollWheelEventDeltaAxis1' value='11'/>
<enum name='kCGScrollWheelEventDeltaAxis2' value='12'/>
<enum name='kCGScrollWheelEventDeltaAxis3' value='13'/>
<enum name='kCGScrollWheelEventFixedPtDeltaAxis1' value='93'/>
<enum name='kCGScrollWheelEventFixedPtDeltaAxis2' value='94'/>
<enum name='kCGScrollWheelEventFixedPtDeltaAxis3' value='95'/>
<enum name='kCGScrollWheelEventInstantMouser' value='14'/>
<enum name='kCGScrollWheelEventIsContinuous' value='88'/>
<enum name='kCGScrollWheelEventPointDeltaAxis1' value='96'/>
<enum name='kCGScrollWheelEventPointDeltaAxis2' value='97'/>
<enum name='kCGScrollWheelEventPointDeltaAxis3' value='98'/>
<enum name='kCGScrollWheelEventScrollPhase' value='99'/>
<enum name='kCGSessionEventTap' value='1'/>
<enum name='kCGStatusWindowLevel' value='25'/>
<enum name='kCGStatusWindowLevelKey' value='9'/>
<enum name='kCGTabletEventDeviceID' value='24'/>
<enum name='kCGTabletEventPointButtons' value='18'/>
<enum name='kCGTabletEventPointPressure' value='19'/>
<enum name='kCGTabletEventPointX' value='15'/>
<enum name='kCGTabletEventPointY' value='16'/>
<enum name='kCGTabletEventPointZ' value='17'/>
<enum name='kCGTabletEventRotation' value='22'/>
<enum name='kCGTabletEventTangentialPressure' value='23'/>
<enum name='kCGTabletEventTiltX' value='20'/>
<enum name='kCGTabletEventTiltY' value='21'/>
<enum name='kCGTabletEventVendor1' value='25'/>
<enum name='kCGTabletEventVendor2' value='26'/>
<enum name='kCGTabletEventVendor3' value='27'/>
<enum name='kCGTabletProximityEventCapabilityMask' value='36'/>
<enum name='kCGTabletProximityEventDeviceID' value='31'/>
<enum name='kCGTabletProximityEventEnterProximity' value='38'/>
<enum name='kCGTabletProximityEventPointerID' value='30'/>
<enum name='kCGTabletProximityEventPointerType' value='37'/>
<enum name='kCGTabletProximityEventSystemTabletID' value='32'/>
<enum name='kCGTabletProximityEventTabletID' value='29'/>
<enum name='kCGTabletProximityEventVendorID' value='28'/>
<enum name='kCGTabletProximityEventVendorPointerSerialNumber' value='34'/>
<enum name='kCGTabletProximityEventVendorPointerType' value='33'/>
<enum name='kCGTabletProximityEventVendorUniqueID' value='35'/>
<enum name='kCGTailAppendEventTap' value='1'/>
<enum name='kCGTextClip' value='7'/>
<enum name='kCGTextFill' value='0'/>
<enum name='kCGTextFillClip' value='4'/>
<enum name='kCGTextFillStroke' value='2'/>
<enum name='kCGTextFillStrokeClip' value='6'/>
<enum name='kCGTextInvisible' value='3'/>
<enum name='kCGTextStroke' value='1'/>
<enum name='kCGTextStrokeClip' value='5'/>
<enum name='kCGTornOffMenuWindowLevel' value='3'/>
<enum name='kCGTornOffMenuWindowLevelKey' value='6'/>
<enum name='kCGUtilityWindowLevel' value='19'/>
<enum name='kCGUtilityWindowLevelKey' value='17'/>
<enum name='kCGWindowBackingCFNumberType' value='3'/>
<enum name='kCGWindowIDCFNumberType' value='3'/>
<enum name='kCGWindowImageBestResolution' value='8'/>
<enum name='kCGWindowImageBoundsIgnoreFraming' value='1'/>
<enum name='kCGWindowImageDefault' value='0'/>
<enum name='kCGWindowImageNominalResolution' value='16'/>
<enum name='kCGWindowImageOnlyShadows' value='4'/>
<enum name='kCGWindowImageShouldBeOpaque' value='2'/>
<enum name='kCGWindowListExcludeDesktopElements' value='16'/>
<enum name='kCGWindowListOptionAll' value='0'/>
<enum name='kCGWindowListOptionIncludingWindow' value='8'/>
<enum name='kCGWindowListOptionOnScreenAboveWindow' value='2'/>
<enum name='kCGWindowListOptionOnScreenBelowWindow' value='4'/>
<enum name='kCGWindowListOptionOnScreenOnly' value='1'/>
<enum name='kCGWindowSharingCFNumberType' value='3'/>
<enum name='kCGWindowSharingNone' value='0'/>
<enum name='kCGWindowSharingReadOnly' value='1'/>
<enum name='kCGWindowSharingReadWrite' value='2'/>
<function name='CGAcquireDisplayFadeReservation'>
<arg name='seconds' declared_type='CGDisplayReservationInterval' type='f'/>
<arg name='token' declared_type='CGDisplayFadeReservationToken*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGAffineTransformConcat'>
<arg name='t1' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<arg name='t2' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformEqualToTransform'>
<arg name='t1' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<arg name='t2' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGAffineTransformInvert'>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformIsIdentity'>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGAffineTransformMake'>
<arg name='a' declared_type='CGFloat' type64='d' type='f'/>
<arg name='b' declared_type='CGFloat' type64='d' type='f'/>
<arg name='c' declared_type='CGFloat' type64='d' type='f'/>
<arg name='d' declared_type='CGFloat' type64='d' type='f'/>
<arg name='tx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='ty' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformMakeRotation'>
<arg name='angle' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformMakeScale'>
<arg name='sx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='sy' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformMakeTranslation'>
<arg name='tx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='ty' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformRotate'>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<arg name='angle' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformScale'>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<arg name='sx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='sy' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAffineTransformTranslate'>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<arg name='tx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='ty' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGAssociateMouseAndMouseCursorPosition'>
<arg name='connected' declared_type='boolean_t' type64='I' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGBeginDisplayConfiguration'>
<arg name='config' declared_type='CGDisplayConfigRef*' type='^^{_CGDisplayConfigRef}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGBitmapContextCreate'>
<arg name='data' declared_type='void*' type='^v'/>
<arg name='width' declared_type='size_t' type64='Q' type='L'/>
<arg name='height' declared_type='size_t' type64='Q' type='L'/>
<arg name='bitsPerComponent' declared_type='size_t' type64='Q' type='L'/>
<arg name='bytesPerRow' declared_type='size_t' type64='Q' type='L'/>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='bitmapInfo' declared_type='CGBitmapInfo' type='I'/>
<retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
</function>
<function name='CGBitmapContextCreateImage'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGBitmapContextCreateWithData'>
<arg name='data' declared_type='void*' type='^v'/>
<arg name='width' declared_type='size_t' type64='Q' type='L'/>
<arg name='height' declared_type='size_t' type64='Q' type='L'/>
<arg name='bitsPerComponent' declared_type='size_t' type64='Q' type='L'/>
<arg name='bytesPerRow' declared_type='size_t' type64='Q' type='L'/>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='bitmapInfo' declared_type='CGBitmapInfo' type='I'/>
<arg name='releaseCallback' function_pointer='true' declared_type='CGBitmapContextReleaseDataCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='releaseInfo' declared_type='void*' type='^v'/>
<retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
</function>
<function name='CGBitmapContextGetAlphaInfo'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGImageAlphaInfo' type='i'/>
</function>
<function name='CGBitmapContextGetBitmapInfo'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGBitmapInfo' type='I'/>
</function>
<function name='CGBitmapContextGetBitsPerComponent'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGBitmapContextGetBitsPerPixel'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGBitmapContextGetBytesPerRow'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGBitmapContextGetColorSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</function>
<function name='CGBitmapContextGetData'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='CGBitmapContextGetHeight'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGBitmapContextGetWidth'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGCancelDisplayConfiguration'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGCaptureAllDisplays'>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGCaptureAllDisplaysWithOptions'>
<arg name='options' declared_type='CGCaptureOptions' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGColorCreate'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
</function>
<function name='CGColorCreateCopy'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
</function>
<function name='CGColorCreateCopyWithAlpha'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
</function>
<function name='CGColorCreateGenericCMYK'>
<arg name='cyan' declared_type='CGFloat' type64='d' type='f'/>
<arg name='magenta' declared_type='CGFloat' type64='d' type='f'/>
<arg name='yellow' declared_type='CGFloat' type64='d' type='f'/>
<arg name='black' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
</function>
<function name='CGColorCreateGenericGray'>
<arg name='gray' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
</function>
<function name='CGColorCreateGenericRGB'>
<arg name='red' declared_type='CGFloat' type64='d' type='f'/>
<arg name='green' declared_type='CGFloat' type64='d' type='f'/>
<arg name='blue' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
</function>
<function name='CGColorCreateWithPattern'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
</function>
<function name='CGColorEqualToColor'>
<arg name='color1' declared_type='CGColorRef' type='^{CGColor=}'/>
<arg name='color2' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGColorGetAlpha'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGColorGetColorSpace'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorGetComponents'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
</function>
<function name='CGColorGetConstantColor'>
<arg name='colorName' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CGColorRef' type='^{CGColor=}'/>
</function>
<function name='CGColorGetNumberOfComponents'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGColorGetPattern'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='CGPatternRef' type='^{CGPattern=}'/>
</function>
<function name='CGColorGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGColorRelease'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGColorRetain'>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='CGColorRef' type='^{CGColor=}'/>
</function>
<function name='CGColorSpaceCopyICCProfile'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CGColorSpaceCopyName'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CGColorSpaceCreateCalibratedGray'>
<arg name='whitePoint' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='blackPoint' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='gamma' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateCalibratedRGB'>
<arg name='whitePoint' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='blackPoint' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='gamma' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='matrix' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateDeviceCMYK'>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateDeviceGray'>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateDeviceRGB'>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateICCBased'>
<arg name='nComponents' declared_type='size_t' type64='Q' type='L'/>
<arg name='range' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='profile' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<arg name='alternate' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateIndexed'>
<arg name='baseSpace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='lastIndex' declared_type='size_t' type64='Q' type='L'/>
<arg name='colorTable' declared_type='unsigned char*' const='true' type='*'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateLab'>
<arg name='whitePoint' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='blackPoint' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='range' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreatePattern'>
<arg name='baseSpace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateWithICCProfile'>
<arg name='data' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateWithName'>
<arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceCreateWithPlatformColorSpace'>
<arg name='ref' declared_type='void*' const='true' type='^v'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceGetBaseColorSpace'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</function>
<function name='CGColorSpaceGetColorTable'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='table' declared_type='uint8_t*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGColorSpaceGetColorTableCount'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGColorSpaceGetModel'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CGColorSpaceModel' type='i'/>
</function>
<function name='CGColorSpaceGetNumberOfComponents'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGColorSpaceGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGColorSpaceRelease'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGColorSpaceRetain'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</function>
<function name='CGCompleteDisplayConfiguration'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<arg name='option' declared_type='CGConfigureOption' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGConfigureDisplayFadeEffect'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<arg name='fadeOutSeconds' declared_type='CGDisplayFadeInterval' type='f'/>
<arg name='fadeInSeconds' declared_type='CGDisplayFadeInterval' type='f'/>
<arg name='fadeRed' declared_type='float' type='f'/>
<arg name='fadeGreen' declared_type='float' type='f'/>
<arg name='fadeBlue' declared_type='float' type='f'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGConfigureDisplayMirrorOfDisplay'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='master' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGConfigureDisplayMode'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='mode' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGConfigureDisplayOrigin'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='x' declared_type='int32_t' type='i'/>
<arg name='y' declared_type='int32_t' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGConfigureDisplayStereoOperation'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='stereo' declared_type='boolean_t' type64='I' type='i'/>
<arg name='forceBlueLine' declared_type='boolean_t' type64='I' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGConfigureDisplayWithDisplayMode'>
<arg name='config' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<arg name='options' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGContextAddArc'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f'/>
<arg name='startAngle' declared_type='CGFloat' type64='d' type='f'/>
<arg name='endAngle' declared_type='CGFloat' type64='d' type='f'/>
<arg name='clockwise' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddArcToPoint'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='x1' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y1' declared_type='CGFloat' type64='d' type='f'/>
<arg name='x2' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y2' declared_type='CGFloat' type64='d' type='f'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddCurveToPoint'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='cp1x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cp1y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cp2x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cp2y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddEllipseInRect'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddLineToPoint'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddLines'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='points' declared_type='CGPoint*' type64='^{CGPoint=dd}' const='true' type='^{CGPoint=ff}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddPath'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddQuadCurveToPoint'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='cpx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cpy' declared_type='CGFloat' type64='d' type='f'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddRect'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextAddRects'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rects' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextBeginPage'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='mediaBox' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextBeginPath'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextBeginTransparencyLayer'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextBeginTransparencyLayerWithRect'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextClearRect'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextClip'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextClipToMask'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='mask' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextClipToRect'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextClipToRects'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rects' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextClosePath'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextConcatCTM'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='transform' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextConvertPointToDeviceSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGContextConvertPointToUserSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGContextConvertRectToDeviceSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGContextConvertRectToUserSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGContextConvertSizeToDeviceSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<retval declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
</function>
<function name='CGContextConvertSizeToUserSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<retval declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
</function>
<function name='CGContextCopyPath'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGContextDrawImage'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawLayerAtPoint'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawLayerInRect'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawLinearGradient'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='gradient' declared_type='CGGradientRef' type='^{CGGradient=}'/>
<arg name='startPoint' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='endPoint' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='options' declared_type='CGGradientDrawingOptions' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawPDFDocument'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='page' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawPDFPage'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawPath'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='mode' declared_type='CGPathDrawingMode' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawRadialGradient'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='gradient' declared_type='CGGradientRef' type='^{CGGradient=}'/>
<arg name='startCenter' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='startRadius' declared_type='CGFloat' type64='d' type='f'/>
<arg name='endCenter' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='endRadius' declared_type='CGFloat' type64='d' type='f'/>
<arg name='options' declared_type='CGGradientDrawingOptions' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawShading'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='shading' declared_type='CGShadingRef' type='^{CGShading=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextDrawTiledImage'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextEOClip'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextEOFillPath'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextEndPage'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextEndTransparencyLayer'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextFillEllipseInRect'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextFillPath'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextFillRect'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextFillRects'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rects' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextFlush'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextGetCTM'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGContextGetClipBoundingBox'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGContextGetInterpolationQuality'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGInterpolationQuality' type='i'/>
</function>
<function name='CGContextGetPathBoundingBox'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGContextGetPathCurrentPoint'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGContextGetTextMatrix'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGContextGetTextPosition'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGContextGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGContextGetUserSpaceToDeviceSpaceTransform'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGContextIsPathEmpty'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGContextMoveToPoint'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextPathContainsPoint'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='mode' declared_type='CGPathDrawingMode' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGContextRelease'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextReplacePathWithStrokedPath'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextRestoreGState'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextRetain'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='CGContextRef' type='^{CGContext=}'/>
</function>
<function name='CGContextRotateCTM'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='angle' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSaveGState'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextScaleCTM'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='sx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='sy' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSelectFont'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='name' declared_type='char*' const='true' type='*'/>
<arg name='size' declared_type='CGFloat' type64='d' type='f'/>
<arg name='textEncoding' declared_type='CGTextEncoding' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetAllowsAntialiasing'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='allowsAntialiasing' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetAllowsFontSmoothing'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='allowsFontSmoothing' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetAllowsFontSubpixelPositioning'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='allowsFontSubpixelPositioning' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetAllowsFontSubpixelQuantization'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='allowsFontSubpixelQuantization' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetAlpha'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetBlendMode'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='mode' declared_type='CGBlendMode' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetCMYKFillColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='cyan' declared_type='CGFloat' type64='d' type='f'/>
<arg name='magenta' declared_type='CGFloat' type64='d' type='f'/>
<arg name='yellow' declared_type='CGFloat' type64='d' type='f'/>
<arg name='black' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetCMYKStrokeColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='cyan' declared_type='CGFloat' type64='d' type='f'/>
<arg name='magenta' declared_type='CGFloat' type64='d' type='f'/>
<arg name='yellow' declared_type='CGFloat' type64='d' type='f'/>
<arg name='black' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetCharacterSpacing'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='spacing' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetFillColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetFillColorSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetFillColorWithColor'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetFillPattern'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetFlatness'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='flatness' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetFont'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetFontSize'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='size' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetGrayFillColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='gray' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetGrayStrokeColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='gray' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetInterpolationQuality'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='quality' declared_type='CGInterpolationQuality' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetLineCap'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='cap' declared_type='CGLineCap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetLineDash'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='phase' declared_type='CGFloat' type64='d' type='f'/>
<arg name='lengths' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetLineJoin'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='join' declared_type='CGLineJoin' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetLineWidth'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='width' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetMiterLimit'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='limit' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetPatternPhase'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='phase' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetRGBFillColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='red' declared_type='CGFloat' type64='d' type='f'/>
<arg name='green' declared_type='CGFloat' type64='d' type='f'/>
<arg name='blue' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetRGBStrokeColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='red' declared_type='CGFloat' type64='d' type='f'/>
<arg name='green' declared_type='CGFloat' type64='d' type='f'/>
<arg name='blue' declared_type='CGFloat' type64='d' type='f'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetRenderingIntent'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetShadow'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='offset' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='blur' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetShadowWithColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='offset' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='blur' declared_type='CGFloat' type64='d' type='f'/>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetShouldAntialias'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='shouldAntialias' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetShouldSmoothFonts'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='shouldSmoothFonts' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetShouldSubpixelPositionFonts'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='shouldSubpixelPositionFonts' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetShouldSubpixelQuantizeFonts'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='shouldSubpixelQuantizeFonts' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetStrokeColor'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetStrokeColorSpace'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetStrokeColorWithColor'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetStrokePattern'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetTextDrawingMode'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='mode' declared_type='CGTextDrawingMode' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetTextMatrix'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSetTextPosition'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextShowGlyphs'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='g' declared_type='CGGlyph*' const='true' type='^S'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextShowGlyphsAtPoint'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='glyphs' declared_type='CGGlyph*' const='true' type='^S'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextShowGlyphsAtPositions'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='glyphs' declared_type='CGGlyph*' const='true' type='^S'/>
<arg name='positions' declared_type='CGPoint*' type64='^{CGPoint=dd}' const='true' type='^{CGPoint=ff}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextShowGlyphsWithAdvances'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='glyphs' declared_type='CGGlyph*' const='true' type='^S'/>
<arg name='advances' declared_type='CGSize*' type64='^{CGSize=dd}' const='true' type='^{CGSize=ff}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextShowText'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='string' declared_type='char*' const='true' type='*'/>
<arg name='length' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextShowTextAtPoint'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='string' declared_type='char*' const='true' type='*'/>
<arg name='length' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextStrokeEllipseInRect'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextStrokeLineSegments'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='points' declared_type='CGPoint*' type64='^{CGPoint=dd}' const='true' type='^{CGPoint=ff}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextStrokePath'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextStrokeRect'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextStrokeRectWithWidth'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='width' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextSynchronize'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGContextTranslateCTM'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='tx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='ty' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGCursorIsDrawnInFramebuffer'>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGCursorIsVisible'>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDataConsumerCreate'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='callbacks' declared_type='CGDataConsumerCallbacks*' const='true' type='^{CGDataConsumerCallbacks=^?^?}'/>
<retval declared_type='CGDataConsumerRef' already_retained='true' type='^{CGDataConsumer=}'/>
</function>
<function name='CGDataConsumerCreateWithCFData'>
<arg name='data' declared_type='CFMutableDataRef' type='^{__CFData=}'/>
<retval declared_type='CGDataConsumerRef' already_retained='true' type='^{CGDataConsumer=}'/>
</function>
<function name='CGDataConsumerCreateWithURL'>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<retval declared_type='CGDataConsumerRef' already_retained='true' type='^{CGDataConsumer=}'/>
</function>
<function name='CGDataConsumerGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGDataConsumerRelease'>
<arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGDataConsumerRetain'>
<arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
<retval declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
</function>
<function name='CGDataProviderCopyData'>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CGDataProviderCreate'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='callbacks' declared_type='CGDataProviderCallbacks*' const='true' type='^{CGDataProviderCallbacks=^?^?^?^?}'/>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderCreateDirect'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='size' declared_type='off_t' type='q'/>
<arg name='callbacks' declared_type='CGDataProviderDirectCallbacks*' const='true' type='^{CGDataProviderDirectCallbacks=I^?^?^?^?}'/>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderCreateDirectAccess'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='size' declared_type='size_t' type64='Q' type='L'/>
<arg name='callbacks' declared_type='CGDataProviderDirectAccessCallbacks*' const='true' type='^{CGDataProviderDirectAccessCallbacks=^?^?^?^?}'/>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderCreateSequential'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='callbacks' declared_type='CGDataProviderSequentialCallbacks*' const='true' type='^{CGDataProviderSequentialCallbacks=I^?^?^?^?}'/>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderCreateWithCFData'>
<arg name='data' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderCreateWithData'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='data' declared_type='void*' const='true' type='^v'/>
<arg name='size' declared_type='size_t' type64='Q' type='L'/>
<arg name='releaseData' function_pointer='true' declared_type='CGDataProviderReleaseDataCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' const='true' type='^v'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderCreateWithFilename'>
<arg name='filename' declared_type='char*' const='true' type='*'/>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderCreateWithURL'>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
</function>
<function name='CGDataProviderGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGDataProviderRelease'>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGDataProviderRetain'>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<retval declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
</function>
<function name='CGDisplayAvailableModes'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CGDisplayBeamPosition'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGDisplayBestModeForParameters'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='bitsPerPixel' declared_type='size_t' type64='Q' type='L'/>
<arg name='width' declared_type='size_t' type64='Q' type='L'/>
<arg name='height' declared_type='size_t' type64='Q' type='L'/>
<arg name='exactMatch' declared_type='boolean_t*' type64='^I' type='^i'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CGDisplayBestModeForParametersAndRefreshRate'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='bitsPerPixel' declared_type='size_t' type64='Q' type='L'/>
<arg name='width' declared_type='size_t' type64='Q' type='L'/>
<arg name='height' declared_type='size_t' type64='Q' type='L'/>
<arg name='refreshRate' declared_type='CGRefreshRate' type='d'/>
<arg name='exactMatch' declared_type='boolean_t*' type64='^I' type='^i'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CGDisplayBestModeForParametersAndRefreshRateWithProperty'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='bitsPerPixel' declared_type='size_t' type64='Q' type='L'/>
<arg name='width' declared_type='size_t' type64='Q' type='L'/>
<arg name='height' declared_type='size_t' type64='Q' type='L'/>
<arg name='refreshRate' declared_type='CGRefreshRate' type='d'/>
<arg name='property' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='exactMatch' declared_type='boolean_t*' type64='^I' type='^i'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CGDisplayBounds'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGDisplayCanSetPalette'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayCapture'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayCaptureWithOptions'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='options' declared_type='CGCaptureOptions' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayCopyAllDisplayModes'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='options' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CGDisplayCopyColorSpace'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
</function>
<function name='CGDisplayCopyDisplayMode'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGDisplayModeRef' already_retained='true' type='^{CGDisplayMode=}'/>
</function>
<function name='CGDisplayCreateImage'>
<arg name='displayID' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGDisplayCreateImageForRect'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGDisplayCurrentMode'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CGDisplayFade'>
<arg name='token' declared_type='CGDisplayFadeReservationToken' type='I'/>
<arg name='duration' declared_type='CGDisplayFadeInterval' type='f'/>
<arg name='startBlend' declared_type='CGDisplayBlendFraction' type='f'/>
<arg name='endBlend' declared_type='CGDisplayBlendFraction' type='f'/>
<arg name='redBlend' declared_type='float' type='f'/>
<arg name='greenBlend' declared_type='float' type='f'/>
<arg name='blueBlend' declared_type='float' type='f'/>
<arg name='synchronous' declared_type='boolean_t' type64='I' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayFadeOperationInProgress'>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayGammaTableCapacity'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGDisplayGetDrawingContext'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGContextRef' type='^{CGContext=}'/>
</function>
<function name='CGDisplayHideCursor'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayIDToOpenGLDisplayMask'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGOpenGLDisplayMask' type='I'/>
</function>
<function name='CGDisplayIOServicePort'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='io_service_t' type='I'/>
</function>
<function name='CGDisplayIsActive'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsAlwaysInMirrorSet'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsAsleep'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsBuiltin'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsCaptured'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsInHWMirrorSet'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsInMirrorSet'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsMain'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsOnline'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayIsStereo'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayMirrorsDisplay'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGDirectDisplayID' type='I'/>
</function>
<function name='CGDisplayModeCopyPixelEncoding'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CGDisplayModeGetHeight'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGDisplayModeGetIODisplayModeID'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='int32_t' type='i'/>
</function>
<function name='CGDisplayModeGetIOFlags'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGDisplayModeGetRefreshRate'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CGDisplayModeGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGDisplayModeGetWidth'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGDisplayModeIsUsableForDesktopGUI'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGDisplayModeRelease'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGDisplayModeRetain'>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<retval declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
</function>
<function name='CGDisplayModelNumber'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGDisplayMoveCursorToPoint'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayPixelsHigh'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGDisplayPixelsWide'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGDisplayPrimaryDisplay'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGDirectDisplayID' type='I'/>
</function>
<function name='CGDisplayRegisterReconfigurationCallback'>
<arg name='callback' function_pointer='true' declared_type='CGDisplayReconfigurationCallBack' type='^?'>
<arg declared_type='CGDirectDisplayID' type='I'/>
<arg declared_type='CGDisplayChangeSummaryFlags' type='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayRelease'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayRemoveReconfigurationCallback'>
<arg name='callback' function_pointer='true' declared_type='CGDisplayReconfigurationCallBack' type='^?'>
<arg declared_type='CGDirectDisplayID' type='I'/>
<arg declared_type='CGDisplayChangeSummaryFlags' type='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayRestoreColorSyncSettings'>
<retval declared_type='void' type='v'/>
</function>
<function name='CGDisplayRotation'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CGDisplayScreenSize'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
</function>
<function name='CGDisplaySerialNumber'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGDisplaySetDisplayMode'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='mode' declared_type='CGDisplayModeRef' type='^{CGDisplayMode=}'/>
<arg name='options' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplaySetPalette'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplaySetStereoOperation'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='stereo' declared_type='boolean_t' type64='I' type='i'/>
<arg name='forceBlueLine' declared_type='boolean_t' type64='I' type='i'/>
<arg name='option' declared_type='CGConfigureOption' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayShowCursor'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplaySwitchToMode'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='mode' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGDisplayUnitNumber'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGDisplayUsesOpenGLAcceleration'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='boolean_t' type64='I' type='i'/>
</function>
<function name='CGDisplayVendorNumber'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGDisplayWaitForBeamPositionOutsideLines'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='upperScanLine' declared_type='uint32_t' type='I'/>
<arg name='lowerScanLine' declared_type='uint32_t' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGEnableEventStateCombining'>
<arg name='combineState' declared_type='boolean_t' type64='I' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGEventCreate'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
</function>
<function name='CGEventCreateCopy'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
</function>
<function name='CGEventCreateData'>
<arg name='allocator' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CGEventCreateFromData'>
<arg name='allocator' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='data' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
</function>
<function name='CGEventCreateKeyboardEvent'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='virtualKey' declared_type='CGKeyCode' type='S'/>
<arg name='keyDown' declared_type='_Bool' type='B'/>
<retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
</function>
<function name='CGEventCreateMouseEvent'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='mouseType' declared_type='CGEventType' type='I'/>
<arg name='mouseCursorPosition' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='mouseButton' declared_type='CGMouseButton' type='I'/>
<retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
</function>
<function name='CGEventCreateScrollWheelEvent' variadic='true'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='units' declared_type='CGScrollEventUnit' type='I'/>
<arg name='wheelCount' declared_type='uint32_t' type='I'/>
<arg name='wheel1' declared_type='int32_t' type='i'/>
<retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
</function>
<function name='CGEventCreateSourceFromEvent'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CGEventSourceRef' already_retained='true' type='^{__CGEventSource=}'/>
</function>
<function name='CGEventGetDoubleValueField'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='field' declared_type='CGEventField' type='I'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CGEventGetFlags'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CGEventFlags' type='Q'/>
</function>
<function name='CGEventGetIntegerValueField'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='field' declared_type='CGEventField' type='I'/>
<retval declared_type='int64_t' type='q'/>
</function>
<function name='CGEventGetLocation'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGEventGetTimestamp'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CGEventTimestamp' type='Q'/>
</function>
<function name='CGEventGetType'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CGEventType' type='I'/>
</function>
<function name='CGEventGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGEventGetUnflippedLocation'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGEventKeyboardGetUnicodeString'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='maxStringLength' declared_type='UniCharCount' type64='Q' type='L'/>
<arg name='actualStringLength' declared_type='UniCharCount*' type64='^Q' type='^I'/>
<arg name='unicodeString' declared_type='UniChar*' type='^S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventKeyboardSetUnicodeString'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='stringLength' declared_type='UniCharCount' type64='Q' type='L'/>
<arg name='unicodeString' declared_type='UniChar*' const='true' type='^S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventPost'>
<arg name='tap' declared_type='CGEventTapLocation' type='I'/>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventPostToPSN'>
<arg name='processSerialNumber' declared_type='void*' type='^v'/>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSetDoubleValueField'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='field' declared_type='CGEventField' type='I'/>
<arg name='value' declared_type='double' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSetFlags'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='flags' declared_type='CGEventFlags' type='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSetIntegerValueField'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='field' declared_type='CGEventField' type='I'/>
<arg name='value' declared_type='int64_t' type='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSetLocation'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='location' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSetSource'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSetTimestamp'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='timestamp' declared_type='CGEventTimestamp' type='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSetType'>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg name='type' declared_type='CGEventType' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSourceButtonState'>
<arg name='stateID' declared_type='CGEventSourceStateID' type='I'/>
<arg name='button' declared_type='CGMouseButton' type='I'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGEventSourceCounterForEventType'>
<arg name='stateID' declared_type='CGEventSourceStateID' type='I'/>
<arg name='eventType' declared_type='CGEventType' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGEventSourceCreate'>
<arg name='stateID' declared_type='CGEventSourceStateID' type='I'/>
<retval declared_type='CGEventSourceRef' already_retained='true' type='^{__CGEventSource=}'/>
</function>
<function name='CGEventSourceFlagsState'>
<arg name='stateID' declared_type='CGEventSourceStateID' type='I'/>
<retval declared_type='CGEventFlags' type='Q'/>
</function>
<function name='CGEventSourceGetKeyboardType'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<retval declared_type='CGEventSourceKeyboardType' type='I'/>
</function>
<function name='CGEventSourceGetLocalEventsFilterDuringSuppressionState'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='state' declared_type='CGEventSuppressionState' type='I'/>
<retval declared_type='CGEventFilterMask' type='I'/>
</function>
<function name='CGEventSourceGetLocalEventsSuppressionInterval'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<retval declared_type='CFTimeInterval' type='d'/>
</function>
<function name='CGEventSourceGetPixelsPerLine'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CGEventSourceGetSourceStateID'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<retval declared_type='CGEventSourceStateID' type='I'/>
</function>
<function name='CGEventSourceGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGEventSourceGetUserData'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<retval declared_type='int64_t' type='q'/>
</function>
<function name='CGEventSourceKeyState'>
<arg name='stateID' declared_type='CGEventSourceStateID' type='I'/>
<arg name='key' declared_type='CGKeyCode' type='S'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGEventSourceSecondsSinceLastEventType'>
<arg name='stateID' declared_type='CGEventSourceStateID' type='I'/>
<arg name='eventType' declared_type='CGEventType' type='I'/>
<retval declared_type='CFTimeInterval' type='d'/>
</function>
<function name='CGEventSourceSetKeyboardType'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='keyboardType' declared_type='CGEventSourceKeyboardType' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSourceSetLocalEventsFilterDuringSuppressionState'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='filter' declared_type='CGEventFilterMask' type='I'/>
<arg name='state' declared_type='CGEventSuppressionState' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSourceSetLocalEventsSuppressionInterval'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='seconds' declared_type='CFTimeInterval' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSourceSetPixelsPerLine'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='pixelsPerLine' declared_type='double' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventSourceSetUserData'>
<arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
<arg name='userData' declared_type='int64_t' type='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventTapCreate'>
<arg name='tap' declared_type='CGEventTapLocation' type='I'/>
<arg name='place' declared_type='CGEventTapPlacement' type='I'/>
<arg name='options' declared_type='CGEventTapOptions' type='I'/>
<arg name='eventsOfInterest' declared_type='CGEventMask' type='Q'/>
<arg name='callback' function_pointer='true' declared_type='CGEventTapCallBack' type='^?'>
<arg declared_type='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
<arg declared_type='CGEventType' type='I'/>
<arg declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='CGEventRef' type='^{__CGEvent=}'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='CFMachPortRef' already_retained='true' type='^{__CFMachPort=}'/>
</function>
<function name='CGEventTapCreateForPSN'>
<arg name='processSerialNumber' declared_type='void*' type='^v'/>
<arg name='place' declared_type='CGEventTapPlacement' type='I'/>
<arg name='options' declared_type='CGEventTapOptions' type='I'/>
<arg name='eventsOfInterest' declared_type='CGEventMask' type='Q'/>
<arg name='callback' function_pointer='true' declared_type='CGEventTapCallBack' type='^?'>
<arg declared_type='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
<arg declared_type='CGEventType' type='I'/>
<arg declared_type='CGEventRef' type='^{__CGEvent=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='CGEventRef' type='^{__CGEvent=}'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='CFMachPortRef' already_retained='true' type='^{__CFMachPort=}'/>
</function>
<function name='CGEventTapEnable'>
<arg name='tap' declared_type='CFMachPortRef' type='^{__CFMachPort=}'/>
<arg name='enable' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGEventTapIsEnabled'>
<arg name='tap' declared_type='CFMachPortRef' type='^{__CFMachPort=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGEventTapPostEvent'>
<arg name='proxy' declared_type='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
<arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGFontCanCreatePostScriptSubset'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='format' declared_type='CGFontPostScriptFormat' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGFontCopyFullName'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CGFontCopyGlyphNameForGlyph'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='glyph' declared_type='CGGlyph' type='S'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CGFontCopyPostScriptName'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CGFontCopyTableForTag'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='tag' declared_type='uint32_t' type='I'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CGFontCopyTableTags'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CGFontCopyVariationAxes'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CGFontCopyVariations'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
</function>
<function name='CGFontCreateCopyWithVariations'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='variations' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGFontRef' already_retained='true' type='^{CGFont=}'/>
</function>
<function name='CGFontCreatePostScriptEncoding'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='encoding' declared_type='CGGlyph*' const='true' type='^S'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CGFontCreatePostScriptSubset'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='subsetName' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='format' declared_type='CGFontPostScriptFormat' type='i'/>
<arg name='glyphs' declared_type='CGGlyph*' const='true' type='^S'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<arg name='encoding' declared_type='CGGlyph*' const='true' type='^S'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CGFontCreateWithDataProvider'>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<retval declared_type='CGFontRef' already_retained='true' type='^{CGFont=}'/>
</function>
<function name='CGFontCreateWithFontName'>
<arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CGFontRef' already_retained='true' type='^{CGFont=}'/>
</function>
<function name='CGFontCreateWithPlatformFont'>
<arg name='platformFontReference' declared_type='void*' type='^v'/>
<retval declared_type='CGFontRef' already_retained='true' type='^{CGFont=}'/>
</function>
<function name='CGFontGetAscent'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGFontGetCapHeight'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGFontGetDescent'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGFontGetFontBBox'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGFontGetGlyphAdvances'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='glyphs' declared_type='CGGlyph*' const='true' type='^S'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<arg name='advances' declared_type='int*' type='^i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGFontGetGlyphBBoxes'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='glyphs' declared_type='CGGlyph*' const='true' type='^S'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<arg name='bboxes' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGFontGetGlyphWithGlyphName'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CGGlyph' type='S'/>
</function>
<function name='CGFontGetItalicAngle'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGFontGetLeading'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGFontGetNumberOfGlyphs'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGFontGetStemV'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGFontGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGFontGetUnitsPerEm'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGFontGetXHeight'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGFontRelease'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGFontRetain'>
<arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
<retval declared_type='CGFontRef' type='^{CGFont=}'/>
</function>
<function name='CGFunctionCreate'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='domainDimension' declared_type='size_t' type64='Q' type='L'/>
<arg name='domain' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='rangeDimension' declared_type='size_t' type64='Q' type='L'/>
<arg name='range' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='callbacks' declared_type='CGFunctionCallbacks*' const='true' type='^{CGFunctionCallbacks=I^?^?}'/>
<retval declared_type='CGFunctionRef' already_retained='true' type='^{CGFunction=}'/>
</function>
<function name='CGFunctionGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGFunctionRelease'>
<arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGFunctionRetain'>
<arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
<retval declared_type='CGFunctionRef' type='^{CGFunction=}'/>
</function>
<function name='CGGLContextCreate'>
<arg name='glContext' declared_type='void*' type='^v'/>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
</function>
<function name='CGGLContextUpdateViewportSize'>
<arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGGetActiveDisplayList'>
<arg name='maxDisplays' declared_type='uint32_t' type='I'/>
<arg name='activeDisplays' declared_type='CGDirectDisplayID*' type='^I'/>
<arg name='displayCount' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGetDisplayTransferByFormula'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='redMin' declared_type='CGGammaValue*' type='^f'/>
<arg name='redMax' declared_type='CGGammaValue*' type='^f'/>
<arg name='redGamma' declared_type='CGGammaValue*' type='^f'/>
<arg name='greenMin' declared_type='CGGammaValue*' type='^f'/>
<arg name='greenMax' declared_type='CGGammaValue*' type='^f'/>
<arg name='greenGamma' declared_type='CGGammaValue*' type='^f'/>
<arg name='blueMin' declared_type='CGGammaValue*' type='^f'/>
<arg name='blueMax' declared_type='CGGammaValue*' type='^f'/>
<arg name='blueGamma' declared_type='CGGammaValue*' type='^f'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGetDisplayTransferByTable'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='capacity' declared_type='uint32_t' type='I'/>
<arg name='redTable' declared_type='CGGammaValue*' type='^f'/>
<arg name='greenTable' declared_type='CGGammaValue*' type='^f'/>
<arg name='blueTable' declared_type='CGGammaValue*' type='^f'/>
<arg name='sampleCount' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGetDisplaysWithOpenGLDisplayMask'>
<arg name='mask' declared_type='CGOpenGLDisplayMask' type='I'/>
<arg name='maxDisplays' declared_type='uint32_t' type='I'/>
<arg name='displays' declared_type='CGDirectDisplayID*' type='^I'/>
<arg name='matchingDisplayCount' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGetDisplaysWithPoint'>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='maxDisplays' declared_type='uint32_t' type='I'/>
<arg name='displays' declared_type='CGDirectDisplayID*' type='^I'/>
<arg name='matchingDisplayCount' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGetDisplaysWithRect'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='maxDisplays' declared_type='uint32_t' type='I'/>
<arg name='displays' declared_type='CGDirectDisplayID*' type='^I'/>
<arg name='matchingDisplayCount' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGetEventTapList'>
<arg name='maxNumberOfTaps' declared_type='uint32_t' type='I'/>
<arg name='tapList' declared_type='CGEventTapInformation*' type='^{__CGEventTapInformation=IIIQiiBfff}'/>
<arg name='eventTapCount' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGetLastMouseDelta'>
<arg name='deltaX' declared_type='int32_t*' type='^i'/>
<arg name='deltaY' declared_type='int32_t*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGGetOnlineDisplayList'>
<arg name='maxDisplays' declared_type='uint32_t' type='I'/>
<arg name='onlineDisplays' declared_type='CGDirectDisplayID*' type='^I'/>
<arg name='displayCount' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGGradientCreateWithColorComponents'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='locations' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='CGGradientRef' already_retained='true' type='^{CGGradient=}'/>
</function>
<function name='CGGradientCreateWithColors'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='colors' declared_type='CFArrayRef' type='^{__CFArray=}'/>
<arg name='locations' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='CGGradientRef' already_retained='true' type='^{CGGradient=}'/>
</function>
<function name='CGGradientGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGGradientRelease'>
<arg name='gradient' declared_type='CGGradientRef' type='^{CGGradient=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGGradientRetain'>
<arg name='gradient' declared_type='CGGradientRef' type='^{CGGradient=}'/>
<retval declared_type='CGGradientRef' type='^{CGGradient=}'/>
</function>
<function name='CGImageCreate'>
<arg name='width' declared_type='size_t' type64='Q' type='L'/>
<arg name='height' declared_type='size_t' type64='Q' type='L'/>
<arg name='bitsPerComponent' declared_type='size_t' type64='Q' type='L'/>
<arg name='bitsPerPixel' declared_type='size_t' type64='Q' type='L'/>
<arg name='bytesPerRow' declared_type='size_t' type64='Q' type='L'/>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='bitmapInfo' declared_type='CGBitmapInfo' type='I'/>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<arg name='decode' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
<arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageCreateCopy'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageCreateCopyWithColorSpace'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageCreateWithImageInRect'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageCreateWithJPEGDataProvider'>
<arg name='source' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<arg name='decode' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
<arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageCreateWithMask'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='mask' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageCreateWithMaskingColors'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageCreateWithPNGDataProvider'>
<arg name='source' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<arg name='decode' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
<arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageGetAlphaInfo'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGImageAlphaInfo' type='i'/>
</function>
<function name='CGImageGetBitmapInfo'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGBitmapInfo' type='I'/>
</function>
<function name='CGImageGetBitsPerComponent'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGImageGetBitsPerPixel'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGImageGetBytesPerRow'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGImageGetColorSpace'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</function>
<function name='CGImageGetDataProvider'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
</function>
<function name='CGImageGetDecode'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
</function>
<function name='CGImageGetHeight'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGImageGetRenderingIntent'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGColorRenderingIntent' type='i'/>
</function>
<function name='CGImageGetShouldInterpolate'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGImageGetWidth'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGImageIsMask'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageMaskCreate'>
<arg name='width' declared_type='size_t' type64='Q' type='L'/>
<arg name='height' declared_type='size_t' type64='Q' type='L'/>
<arg name='bitsPerComponent' declared_type='size_t' type64='Q' type='L'/>
<arg name='bitsPerPixel' declared_type='size_t' type64='Q' type='L'/>
<arg name='bytesPerRow' declared_type='size_t' type64='Q' type='L'/>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<arg name='decode' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGImageRelease'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageRetain'>
<arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
<retval declared_type='CGImageRef' type='^{CGImage=}'/>
</function>
<function name='CGInhibitLocalEvents'>
<arg name='inhibit' declared_type='boolean_t' type64='I' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGLayerCreateWithContext'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGLayerRef' already_retained='true' type='^{CGLayer=}'/>
</function>
<function name='CGLayerGetContext'>
<arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
<retval declared_type='CGContextRef' type='^{CGContext=}'/>
</function>
<function name='CGLayerGetSize'>
<arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
<retval declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
</function>
<function name='CGLayerGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGLayerRelease'>
<arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGLayerRetain'>
<arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
<retval declared_type='CGLayerRef' type='^{CGLayer=}'/>
</function>
<function name='CGMainDisplayID'>
<retval declared_type='CGDirectDisplayID' type='I'/>
</function>
<function name='CGOpenGLDisplayMaskToDisplayID'>
<arg name='mask' declared_type='CGOpenGLDisplayMask' type='I'/>
<retval declared_type='CGDirectDisplayID' type='I'/>
</function>
<function name='CGPDFArrayGetArray'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFArrayRef*' type='^^{CGPDFArray}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetBoolean'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFBoolean*' type='*'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetCount'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGPDFArrayGetDictionary'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFDictionaryRef*' type='^^{CGPDFDictionary}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetInteger'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFInteger*' type64='^q' type='^i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetName'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='char**' const='true' type='^*'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetNull'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetNumber'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFReal*' type64='^d' type='^f'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetObject'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFObjectRef*' type='^^(CGPDFObject)'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetStream'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFStreamRef*' type='^^{CGPDFStream}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFArrayGetString'>
<arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
<arg name='index' declared_type='size_t' type64='Q' type='L'/>
<arg name='value' declared_type='CGPDFStringRef*' type='^^{CGPDFString}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFContentStreamCreateWithPage'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='CGPDFContentStreamRef' already_retained='true' type='^{CGPDFContentStream=}'/>
</function>
<function name='CGPDFContentStreamCreateWithStream'>
<arg name='stream' declared_type='CGPDFStreamRef' type='^{CGPDFStream=}'/>
<arg name='streamResources' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='parent' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
<retval declared_type='CGPDFContentStreamRef' already_retained='true' type='^{CGPDFContentStream=}'/>
</function>
<function name='CGPDFContentStreamGetResource'>
<arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
<arg name='category' declared_type='char*' const='true' type='*'/>
<arg name='name' declared_type='char*' const='true' type='*'/>
<retval declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
</function>
<function name='CGPDFContentStreamGetStreams'>
<arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CGPDFContentStreamRelease'>
<arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFContentStreamRetain'>
<arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
<retval declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
</function>
<function name='CGPDFContextAddDestinationAtPoint'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFContextAddDocumentMetadata'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='metadata' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFContextBeginPage'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='pageInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFContextClose'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFContextCreate'>
<arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
<arg name='mediaBox' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
</function>
<function name='CGPDFContextCreateWithURL'>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='mediaBox' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
</function>
<function name='CGPDFContextEndPage'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFContextSetDestinationForRect'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFContextSetURLForRect'>
<arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFDictionaryApplyFunction'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='function' function_pointer='true' declared_type='CGPDFDictionaryApplierFunction' type='^?'>
<arg declared_type='char*' const='true' type='*'/>
<arg declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='info' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFDictionaryGetArray'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFArrayRef*' type='^^{CGPDFArray}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetBoolean'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFBoolean*' type='*'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetCount'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGPDFDictionaryGetDictionary'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFDictionaryRef*' type='^^{CGPDFDictionary}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetInteger'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFInteger*' type64='^q' type='^i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetName'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='char**' const='true' type='^*'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetNumber'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFReal*' type64='^d' type='^f'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetObject'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFObjectRef*' type='^^(CGPDFObject)'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetStream'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFStreamRef*' type='^^{CGPDFStream}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDictionaryGetString'>
<arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
<arg name='key' declared_type='char*' const='true' type='*'/>
<arg name='value' declared_type='CGPDFStringRef*' type='^^{CGPDFString}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDocumentAllowsCopying'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDocumentAllowsPrinting'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDocumentCreateWithProvider'>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<retval declared_type='CGPDFDocumentRef' already_retained='true' type='^{CGPDFDocument=}'/>
</function>
<function name='CGPDFDocumentCreateWithURL'>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<retval declared_type='CGPDFDocumentRef' already_retained='true' type='^{CGPDFDocument=}'/>
</function>
<function name='CGPDFDocumentGetArtBox'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='page' declared_type='int' type='i'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPDFDocumentGetBleedBox'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='page' declared_type='int' type='i'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPDFDocumentGetCatalog'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
</function>
<function name='CGPDFDocumentGetCropBox'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='page' declared_type='int' type='i'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPDFDocumentGetID'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
</function>
<function name='CGPDFDocumentGetInfo'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
</function>
<function name='CGPDFDocumentGetMediaBox'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='page' declared_type='int' type='i'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPDFDocumentGetNumberOfPages'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGPDFDocumentGetPage'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='pageNumber' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
</function>
<function name='CGPDFDocumentGetRotationAngle'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='page' declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGPDFDocumentGetTrimBox'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='page' declared_type='int' type='i'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPDFDocumentGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGPDFDocumentGetVersion'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='majorVersion' declared_type='int*' type='^i'/>
<arg name='minorVersion' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFDocumentIsEncrypted'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDocumentIsUnlocked'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFDocumentRelease'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFDocumentRetain'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<retval declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
</function>
<function name='CGPDFDocumentUnlockWithPassword'>
<arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
<arg name='password' declared_type='char*' const='true' type='*'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFObjectGetType'>
<arg name='object' declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
<retval declared_type='CGPDFObjectType' type='i'/>
</function>
<function name='CGPDFObjectGetValue'>
<arg name='object' declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
<arg name='type' declared_type='CGPDFObjectType' type='i'/>
<arg name='value' declared_type='void*' type='^v'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFOperatorTableCreate'>
<retval declared_type='CGPDFOperatorTableRef' already_retained='true' type='^{CGPDFOperatorTable=}'/>
</function>
<function name='CGPDFOperatorTableRelease'>
<arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFOperatorTableRetain'>
<arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
<retval declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
</function>
<function name='CGPDFOperatorTableSetCallback'>
<arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
<arg name='name' declared_type='char*' const='true' type='*'/>
<arg name='callback' function_pointer='true' declared_type='CGPDFOperatorCallback' type='^?'>
<arg declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFPageGetBoxRect'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<arg name='box' declared_type='CGPDFBox' type='i'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPDFPageGetDictionary'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
</function>
<function name='CGPDFPageGetDocument'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
</function>
<function name='CGPDFPageGetDrawingTransform'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<arg name='box' declared_type='CGPDFBox' type='i'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rotate' declared_type='int' type='i'/>
<arg name='preserveAspectRatio' declared_type='_Bool' type='B'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='CGPDFPageGetPageNumber'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGPDFPageGetRotationAngle'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='CGPDFPageGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGPDFPageRelease'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFPageRetain'>
<arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
<retval declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
</function>
<function name='CGPDFScannerCreate'>
<arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
<arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
<arg name='info' declared_type='void*' type='^v'/>
<retval declared_type='CGPDFScannerRef' already_retained='true' type='^{CGPDFScanner=}'/>
</function>
<function name='CGPDFScannerGetContentStream'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<retval declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
</function>
<function name='CGPDFScannerPopArray'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFArrayRef*' type='^^{CGPDFArray}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopBoolean'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFBoolean*' type='*'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopDictionary'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFDictionaryRef*' type='^^{CGPDFDictionary}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopInteger'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFInteger*' type64='^q' type='^i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopName'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='char**' const='true' type='^*'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopNumber'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFReal*' type64='^d' type='^f'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopObject'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFObjectRef*' type='^^(CGPDFObject)'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopStream'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFStreamRef*' type='^^{CGPDFStream}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerPopString'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<arg name='value' declared_type='CGPDFStringRef*' type='^^{CGPDFString}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFScannerRelease'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPDFScannerRetain'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<retval declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
</function>
<function name='CGPDFScannerScan'>
<arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPDFStreamCopyData'>
<arg name='stream' declared_type='CGPDFStreamRef' type='^{CGPDFStream=}'/>
<arg name='format' declared_type='CGPDFDataFormat*' type='^i'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CGPDFStreamGetDictionary'>
<arg name='stream' declared_type='CGPDFStreamRef' type='^{CGPDFStream=}'/>
<retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
</function>
<function name='CGPDFStringCopyDate'>
<arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
<retval declared_type='CFDateRef' already_retained='true' type='^{__CFDate=}'/>
</function>
<function name='CGPDFStringCopyTextString'>
<arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CGPDFStringGetBytePtr'>
<arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
<retval declared_type='unsigned char*' const='true' type='*'/>
</function>
<function name='CGPDFStringGetLength'>
<arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
<retval declared_type='size_t' type64='Q' type='L'/>
</function>
<function name='CGPSConverterAbort'>
<arg name='converter' declared_type='CGPSConverterRef' type='^{CGPSConverter=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPSConverterConvert'>
<arg name='converter' declared_type='CGPSConverterRef' type='^{CGPSConverter=}'/>
<arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
<arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
<arg name='options' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPSConverterCreate'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='callbacks' declared_type='CGPSConverterCallbacks*' const='true' type='^{CGPSConverterCallbacks=I^?^?^?^?^?^?^?}'/>
<arg name='options' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CGPSConverterRef' already_retained='true' type='^{CGPSConverter=}'/>
</function>
<function name='CGPSConverterGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGPSConverterIsConverting'>
<arg name='converter' declared_type='CGPSConverterRef' type='^{CGPSConverter=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPaletteCreateCopy'>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
</function>
<function name='CGPaletteCreateDefaultColorPalette'>
<retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
</function>
<function name='CGPaletteCreateFromPaletteBlendedWithColor'>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<arg name='fraction' declared_type='CGPaletteBlendFraction' type='f'/>
<arg name='color' declared_type='CGDeviceColor' type='{CGDeviceColor=fff}'/>
<retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
</function>
<function name='CGPaletteCreateWithByteSamples'>
<arg name='samples' declared_type='CGDeviceByteColor*' type='^{CGDeviceByteColor=CCC}'/>
<arg name='count' declared_type='uint32_t' type='I'/>
<retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
</function>
<function name='CGPaletteCreateWithCapacity'>
<arg name='capacity' declared_type='uint32_t' type='I'/>
<retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
</function>
<function name='CGPaletteCreateWithDisplay'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
</function>
<function name='CGPaletteCreateWithSamples'>
<arg name='samples' declared_type='CGDeviceColor*' type='^{CGDeviceColor=fff}'/>
<arg name='count' declared_type='uint32_t' type='I'/>
<retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
</function>
<function name='CGPaletteGetColorAtIndex'>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<arg name='index' declared_type='uint32_t' type='I'/>
<retval declared_type='CGDeviceColor' type='{CGDeviceColor=fff}'/>
</function>
<function name='CGPaletteGetIndexForColor'>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<arg name='color' declared_type='CGDeviceColor' type='{CGDeviceColor=fff}'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGPaletteGetNumberOfSamples'>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGPaletteIsEqualToPalette'>
<arg name='palette1' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<arg name='palette2' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPaletteRelease'>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPaletteSetColorAtIndex'>
<arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
<arg name='color' declared_type='CGDeviceColor' type='{CGDeviceColor=fff}'/>
<arg name='index' declared_type='uint32_t' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddArc'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f'/>
<arg name='startAngle' declared_type='CGFloat' type64='d' type='f'/>
<arg name='endAngle' declared_type='CGFloat' type64='d' type='f'/>
<arg name='clockwise' declared_type='_Bool' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddArcToPoint'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='x1' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y1' declared_type='CGFloat' type64='d' type='f'/>
<arg name='x2' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y2' declared_type='CGFloat' type64='d' type='f'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddCurveToPoint'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='cp1x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cp1y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cp2x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cp2y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddEllipseInRect'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddLineToPoint'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddLines'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='points' declared_type='CGPoint*' type64='^{CGPoint=dd}' const='true' type='^{CGPoint=ff}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddPath'>
<arg name='path1' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='path2' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddQuadCurveToPoint'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='cpx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='cpy' declared_type='CGFloat' type64='d' type='f'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddRect'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddRects'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='rects' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathAddRelativeArc'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='matrix' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f'/>
<arg name='startAngle' declared_type='CGFloat' type64='d' type='f'/>
<arg name='delta' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathApply'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='function' function_pointer='true' declared_type='CGPathApplierFunction' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CGPathElement*' const='true' type='^{CGPathElement=i^{CGPoint}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathCloseSubpath'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathContainsPoint'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='eoFill' declared_type='_Bool' type='B'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPathCreateCopy'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateCopyByDashingPath'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='transform' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='phase' declared_type='CGFloat' type64='d' type='f'/>
<arg name='lengths' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='count' declared_type='size_t' type64='Q' type='L'/>
<retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateCopyByStrokingPath'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='transform' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='lineWidth' declared_type='CGFloat' type64='d' type='f'/>
<arg name='lineCap' declared_type='CGLineCap' type='i'/>
<arg name='lineJoin' declared_type='CGLineJoin' type='i'/>
<arg name='miterLimit' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateCopyByTransformingPath'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='transform' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateMutable'>
<retval declared_type='CGMutablePathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateMutableCopy'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='CGMutablePathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateMutableCopyByTransformingPath'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='transform' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<retval declared_type='CGMutablePathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateWithEllipseInRect'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='transform' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathCreateWithRect'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='transform' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
</function>
<function name='CGPathEqualToPath'>
<arg name='path1' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='path2' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPathGetBoundingBox'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPathGetCurrentPoint'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGPathGetPathBoundingBox'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGPathGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGPathIsEmpty'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPathIsRect'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<arg name='rect' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPathMoveToPoint'>
<arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
<arg name='m' declared_type='CGAffineTransform*' type64='^{CGAffineTransform=dddddd}' const='true' type='^{CGAffineTransform=ffffff}'/>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathRelease'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPathRetain'>
<arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</function>
<function name='CGPatternCreate'>
<arg name='info' declared_type='void*' type='^v'/>
<arg name='bounds' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='matrix' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<arg name='xStep' declared_type='CGFloat' type64='d' type='f'/>
<arg name='yStep' declared_type='CGFloat' type64='d' type='f'/>
<arg name='tiling' declared_type='CGPatternTiling' type='i'/>
<arg name='isColored' declared_type='_Bool' type='B'/>
<arg name='callbacks' declared_type='CGPatternCallbacks*' const='true' type='^{CGPatternCallbacks=I^?^?}'/>
<retval declared_type='CGPatternRef' already_retained='true' type='^{CGPattern=}'/>
</function>
<function name='CGPatternGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGPatternRelease'>
<arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGPatternRetain'>
<arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
<retval declared_type='CGPatternRef' type='^{CGPattern=}'/>
</function>
<function name='CGPointApplyAffineTransform'>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGPointCreateDictionaryRepresentation'>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
</function>
<function name='CGPointEqualToPoint'>
<arg name='point1' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='point2' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPointMake' inline='true'>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='CGPointMakeWithDictionaryRepresentation'>
<arg name='dict' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg name='point' declared_type='CGPoint*' type64='^{CGPoint=dd}' type='^{CGPoint=ff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGPostKeyboardEvent'>
<arg name='keyChar' declared_type='CGCharCode' type='S'/>
<arg name='virtualKey' declared_type='CGKeyCode' type='S'/>
<arg name='keyDown' declared_type='boolean_t' type64='I' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGPostMouseEvent' variadic='true'>
<arg name='mouseCursorPosition' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='updateMouseCursorPosition' declared_type='boolean_t' type64='I' type='i'/>
<arg name='buttonCount' declared_type='CGButtonCount' type='I'/>
<arg name='mouseButtonDown' declared_type='boolean_t' type64='I' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGPostScrollWheelEvent' variadic='true'>
<arg name='wheelCount' declared_type='CGWheelCount' type='I'/>
<arg name='wheel1' declared_type='int32_t' type='i'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGRectApplyAffineTransform'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRectContainsPoint'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectContainsRect'>
<arg name='rect1' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rect2' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectCreateDictionaryRepresentation'>
<arg declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
</function>
<function name='CGRectDivide'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='slice' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='remainder' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='amount' declared_type='CGFloat' type64='d' type='f'/>
<arg name='edge' declared_type='CGRectEdge' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGRectEqualToRect'>
<arg name='rect1' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rect2' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectGetHeight'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectGetMaxX'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectGetMaxY'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectGetMidX'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectGetMidY'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectGetMinX'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectGetMinY'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectGetWidth'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</function>
<function name='CGRectInset'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='dx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='dy' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRectIntegral'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRectIntersection'>
<arg name='r1' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='r2' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRectIntersectsRect'>
<arg name='rect1' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='rect2' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectIsEmpty'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectIsInfinite'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectIsNull'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectMake' inline='true'>
<arg name='x' declared_type='CGFloat' type64='d' type='f'/>
<arg name='y' declared_type='CGFloat' type64='d' type='f'/>
<arg name='width' declared_type='CGFloat' type64='d' type='f'/>
<arg name='height' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRectMakeWithDictionaryRepresentation'>
<arg name='dict' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg name='rect' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGRectOffset'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='dx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='dy' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRectStandardize'>
<arg name='rect' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRectUnion'>
<arg name='r1' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='r2' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
</function>
<function name='CGRegisterScreenRefreshCallback'>
<arg name='callback' function_pointer='true' declared_type='CGScreenRefreshCallback' type='^?'>
<arg declared_type='uint32_t' type='I'/>
<arg declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGReleaseAllDisplays'>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGReleaseDisplayFadeReservation'>
<arg name='token' declared_type='CGDisplayFadeReservationToken' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGReleaseScreenRefreshRects'>
<arg name='rects' declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGRestorePermanentDisplayConfiguration'>
<retval declared_type='void' type='v'/>
</function>
<function name='CGScreenRegisterMoveCallback'>
<arg name='callback' function_pointer='true' declared_type='CGScreenUpdateMoveCallback' type='^?'>
<arg declared_type='CGScreenUpdateMoveDelta' type='{CGScreenUpdateMoveDelta=ii}'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<arg declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGScreenUnregisterMoveCallback'>
<arg name='callback' function_pointer='true' declared_type='CGScreenUpdateMoveCallback' type='^?'>
<arg declared_type='CGScreenUpdateMoveDelta' type='{CGScreenUpdateMoveDelta=ii}'/>
<arg declared_type='size_t' type64='Q' type='L'/>
<arg declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGSessionCopyCurrentDictionary'>
<retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
</function>
<function name='CGSetDisplayTransferByByteTable'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='tableSize' declared_type='uint32_t' type='I'/>
<arg name='redTable' declared_type='uint8_t*' const='true' type='*'/>
<arg name='greenTable' declared_type='uint8_t*' const='true' type='*'/>
<arg name='blueTable' declared_type='uint8_t*' const='true' type='*'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGSetDisplayTransferByFormula'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='redMin' declared_type='CGGammaValue' type='f'/>
<arg name='redMax' declared_type='CGGammaValue' type='f'/>
<arg name='redGamma' declared_type='CGGammaValue' type='f'/>
<arg name='greenMin' declared_type='CGGammaValue' type='f'/>
<arg name='greenMax' declared_type='CGGammaValue' type='f'/>
<arg name='greenGamma' declared_type='CGGammaValue' type='f'/>
<arg name='blueMin' declared_type='CGGammaValue' type='f'/>
<arg name='blueMax' declared_type='CGGammaValue' type='f'/>
<arg name='blueGamma' declared_type='CGGammaValue' type='f'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGSetDisplayTransferByTable'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<arg name='tableSize' declared_type='uint32_t' type='I'/>
<arg name='redTable' declared_type='CGGammaValue*' const='true' type='^f'/>
<arg name='greenTable' declared_type='CGGammaValue*' const='true' type='^f'/>
<arg name='blueTable' declared_type='CGGammaValue*' const='true' type='^f'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGSetLocalEventsFilterDuringSuppressionState'>
<arg name='filter' declared_type='CGEventFilterMask' type='I'/>
<arg name='state' declared_type='CGEventSuppressionState' type='I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGSetLocalEventsSuppressionInterval'>
<arg name='seconds' declared_type='CFTimeInterval' type='d'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGShadingCreateAxial'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='start' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='end' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
<arg name='extendStart' declared_type='_Bool' type='B'/>
<arg name='extendEnd' declared_type='_Bool' type='B'/>
<retval declared_type='CGShadingRef' already_retained='true' type='^{CGShading=}'/>
</function>
<function name='CGShadingCreateRadial'>
<arg name='space' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
<arg name='start' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='startRadius' declared_type='CGFloat' type64='d' type='f'/>
<arg name='end' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='endRadius' declared_type='CGFloat' type64='d' type='f'/>
<arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
<arg name='extendStart' declared_type='_Bool' type='B'/>
<arg name='extendEnd' declared_type='_Bool' type='B'/>
<retval declared_type='CGShadingRef' already_retained='true' type='^{CGShading=}'/>
</function>
<function name='CGShadingGetTypeID'>
<retval declared_type='CFTypeID' type64='Q' type='L'/>
</function>
<function name='CGShadingRelease'>
<arg name='shading' declared_type='CGShadingRef' type='^{CGShading=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGShadingRetain'>
<arg name='shading' declared_type='CGShadingRef' type='^{CGShading=}'/>
<retval declared_type='CGShadingRef' type='^{CGShading=}'/>
</function>
<function name='CGShieldingWindowID'>
<arg name='display' declared_type='CGDirectDisplayID' type='I'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CGShieldingWindowLevel'>
<retval declared_type='int32_t' type='i'/>
</function>
<function name='CGSizeApplyAffineTransform'>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
</function>
<function name='CGSizeCreateDictionaryRepresentation'>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
</function>
<function name='CGSizeEqualToSize'>
<arg name='size1' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='size2' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGSizeMake' inline='true'>
<arg name='width' declared_type='CGFloat' type64='d' type='f'/>
<arg name='height' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
</function>
<function name='CGSizeMakeWithDictionaryRepresentation'>
<arg name='dict' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg name='size' declared_type='CGSize*' type64='^{CGSize=dd}' type='^{CGSize=ff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGUnregisterScreenRefreshCallback'>
<arg name='callback' function_pointer='true' declared_type='CGScreenRefreshCallback' type='^?'>
<arg declared_type='uint32_t' type='I'/>
<arg declared_type='CGRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='userInfo' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGWaitForScreenRefreshRects'>
<arg name='rects' declared_type='CGRect**' type='^^{CGRect}'/>
<arg name='count' declared_type='uint32_t*' type='^I'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGWaitForScreenUpdateRects'>
<arg name='requestedOperations' declared_type='CGScreenUpdateOperation' type='I'/>
<arg name='currentOperation' declared_type='CGScreenUpdateOperation*' type='^I'/>
<arg name='rects' declared_type='CGRect**' type='^^{CGRect}'/>
<arg name='rectCount' declared_type='size_t*' type64='^Q' type='^I'/>
<arg name='delta' declared_type='CGScreenUpdateMoveDelta*' type='^{CGScreenUpdateMoveDelta=ii}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGWarpMouseCursorPosition'>
<arg name='newCursorPosition' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='CGError' type='i'/>
</function>
<function name='CGWindowLevelForKey'>
<arg name='key' declared_type='CGWindowLevelKey' type='i'/>
<retval declared_type='CGWindowLevel' type='i'/>
</function>
<function name='CGWindowListCopyWindowInfo'>
<arg name='option' declared_type='CGWindowListOption' type='I'/>
<arg name='relativeToWindow' declared_type='CGWindowID' type='I'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CGWindowListCreate'>
<arg name='option' declared_type='CGWindowListOption' type='I'/>
<arg name='relativeToWindow' declared_type='CGWindowID' type='I'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CGWindowListCreateDescriptionFromArray'>
<arg name='windowArray' declared_type='CFArrayRef' type='^{__CFArray=}'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CGWindowListCreateImage'>
<arg name='screenBounds' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='listOption' declared_type='CGWindowListOption' type='I'/>
<arg name='windowID' declared_type='CGWindowID' type='I'/>
<arg name='imageOption' declared_type='CGWindowImageOption' type='I'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGWindowListCreateImageFromArray'>
<arg name='screenBounds' declared_type='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
<arg name='windowArray' declared_type='CFArrayRef' type='^{__CFArray=}'/>
<arg name='imageOption' declared_type='CGWindowImageOption' type='I'/>
<retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
</function>
<function name='CGWindowServerCFMachPort'>
<retval declared_type='CFMachPortRef' type='^{__CFMachPort=}'/>
</function>
<function name='__CGAffineTransformMake' inline='true'>
<arg name='a' declared_type='CGFloat' type64='d' type='f'/>
<arg name='b' declared_type='CGFloat' type64='d' type='f'/>
<arg name='c' declared_type='CGFloat' type64='d' type='f'/>
<arg name='d' declared_type='CGFloat' type64='d' type='f'/>
<arg name='tx' declared_type='CGFloat' type64='d' type='f'/>
<arg name='ty' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
</function>
<function name='__CGPointApplyAffineTransform' inline='true'>
<arg name='point' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
</function>
<function name='__CGPointEqualToPoint' inline='true'>
<arg name='point1' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<arg name='point2' declared_type='CGPoint' type64='{CGPoint=dd}' type='{CGPoint=ff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='__CGSizeApplyAffineTransform' inline='true'>
<arg name='size' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='t' declared_type='CGAffineTransform' type64='{CGAffineTransform=dddddd}' type='{CGAffineTransform=ffffff}'/>
<retval declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
</function>
<function name='__CGSizeEqualToSize' inline='true'>
<arg name='size1' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<arg name='size2' declared_type='CGSize' type64='{CGSize=dd}' type='{CGSize=ff}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function_alias name='CGAffineTransformMake' original='__CGAffineTransformMake'/>
<function_alias name='CGPointApplyAffineTransform' original='__CGPointApplyAffineTransform'/>
<function_alias name='CGPointEqualToPoint' original='__CGPointEqualToPoint'/>
<function_alias name='CGSizeApplyAffineTransform' original='__CGSizeApplyAffineTransform'/>
<function_alias name='CGSizeEqualToSize' original='__CGSizeEqualToSize'/>
</signatures>
