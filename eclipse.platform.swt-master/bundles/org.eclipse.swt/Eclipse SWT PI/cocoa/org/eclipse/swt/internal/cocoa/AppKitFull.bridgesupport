<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
<depends_on path='/System/Library/Frameworks/AudioToolbox.framework'/>
<depends_on path='/System/Library/Frameworks/AudioUnit.framework'/>
<depends_on path='/System/Library/Frameworks/CoreData.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework'/>
<depends_on path='/System/Library/Frameworks/QuartzCore.framework'/>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<depends_on path='/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework'/>
<depends_on path='/System/Library/Frameworks/CoreAudio.framework'/>
<depends_on path='/System/Library/Frameworks/DiskArbitration.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<struct name='NSEdgeInsets' type64='{_NSEdgeInsets=&quot;top&quot;d&quot;left&quot;d&quot;bottom&quot;d&quot;right&quot;d}' type='{_NSEdgeInsets=&quot;top&quot;f&quot;left&quot;f&quot;bottom&quot;f&quot;right&quot;f}'>
<field name='top' declared_type='CGFloat' type64='d' type='f'/>
<field name='left' declared_type='CGFloat' type64='d' type='f'/>
<field name='bottom' declared_type='CGFloat' type64='d' type='f'/>
<field name='right' declared_type='CGFloat' type64='d' type='f'/>
</struct>
<opaque name='NSModalSession' type='^{_NSModalSession=}'/>
<opaque name='NSOpenGLContextAuxiliary' type='^{_CGLContextObject=}'/>
<opaque name='NSOpenGLPixelFormatAuxiliary' type='^{_CGLPixelFormatObject=}'/>
<opaque name='NSScreenAuxiliaryOpaque' type='^{NSScreenAuxiliary=}'/>
<opaque name='_NSProgressIndicatorThreadInfo' type='^{__NSProgressIndicatorThreadInfo=}'/>
<opaque name='_NSThreadPrivate' type='^{NSThreadPrivate=}'/>
<constant name='NSAbortModalException' declared_type='NSString*' type='@'/>
<constant name='NSAbortPrintingException' declared_type='NSString*' type='@'/>
<constant name='NSAccessibilityAllowedValuesAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityApplicationActivatedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityApplicationDeactivatedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityApplicationHiddenNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityApplicationRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityApplicationShownNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityAscendingSortDirectionValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityAttachmentTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityAttributedStringForRangeParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityAutocorrectedTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityBackgroundColorTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityBoundsForRangeParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityBrowserRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityBusyIndicatorRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityButtonRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCancelAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCancelButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCellForColumnAndRowParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCellRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCenterTabStopMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCentimetersUnitValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCheckBoxRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityChildrenAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityClearButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCloseButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCloseButtonSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityColorWellRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityColumnCountAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityColumnHeaderUIElementsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityColumnIndexRangeAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityColumnRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityColumnTitlesAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityColumnsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityComboBoxRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityConfirmAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityContentListSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityContentsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCreatedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityCriticalValueAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDecimalTabStopMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDecrementAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDecrementArrowSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDecrementButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDecrementPageSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDefaultButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDefinitionListSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDeleteAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDescendingSortDirectionValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDescriptionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDialogSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDisclosedByRowAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDisclosedRowsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDisclosingAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDisclosureLevelAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDisclosureTriangleRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDocumentAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDrawerCreatedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityDrawerRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityEditedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityEnabledAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityErrorCodeExceptionInfo' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityException' declared_type='NSString*' type='@'/>
<constant name='NSAccessibilityExpandedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFilenameAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFirstLineIndentMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFloatingWindowSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFocusedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFocusedUIElementAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFocusedUIElementChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFocusedWindowAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFocusedWindowChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFontFamilyKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFontNameKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFontSizeKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFontTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityForegroundColorTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFrontmostAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFullScreenButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityFullScreenButtonSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityGridRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityGroupRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityGrowAreaAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityGrowAreaRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHandleRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHandlesAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHeadIndentMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHeaderAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHelpAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHelpTagCreatedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHelpTagRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHiddenAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHorizontalOrientationValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHorizontalScrollBarAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHorizontalUnitDescriptionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityHorizontalUnitsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityIdentifierAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityImageRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityInchesUnitValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityIncrementAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityIncrementArrowSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityIncrementButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityIncrementPageSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityIncrementorRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityIndexAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityInsertionPointLineNumberAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLabelUIElementsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLabelValueAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLayoutAreaRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLayoutItemRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLayoutPointForScreenPointParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLayoutSizeForScreenSizeParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLeftTabStopMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLevelIndicatorRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLineForIndexParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLinkRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLinkTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityLinkedUIElementsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityListRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMainAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMainWindowAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMainWindowChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMarkerGroupUIElementAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMarkerTypeAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMarkerTypeDescriptionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMarkerUIElementsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMarkerValuesAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMatteContentUIElementAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMatteHoleAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMatteRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMaxValueAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMenuBarAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMenuBarRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMenuButtonRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMenuItemRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMenuRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMinValueAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMinimizeButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMinimizeButtonSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMinimizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMisspelledTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityModalAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityMovedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityNextContentsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityNumberOfCharactersAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityOrderedByRowAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityOrientationAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityOutlineRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityOutlineRowSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityOverflowButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityParentAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPicasUnitValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPickAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPlaceholderValueAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPointsUnitValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPopUpButtonRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPopoverRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPositionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPressAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityPreviousContentsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityProgressIndicatorRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityProxyAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRTFForRangeParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRadioButtonRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRadioGroupRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRaiseAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRangeForIndexParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRangeForLineParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRangeForPositionParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRatingIndicatorSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRelevanceIndicatorRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityResizedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRightTabStopMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRoleAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRoleDescriptionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowCollapsedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowCountAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowCountChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowExpandedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowHeaderUIElementsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowIndexRangeAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRowsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRulerMarkerRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityRulerRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityScreenPointForLayoutPointParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityScreenSizeForLayoutSizeParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityScrollAreaRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityScrollBarRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySearchButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySearchFieldSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySearchMenuAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySecureTextFieldSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedCellsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedCellsChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedChildrenAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedChildrenChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedChildrenMovedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedColumnsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedColumnsChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedRowsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedRowsChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedTextChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedTextRangeAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySelectedTextRangesAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityServesAsTitleForUIElementsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityShadowTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySharedCharacterRangeAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySharedTextUIElementsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySheetCreatedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySheetRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityShowMenuAction' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityShownMenuAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySizeAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySliderRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySortButtonRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySortButtonSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySortDirectionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySplitGroupRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySplitterRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySplittersAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityStandardWindowSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityStaticTextRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityStrikethroughColorTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityStrikethroughTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityStringForRangeParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityStyleRangeForIndexParameterizedAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySubroleAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySuperscriptTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySystemDialogSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySystemFloatingWindowSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilitySystemWideRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTabGroupRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTableRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTableRowSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTabsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTailIndentMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTextAreaRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTextAttachmentSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTextFieldRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTextLinkSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTimelineSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTitleAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTitleChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTitleUIElementAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityToolbarButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityToolbarButtonSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityToolbarRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityTopLevelUIElementAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUIElementDestroyedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityURLAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnderlineColorTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnderlineTextAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnitDescriptionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnitsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnitsChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnknownMarkerTypeValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnknownOrientationValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnknownRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnknownSortDirectionValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnknownSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityUnknownUnitValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityValueAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityValueChangedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityValueDescriptionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityValueIndicatorRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVerticalOrientationValue' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVerticalScrollBarAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVerticalUnitDescriptionAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVerticalUnitsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVisibleCellsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVisibleCharacterRangeAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVisibleChildrenAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVisibleColumnsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVisibleNameKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityVisibleRowsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWarningValueAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowCreatedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowDeminiaturizedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowMiniaturizedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowMovedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowResizedNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowRole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityWindowsAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityZoomButtonAttribute' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAccessibilityZoomButtonSubrole' declared_type='NSString*' const='true' type='@'/>
<constant name='NSAlignmentBinding' declared_type='NSString*' type='@'/>
<constant name='NSAllRomanInputSourcesLocaleIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSAllowsEditingMultipleValuesSelectionBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSAllowsNullArgumentBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSAlternateImageBinding' declared_type='NSString*' type='@'/>
<constant name='NSAlternateTitleBinding' declared_type='NSString*' type='@'/>
<constant name='NSAlwaysPresentsApplicationModalAlertsBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSAnimateBinding' declared_type='NSString*' type='@'/>
<constant name='NSAnimationDelayBinding' declared_type='NSString*' type='@'/>
<constant name='NSAnimationProgressMark' declared_type='NSString*' type='@'/>
<constant name='NSAnimationProgressMarkNotification' declared_type='NSString*' type='@'/>
<constant name='NSAnimationTriggerOrderIn' declared_type='NSString*' type='@'/>
<constant name='NSAnimationTriggerOrderOut' declared_type='NSString*' type='@'/>
<constant name='NSAntialiasThresholdChangedNotification' declared_type='NSString*' type='@'/>
<constant name='NSApp' declared_type='id' type='@'/>
<constant name='NSAppKitIgnoredException' declared_type='NSString*' type='@'/>
<constant name='NSAppKitVersionNumber' declared_type='double' const='true' type='d'/>
<constant name='NSAppKitVirtualMemoryException' declared_type='NSString*' type='@'/>
<constant name='NSApplicationDidBecomeActiveNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationDidChangeScreenParametersNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationDidFinishLaunchingNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationDidFinishRestoringWindowsNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSApplicationDidHideNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationDidResignActiveNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationDidUnhideNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationDidUpdateNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationFileType' declared_type='NSString*' type='@'/>
<constant name='NSApplicationLaunchIsDefaultLaunchKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSApplicationLaunchRemoteNotificationKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSApplicationWillBecomeActiveNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationWillFinishLaunchingNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationWillHideNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationWillResignActiveNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationWillTerminateNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationWillUnhideNotification' declared_type='NSString*' type='@'/>
<constant name='NSApplicationWillUpdateNotification' declared_type='NSString*' type='@'/>
<constant name='NSArgumentBinding' declared_type='NSString*' type='@'/>
<constant name='NSAttachmentAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSAttributedStringBinding' declared_type='NSString*' type='@'/>
<constant name='NSAuthorDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSBackgroundColorAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSBackgroundColorDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSBadBitmapParametersException' declared_type='NSString*' type='@'/>
<constant name='NSBadComparisonException' declared_type='NSString*' type='@'/>
<constant name='NSBadRTFColorTableException' declared_type='NSString*' type='@'/>
<constant name='NSBadRTFDirectiveException' declared_type='NSString*' type='@'/>
<constant name='NSBadRTFFontTableException' declared_type='NSString*' type='@'/>
<constant name='NSBadRTFStyleSheetException' declared_type='NSString*' type='@'/>
<constant name='NSBaseURLDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSBaselineOffsetAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSBlack' declared_type='CGFloat' type64='d' const='true' type='f'/>
<constant name='NSBottomMarginDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSBrowserColumnConfigurationDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSBrowserIllegalDelegateException' declared_type='NSString*' type='@'/>
<constant name='NSCalibratedBlackColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSCalibratedRGBColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSCalibratedWhiteColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSCategoryDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSCharacterEncodingDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSCharacterEncodingDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSCharacterShapeAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSCocoaVersionDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSColorListDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSColorListIOException' declared_type='NSString*' type='@'/>
<constant name='NSColorListNotEditableException' declared_type='NSString*' type='@'/>
<constant name='NSColorPanelColorDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSColorPboardType' declared_type='NSString*' type='@'/>
<constant name='NSComboBoxSelectionDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSComboBoxSelectionIsChangingNotification' declared_type='NSString*' type='@'/>
<constant name='NSComboBoxWillDismissNotification' declared_type='NSString*' type='@'/>
<constant name='NSComboBoxWillPopUpNotification' declared_type='NSString*' type='@'/>
<constant name='NSCommentDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSCompanyDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSConditionallySetsEditableBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSConditionallySetsEnabledBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSConditionallySetsHiddenBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSContentArrayBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentArrayForMultipleSelectionBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentDictionaryBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentHeightBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentObjectBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentObjectsBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentPlacementTagBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSContentSetBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentValuesBinding' declared_type='NSString*' type='@'/>
<constant name='NSContentWidthBinding' declared_type='NSString*' type='@'/>
<constant name='NSContextHelpModeDidActivateNotification' declared_type='NSString*' type='@'/>
<constant name='NSContextHelpModeDidDeactivateNotification' declared_type='NSString*' type='@'/>
<constant name='NSContinuouslyUpdatesValueBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSControlTextDidBeginEditingNotification' declared_type='NSString*' type='@'/>
<constant name='NSControlTextDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSControlTextDidEndEditingNotification' declared_type='NSString*' type='@'/>
<constant name='NSControlTintDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSConvertedDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSCopyrightDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSCreatesSortDescriptorBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSCreationTimeDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSCriticalValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSCursorAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSCustomColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSDarkGray' declared_type='CGFloat' type64='d' const='true' type='f'/>
<constant name='NSDataBinding' declared_type='NSString*' type='@'/>
<constant name='NSDefaultAttributesDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSDefaultTabIntervalDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSDefinitionPresentationTypeDictionaryApplication' declared_type='NSString*' const='true' type='@'/>
<constant name='NSDefinitionPresentationTypeKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSDefinitionPresentationTypeOverlay' declared_type='NSString*' const='true' type='@'/>
<constant name='NSDeletesObjectsOnRemoveBindingsOption' declared_type='NSString*' type='@'/>
<constant name='NSDeviceBitsPerSample' declared_type='NSString*' type='@'/>
<constant name='NSDeviceBlackColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSDeviceCMYKColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSDeviceColorSpaceName' declared_type='NSString*' type='@'/>
<constant name='NSDeviceIsPrinter' declared_type='NSString*' type='@'/>
<constant name='NSDeviceIsScreen' declared_type='NSString*' type='@'/>
<constant name='NSDeviceRGBColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSDeviceResolution' declared_type='NSString*' type='@'/>
<constant name='NSDeviceSize' declared_type='NSString*' type='@'/>
<constant name='NSDeviceWhiteColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSDirectoryFileType' declared_type='NSString*' type='@'/>
<constant name='NSDisplayNameBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSDisplayPatternBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSDisplayPatternTitleBinding' declared_type='NSString*' type='@'/>
<constant name='NSDisplayPatternValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSDocFormatTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSDocumentEditedBinding' declared_type='NSString*' type='@'/>
<constant name='NSDocumentTypeDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSDocumentTypeDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSDoubleClickArgumentBinding' declared_type='NSString*' type='@'/>
<constant name='NSDoubleClickTargetBinding' declared_type='NSString*' type='@'/>
<constant name='NSDragPboard' declared_type='NSString*' type='@'/>
<constant name='NSDraggingException' declared_type='NSString*' type='@'/>
<constant name='NSDraggingImageComponentIconKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSDraggingImageComponentLabelKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSDrawerDidCloseNotification' declared_type='NSString*' type='@'/>
<constant name='NSDrawerDidOpenNotification' declared_type='NSString*' type='@'/>
<constant name='NSDrawerWillCloseNotification' declared_type='NSString*' type='@'/>
<constant name='NSDrawerWillOpenNotification' declared_type='NSString*' type='@'/>
<constant name='NSEditableBinding' declared_type='NSString*' type='@'/>
<constant name='NSEditorDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSEnabledBinding' declared_type='NSString*' type='@'/>
<constant name='NSEventTrackingRunLoopMode' declared_type='NSString*' type='@'/>
<constant name='NSExcludedElementsDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSExcludedKeysBinding' declared_type='NSString*' type='@'/>
<constant name='NSExpansionAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSFileContentsPboardType' declared_type='NSString*' type='@'/>
<constant name='NSFileTypeDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFileTypeDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSFilenamesPboardType' declared_type='NSString*' type='@'/>
<constant name='NSFilesPromisePboardType' declared_type='NSString*' type='@'/>
<constant name='NSFilesystemFileType' declared_type='NSString*' type='@'/>
<constant name='NSFilterPredicateBinding' declared_type='NSString*' type='@'/>
<constant name='NSFindPanelCaseInsensitiveSearch' declared_type='NSString*' type='@'/>
<constant name='NSFindPanelSearchOptionsPboardType' declared_type='NSString*' type='@'/>
<constant name='NSFindPanelSubstringMatch' declared_type='NSString*' type='@'/>
<constant name='NSFindPboard' declared_type='NSString*' type='@'/>
<constant name='NSFontAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSFontBinding' declared_type='NSString*' type='@'/>
<constant name='NSFontBoldBinding' declared_type='NSString*' type='@'/>
<constant name='NSFontCascadeListAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontCharacterSetAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontCollectionActionKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionAllFonts' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionDidChangeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionDisallowAutoActivationOption' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionFavorites' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionIncludeDisabledFontsOption' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionNameKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionOldNameKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionRecentlyUsed' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionRemoveDuplicatesOption' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionUser' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionVisibilityKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionWasHidden' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionWasRenamed' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontCollectionWasShown' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFontColorAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontFaceAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontFamilyAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontFamilyNameBinding' declared_type='NSString*' type='@'/>
<constant name='NSFontFeatureSelectorIdentifierKey' declared_type='NSString*' type='@'/>
<constant name='NSFontFeatureSettingsAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontFeatureTypeIdentifierKey' declared_type='NSString*' type='@'/>
<constant name='NSFontFixedAdvanceAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontIdentityMatrix' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<constant name='NSFontItalicBinding' declared_type='NSString*' type='@'/>
<constant name='NSFontMatrixAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontNameAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontNameBinding' declared_type='NSString*' type='@'/>
<constant name='NSFontPboard' declared_type='NSString*' type='@'/>
<constant name='NSFontPboardType' declared_type='NSString*' type='@'/>
<constant name='NSFontSetChangedNotification' declared_type='NSString*' type='@'/>
<constant name='NSFontSizeAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontSizeBinding' declared_type='NSString*' type='@'/>
<constant name='NSFontSlantTrait' declared_type='NSString*' type='@'/>
<constant name='NSFontSymbolicTrait' declared_type='NSString*' type='@'/>
<constant name='NSFontTraitsAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontUnavailableException' declared_type='NSString*' type='@'/>
<constant name='NSFontVariationAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontVariationAxisDefaultValueKey' declared_type='NSString*' type='@'/>
<constant name='NSFontVariationAxisIdentifierKey' declared_type='NSString*' type='@'/>
<constant name='NSFontVariationAxisMaximumValueKey' declared_type='NSString*' type='@'/>
<constant name='NSFontVariationAxisMinimumValueKey' declared_type='NSString*' type='@'/>
<constant name='NSFontVariationAxisNameKey' declared_type='NSString*' type='@'/>
<constant name='NSFontVisibleNameAttribute' declared_type='NSString*' type='@'/>
<constant name='NSFontWeightTrait' declared_type='NSString*' type='@'/>
<constant name='NSFontWidthTrait' declared_type='NSString*' type='@'/>
<constant name='NSForegroundColorAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSFullScreenModeAllScreens' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFullScreenModeApplicationPresentationOptions' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFullScreenModeSetting' declared_type='NSString*' const='true' type='@'/>
<constant name='NSFullScreenModeWindowLevel' declared_type='NSString*' const='true' type='@'/>
<constant name='NSGeneralPboard' declared_type='NSString*' type='@'/>
<constant name='NSGlyphInfoAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSGraphicsContextDestinationAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSGraphicsContextPDFFormat' declared_type='NSString*' type='@'/>
<constant name='NSGraphicsContextPSFormat' declared_type='NSString*' type='@'/>
<constant name='NSGraphicsContextRepresentationFormatAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSHTMLPboardType' declared_type='NSString*' type='@'/>
<constant name='NSHTMLTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSHandlesContentAsCompoundValueBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSHeaderTitleBinding' declared_type='NSString*' type='@'/>
<constant name='NSHiddenBinding' declared_type='NSString*' type='@'/>
<constant name='NSHyphenationFactorDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSIllegalSelectorException' declared_type='NSString*' type='@'/>
<constant name='NSImageBinding' declared_type='NSString*' type='@'/>
<constant name='NSImageCacheException' declared_type='NSString*' type='@'/>
<constant name='NSImageColorSyncProfileData' declared_type='NSString*' type='@'/>
<constant name='NSImageCompressionFactor' declared_type='NSString*' type='@'/>
<constant name='NSImageCompressionMethod' declared_type='NSString*' type='@'/>
<constant name='NSImageCurrentFrame' declared_type='NSString*' type='@'/>
<constant name='NSImageCurrentFrameDuration' declared_type='NSString*' type='@'/>
<constant name='NSImageDitherTransparency' declared_type='NSString*' type='@'/>
<constant name='NSImageEXIFData' declared_type='NSString*' type='@'/>
<constant name='NSImageFallbackBackgroundColor' declared_type='NSString*' type='@'/>
<constant name='NSImageFrameCount' declared_type='NSString*' type='@'/>
<constant name='NSImageGamma' declared_type='NSString*' type='@'/>
<constant name='NSImageHintCTM' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageHintInterpolation' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageInterlaced' declared_type='NSString*' type='@'/>
<constant name='NSImageLoopCount' declared_type='NSString*' type='@'/>
<constant name='NSImageNameActionTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameAddTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameAdvanced' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameApplicationIcon' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameBluetoothTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameBonjour' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameBookmarksTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameCaution' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameColorPanel' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameColumnViewTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameComputer' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameDotMac' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameEnterFullScreenTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameEveryone' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameExitFullScreenTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameFlowViewTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameFolder' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameFolderBurnable' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameFolderSmart' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameFollowLinkFreestandingTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameFontPanel' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameGoLeftTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameGoRightTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameHomeTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameIChatTheaterTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameIconViewTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameInfo' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameInvalidDataFreestandingTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameLeftFacingTriangleTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameListViewTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameLockLockedTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameLockUnlockedTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameMenuMixedStateTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameMenuOnStateTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameMobileMe' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameMultipleDocuments' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameNetwork' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNamePathTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNamePreferencesGeneral' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameQuickLookTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameRefreshFreestandingTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameRefreshTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameRemoveTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameRevealFreestandingTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameRightFacingTriangleTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameSlideshowTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameSmartBadgeTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameStatusAvailable' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameStatusNone' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameStatusPartiallyAvailable' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameStatusUnavailable' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameStopProgressFreestandingTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameStopProgressTemplate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameTrashEmpty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameTrashFull' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameUser' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameUserAccounts' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameUserGroup' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageNameUserGuest' declared_type='NSString*' const='true' type='@'/>
<constant name='NSImageProgressive' declared_type='NSString*' type='@'/>
<constant name='NSImageRGBColorTable' declared_type='NSString*' type='@'/>
<constant name='NSImageRepRegistryDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSIncludedKeysBinding' declared_type='NSString*' type='@'/>
<constant name='NSInitialKeyBinding' declared_type='NSString*' type='@'/>
<constant name='NSInitialValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSInkTextPboardType' declared_type='NSString*' type='@'/>
<constant name='NSInsertsNullPlaceholderBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSInterfaceStyleDefault' declared_type='NSString*' type='@'/>
<constant name='NSInvokesSeparatelyWithArrayObjectsBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSIsIndeterminateBinding' declared_type='NSString*' type='@'/>
<constant name='NSKernAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSKeywordsDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSLabelBinding' declared_type='NSString*' type='@'/>
<constant name='NSLeftMarginDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSLigatureAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSLightGray' declared_type='CGFloat' type64='d' const='true' type='f'/>
<constant name='NSLinkAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSLocalizedKeyDictionaryBinding' declared_type='NSString*' type='@'/>
<constant name='NSMacSimpleTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSManagedObjectContextBinding' declared_type='NSString*' type='@'/>
<constant name='NSManagerDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSMarkedClauseSegmentAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSMaxValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSMaxWidthBinding' declared_type='NSString*' type='@'/>
<constant name='NSMaximumRecentsBinding' declared_type='NSString*' type='@'/>
<constant name='NSMenuDidAddItemNotification' declared_type='NSString*' type='@'/>
<constant name='NSMenuDidBeginTrackingNotification' declared_type='NSString*' type='@'/>
<constant name='NSMenuDidChangeItemNotification' declared_type='NSString*' type='@'/>
<constant name='NSMenuDidEndTrackingNotification' declared_type='NSString*' type='@'/>
<constant name='NSMenuDidRemoveItemNotification' declared_type='NSString*' type='@'/>
<constant name='NSMenuDidSendActionNotification' declared_type='NSString*' type='@'/>
<constant name='NSMenuWillSendActionNotification' declared_type='NSString*' type='@'/>
<constant name='NSMinValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSMinWidthBinding' declared_type='NSString*' type='@'/>
<constant name='NSMixedStateImageBinding' declared_type='NSString*' type='@'/>
<constant name='NSModalPanelRunLoopMode' declared_type='NSString*' type='@'/>
<constant name='NSModificationTimeDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSMultipleTextSelectionPboardType' declared_type='NSString*' type='@'/>
<constant name='NSMultipleValuesMarker' declared_type='id' type='@'/>
<constant name='NSMultipleValuesPlaceholderBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSNamedColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSNibLoadingException' declared_type='NSString*' type='@'/>
<constant name='NSNibOwner' declared_type='NSString*' type='@'/>
<constant name='NSNibTopLevelObjects' declared_type='NSString*' type='@'/>
<constant name='NSNoSelectionMarker' declared_type='id' type='@'/>
<constant name='NSNoSelectionPlaceholderBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSNotApplicableMarker' declared_type='id' type='@'/>
<constant name='NSNotApplicablePlaceholderBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSNullPlaceholderBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSObliquenessAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSObservedKeyPathKey' declared_type='NSString*' type='@'/>
<constant name='NSObservedObjectKey' declared_type='NSString*' type='@'/>
<constant name='NSOffStateImageBinding' declared_type='NSString*' type='@'/>
<constant name='NSOfficeOpenXMLTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSOnStateImageBinding' declared_type='NSString*' type='@'/>
<constant name='NSOpenDocumentTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSOptionsKey' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewColumnDidMoveNotification' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewColumnDidResizeNotification' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewItemDidCollapseNotification' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewItemDidExpandNotification' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewItemWillCollapseNotification' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewItemWillExpandNotification' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewSelectionDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSOutlineViewSelectionIsChangingNotification' declared_type='NSString*' type='@'/>
<constant name='NSPDFPboardType' declared_type='NSString*' type='@'/>
<constant name='NSPICTPboardType' declared_type='NSString*' type='@'/>
<constant name='NSPPDIncludeNotFoundException' declared_type='NSString*' type='@'/>
<constant name='NSPPDIncludeStackOverflowException' declared_type='NSString*' type='@'/>
<constant name='NSPPDIncludeStackUnderflowException' declared_type='NSString*' type='@'/>
<constant name='NSPPDParseException' declared_type='NSString*' type='@'/>
<constant name='NSPaperSizeDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSParagraphStyleAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSPasteboardCommunicationException' declared_type='NSString*' type='@'/>
<constant name='NSPasteboardTypeColor' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeFindPanelSearchOptions' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeFont' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeHTML' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeMultipleTextSelection' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypePDF' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypePNG' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeRTF' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeRTFD' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeRuler' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeSound' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeString' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeTIFF' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeTabularText' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardTypeTextFinderOptions' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardURLReadingContentsConformToTypesKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPasteboardURLReadingFileURLsOnlyKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPatternColorSpace' declared_type='NSString*' type='@'/>
<constant name='NSPlainFileType' declared_type='NSString*' type='@'/>
<constant name='NSPlainTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSPopUpButtonCellWillPopUpNotification' declared_type='NSString*' type='@'/>
<constant name='NSPopUpButtonWillPopUpNotification' declared_type='NSString*' type='@'/>
<constant name='NSPopoverCloseReasonDetachToWindow' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPopoverCloseReasonKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPopoverCloseReasonStandard' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPopoverDidCloseNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPopoverDidShowNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPopoverWillCloseNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPopoverWillShowNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPositioningRectBinding' declared_type='NSString*' type='@'/>
<constant name='NSPostScriptPboardType' declared_type='NSString*' type='@'/>
<constant name='NSPredicateBinding' declared_type='NSString*' type='@'/>
<constant name='NSPredicateFormatBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSPreferredScrollerStyleDidChangeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrefixSpacesDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSPrintAllPages' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintAllPresetsJobStyleHint' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintBottomMargin' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintCancelJob' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintCopies' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintDetailedErrorReporting' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintFaxNumber' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintFirstPage' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintFormName' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintHeaderAndFooter' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintHorizontalPagination' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintHorizontallyCentered' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintJobDisposition' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintJobFeatures' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintJobSavingFileNameExtensionHidden' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintJobSavingURL' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintLastPage' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintLeftMargin' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintManualFeed' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintMustCollate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintNoPresetsJobStyleHint' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintOperationExistsException' declared_type='NSString*' type='@'/>
<constant name='NSPrintOrientation' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPackageException' declared_type='NSString*' type='@'/>
<constant name='NSPrintPagesAcross' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPagesDown' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPagesPerSheet' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPanelAccessorySummaryItemDescriptionKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPanelAccessorySummaryItemNameKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPaperFeed' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPaperName' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPaperSize' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPhotoJobStyleHint' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPreviewJob' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPrinter' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintPrinterName' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintReversePageOrder' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintRightMargin' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintSaveJob' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintSavePath' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintScalingFactor' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintSelectionOnly' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintSpoolJob' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintTime' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintTopMargin' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintVerticalPagination' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintVerticallyCentered' declared_type='NSString*' const='true' type='@'/>
<constant name='NSPrintingCommunicationException' declared_type='NSString*' type='@'/>
<constant name='NSRTFDPboardType' declared_type='NSString*' type='@'/>
<constant name='NSRTFDTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSRTFPboardType' declared_type='NSString*' type='@'/>
<constant name='NSRTFPropertyStackOverflowException' declared_type='NSString*' type='@'/>
<constant name='NSRTFTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSRaisesForNotApplicableKeysBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSReadOnlyDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSRecentSearchesBinding' declared_type='NSString*' type='@'/>
<constant name='NSRepresentedFilenameBinding' declared_type='NSString*' type='@'/>
<constant name='NSRightMarginDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSRowHeightBinding' declared_type='NSString*' type='@'/>
<constant name='NSRuleEditorPredicateComparisonModifier' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRuleEditorPredicateCompoundType' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRuleEditorPredicateCustomSelector' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRuleEditorPredicateLeftExpression' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRuleEditorPredicateOperatorType' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRuleEditorPredicateOptions' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRuleEditorPredicateRightExpression' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRuleEditorRowsDidChangeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSRulerPboard' declared_type='NSString*' type='@'/>
<constant name='NSRulerPboardType' declared_type='NSString*' type='@'/>
<constant name='NSScreenColorSpaceDidChangeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSelectedIdentifierBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectedIndexBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectedLabelBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectedObjectBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectedObjectsBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectedTagBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectedValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectedValuesBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectionIndexPathsBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectionIndexesBinding' declared_type='NSString*' type='@'/>
<constant name='NSSelectorNameBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSSelectsAllWhenSettingContentBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSShadowAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSShellCommandFileType' declared_type='NSString*' type='@'/>
<constant name='NSSortDescriptorsBinding' declared_type='NSString*' type='@'/>
<constant name='NSSoundPboardType' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechCharacterModeProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechCommandDelimiterProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechCommandPrefix' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechCommandSuffix' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechCurrentVoiceProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechDictionaryAbbreviations' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechDictionaryEntryPhonemes' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechDictionaryEntrySpelling' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechDictionaryLocaleIdentifier' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechDictionaryModificationDate' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechDictionaryPronunciations' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechErrorCount' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechErrorNewestCharacterOffset' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechErrorNewestCode' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechErrorOldestCharacterOffset' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechErrorOldestCode' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechErrorsProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechInputModeProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechModeLiteral' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechModeNormal' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechModePhoneme' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechModeText' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechNumberModeProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechOutputToFileURLProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPhonemeInfoExample' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPhonemeInfoHiliteEnd' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPhonemeInfoHiliteStart' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPhonemeInfoOpcode' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPhonemeInfoSymbol' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPhonemeSymbolsProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPitchBaseProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechPitchModProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechRateProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechRecentSyncProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechResetProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechStatusNumberOfCharactersLeft' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechStatusOutputBusy' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechStatusOutputPaused' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechStatusPhonemeCode' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechStatusProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechSynthesizerInfoIdentifier' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechSynthesizerInfoProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechSynthesizerInfoVersion' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpeechVolumeProperty' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpellCheckerDidChangeAutomaticSpellingCorrectionNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpellCheckerDidChangeAutomaticTextReplacementNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSSpellingStateAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSSplitViewDidResizeSubviewsNotification' declared_type='NSString*' type='@'/>
<constant name='NSSplitViewWillResizeSubviewsNotification' declared_type='NSString*' type='@'/>
<constant name='NSStrikethroughColorAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSStrikethroughStyleAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSStringPboardType' declared_type='NSString*' type='@'/>
<constant name='NSStrokeColorAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSStrokeWidthAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSSubjectDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSSuperscriptAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSSystemColorsDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSTIFFException' declared_type='NSString*' type='@'/>
<constant name='NSTIFFPboardType' declared_type='NSString*' type='@'/>
<constant name='NSTabColumnTerminatorsAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSTableViewColumnDidMoveNotification' declared_type='NSString*' type='@'/>
<constant name='NSTableViewColumnDidResizeNotification' declared_type='NSString*' type='@'/>
<constant name='NSTableViewRowViewKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSTableViewSelectionDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSTableViewSelectionIsChangingNotification' declared_type='NSString*' type='@'/>
<constant name='NSTabularTextPboardType' declared_type='NSString*' type='@'/>
<constant name='NSTargetBinding' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingDocumentAuthorKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingDocumentTitleKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingDocumentURLKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingOrthographyKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingQuotesKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingReferenceDateKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingReferenceTimeZoneKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingRegularExpressionsKey' declared_type='NSString*' type='@'/>
<constant name='NSTextCheckingReplacementsKey' declared_type='NSString*' type='@'/>
<constant name='NSTextColorBinding' declared_type='NSString*' type='@'/>
<constant name='NSTextDidBeginEditingNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextDidEndEditingNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextEncodingNameDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSTextEncodingNameDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSTextFinderCaseInsensitiveKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSTextFinderMatchingTypeKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSTextInputContextKeyboardSelectionDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextLayoutSectionOrientation' declared_type='NSString*' type='@'/>
<constant name='NSTextLayoutSectionRange' declared_type='NSString*' type='@'/>
<constant name='NSTextLayoutSectionsAttribute' declared_type='NSString*' type='@'/>
<constant name='NSTextLineTooLongException' declared_type='NSString*' type='@'/>
<constant name='NSTextNoSelectionException' declared_type='NSString*' type='@'/>
<constant name='NSTextReadException' declared_type='NSString*' type='@'/>
<constant name='NSTextSizeMultiplierDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSTextStorageDidProcessEditingNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextStorageWillProcessEditingNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextViewDidChangeSelectionNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextViewDidChangeTypingAttributesNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextViewWillChangeNotifyingTextViewNotification' declared_type='NSString*' type='@'/>
<constant name='NSTextWriteException' declared_type='NSString*' type='@'/>
<constant name='NSTimeoutDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSTitleBinding' declared_type='NSString*' type='@'/>
<constant name='NSTitleDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSToolTipAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSToolTipBinding' declared_type='NSString*' type='@'/>
<constant name='NSToolbarCustomizeToolbarItemIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSToolbarDidRemoveItemNotification' declared_type='NSString*' type='@'/>
<constant name='NSToolbarFlexibleSpaceItemIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSToolbarPrintItemIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSToolbarSeparatorItemIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSToolbarShowColorsItemIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSToolbarShowFontsItemIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSToolbarSpaceItemIdentifier' declared_type='NSString*' type='@'/>
<constant name='NSToolbarWillAddItemNotification' declared_type='NSString*' type='@'/>
<constant name='NSTopMarginDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSTransparentBinding' declared_type='NSString*' type='@'/>
<constant name='NSTypedStreamVersionException' declared_type='NSString*' type='@'/>
<constant name='NSURLPboardType' declared_type='NSString*' type='@'/>
<constant name='NSUnderlineByWordMask' declared_type='NSUInteger' type64='Q' type='I'/>
<constant name='NSUnderlineColorAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSUnderlineStrikethroughMask' declared_type='NSUInteger' type64='Q' type='I'/>
<constant name='NSUnderlineStyleAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSVCardPboardType' declared_type='NSString*' type='@'/>
<constant name='NSValidatesImmediatelyBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSValuePathBinding' declared_type='NSString*' type='@'/>
<constant name='NSValueTransformerBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSValueTransformerNameBindingOption' declared_type='NSString*' type='@'/>
<constant name='NSValueURLBinding' declared_type='NSString*' type='@'/>
<constant name='NSVerticalGlyphFormAttributeName' declared_type='NSString*' type='@'/>
<constant name='NSViewAnimationEffectKey' declared_type='NSString*' type='@'/>
<constant name='NSViewAnimationEndFrameKey' declared_type='NSString*' type='@'/>
<constant name='NSViewAnimationFadeInEffect' declared_type='NSString*' type='@'/>
<constant name='NSViewAnimationFadeOutEffect' declared_type='NSString*' type='@'/>
<constant name='NSViewAnimationStartFrameKey' declared_type='NSString*' type='@'/>
<constant name='NSViewAnimationTargetKey' declared_type='NSString*' type='@'/>
<constant name='NSViewBoundsDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSViewDidUpdateTrackingAreasNotification' declared_type='NSString*' type='@'/>
<constant name='NSViewFocusDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSViewFrameDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSViewGlobalFrameDidChangeNotification' declared_type='NSString*' type='@'/>
<constant name='NSViewModeDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSViewNoInstrinsicMetric' declared_type='CGFloat' type64='d' const='true' type='f'/>
<constant name='NSViewSizeDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSViewZoomDocumentAttribute' declared_type='NSString*' type='@'/>
<constant name='NSVisibleBinding' declared_type='NSString*' type='@'/>
<constant name='NSVoiceAge' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceDemoText' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceGender' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceGenderFemale' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceGenderMale' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceGenderNeuter' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceIdentifier' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceIndividuallySpokenCharacters' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceLanguage' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceLocaleIdentifier' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceName' declared_type='NSString*' const='true' type='@'/>
<constant name='NSVoiceSupportedCharacters' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWarningValueBinding' declared_type='NSString*' type='@'/>
<constant name='NSWebArchiveTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSWebPreferencesDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSWebResourceLoadDelegateDocumentOption' declared_type='NSString*' type='@'/>
<constant name='NSWhite' declared_type='CGFloat' type64='d' const='true' type='f'/>
<constant name='NSWidthBinding' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidBecomeKeyNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidBecomeMainNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidChangeScreenNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidChangeScreenProfileNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidDeminiaturizeNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidEndLiveResizeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowDidEndSheetNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidEnterFullScreenNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowDidEnterVersionBrowserNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowDidExitFullScreenNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowDidExitVersionBrowserNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowDidExposeNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidMiniaturizeNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidMoveNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidResignKeyNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidResignMainNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidResizeNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowDidUpdateNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowServerCommunicationException' declared_type='NSString*' type='@'/>
<constant name='NSWindowWillBeginSheetNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowWillCloseNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowWillEnterFullScreenNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowWillEnterVersionBrowserNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowWillExitFullScreenNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowWillExitVersionBrowserNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWindowWillMiniaturizeNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowWillMoveNotification' declared_type='NSString*' type='@'/>
<constant name='NSWindowWillStartLiveResizeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWordMLTextDocumentType' declared_type='NSString*' type='@'/>
<constant name='NSWordTablesReadException' declared_type='NSString*' type='@'/>
<constant name='NSWordTablesWriteException' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceActiveSpaceDidChangeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceApplicationKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceCompressOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceCopyOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDecompressOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDecryptOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDesktopImageAllowClippingKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDesktopImageFillColorKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDesktopImageScalingKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDestroyOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDidActivateApplicationNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDidChangeFileLabelsNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDidDeactivateApplicationNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDidHideApplicationNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDidLaunchApplicationNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDidMountNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDidPerformFileOperationNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDidRenameVolumeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDidTerminateApplicationNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDidUnhideApplicationNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceDidUnmountNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDidWakeNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceDuplicateOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceEncryptOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceLaunchConfigurationAppleEvent' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceLaunchConfigurationArchitecture' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceLaunchConfigurationArguments' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceLaunchConfigurationEnvironment' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceLinkOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceMoveOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceRecycleOperation' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceScreensDidSleepNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceScreensDidWakeNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceSessionDidBecomeActiveNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceSessionDidResignActiveNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceVolumeLocalizedNameKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceVolumeOldLocalizedNameKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceVolumeOldURLKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceVolumeURLKey' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceWillLaunchApplicationNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceWillPowerOffNotification' declared_type='NSString*' const='true' type='@'/>
<constant name='NSWorkspaceWillSleepNotification' declared_type='NSString*' type='@'/>
<constant name='NSWorkspaceWillUnmountNotification' declared_type='NSString*' type='@'/>
<constant name='NSWritingDirectionAttributeName' declared_type='NSString*' type='@'/>
<enum name='NSAWTEventType' value='16'/>
<enum name='NSAboveBottom' value='4'/>
<enum name='NSAboveTop' value='1'/>
<enum name='NSAddTraitFontAction' value='2'/>
<enum name='NSAdobeCNS1CharacterCollection' value='1'/>
<enum name='NSAdobeGB1CharacterCollection' value='2'/>
<enum name='NSAdobeJapan1CharacterCollection' value='3'/>
<enum name='NSAdobeJapan2CharacterCollection' value='4'/>
<enum name='NSAdobeKorea1CharacterCollection' value='5'/>
<enum name='NSAlertAlternateReturn' value='0'/>
<enum name='NSAlertDefaultReturn' value='1'/>
<enum name='NSAlertErrorReturn' value='-2'/>
<enum name='NSAlertFirstButtonReturn' value='1000'/>
<enum name='NSAlertOtherReturn' value='-1'/>
<enum name='NSAlertSecondButtonReturn' value='1001'/>
<enum name='NSAlertThirdButtonReturn' value='1002'/>
<enum name='NSAllScrollerParts' value='2'/>
<enum name='NSAlphaFirstBitmapFormat' value='1'/>
<enum name='NSAlphaNonpremultipliedBitmapFormat' value='2'/>
<enum name='NSAlphaShiftKeyMask' value='65536'/>
<enum name='NSAlternateKeyMask' value='524288'/>
<enum name='NSAnimationBlocking' value='0'/>
<enum name='NSAnimationEaseIn' value='1'/>
<enum name='NSAnimationEaseInOut' value='0'/>
<enum name='NSAnimationEaseOut' value='2'/>
<enum name='NSAnimationEffectDisappearingItemDefault' value='0'/>
<enum name='NSAnimationEffectPoof' value='10'/>
<enum name='NSAnimationLinear' value='3'/>
<enum name='NSAnimationNonblocking' value='1'/>
<enum name='NSAnimationNonblockingThreaded' value='2'/>
<enum name='NSAnyEventMask' value64='18446744073709551615' value='4294967295'/>
<enum name='NSAnyType' value='0'/>
<enum name='NSAppKitDefined' value='13'/>
<enum name='NSAppKitDefinedMask' value='8192'/>
<enum name='NSAppKitVersionNumber10_0' value='577'/>
<enum name='NSAppKitVersionNumber10_1' value='620'/>
<enum name='NSAppKitVersionNumber10_2' value='663'/>
<enum name='NSAppKitVersionNumber10_2_3' value='663.6'/>
<enum name='NSAppKitVersionNumber10_3' value='743'/>
<enum name='NSAppKitVersionNumber10_3_2' value='743.14'/>
<enum name='NSAppKitVersionNumber10_3_3' value='743.2'/>
<enum name='NSAppKitVersionNumber10_3_5' value='743.24'/>
<enum name='NSAppKitVersionNumber10_3_7' value='743.33'/>
<enum name='NSAppKitVersionNumber10_3_9' value='743.36'/>
<enum name='NSAppKitVersionNumber10_4' value='824'/>
<enum name='NSAppKitVersionNumber10_4_1' value='824.1'/>
<enum name='NSAppKitVersionNumber10_4_3' value='824.23'/>
<enum name='NSAppKitVersionNumber10_4_4' value='824.33'/>
<enum name='NSAppKitVersionNumber10_4_7' value='824.41'/>
<enum name='NSAppKitVersionNumber10_5' value='949'/>
<enum name='NSAppKitVersionNumber10_5_2' value='949.27'/>
<enum name='NSAppKitVersionNumber10_5_3' value='949.33'/>
<enum name='NSAppKitVersionNumber10_6' value='1038'/>
<enum name='NSAppKitVersionNumberWithColumnResizingBrowser' value='685.0'/>
<enum name='NSAppKitVersionNumberWithContinuousScrollingBrowser' value='680.0'/>
<enum name='NSAppKitVersionNumberWithCursorSizeSupport' value='682.0'/>
<enum name='NSAppKitVersionNumberWithCustomSheetPosition' value='686.0'/>
<enum name='NSAppKitVersionNumberWithDeferredWindowDisplaySupport' value='1019.0'/>
<enum name='NSAppKitVersionNumberWithDirectionalTabs' value='631.0'/>
<enum name='NSAppKitVersionNumberWithDockTilePlugInSupport' value='1001.0'/>
<enum name='NSAppKitVersionNumberWithPatternColorLeakFix' value='641.0'/>
<enum name='NSApplicationActivateAllWindows' value='1'/>
<enum name='NSApplicationActivateIgnoringOtherApps' value='2'/>
<enum name='NSApplicationActivatedEventType' value='1'/>
<enum name='NSApplicationActivationPolicyAccessory' value='1'/>
<enum name='NSApplicationActivationPolicyProhibited' value='2'/>
<enum name='NSApplicationActivationPolicyRegular' value='0'/>
<enum name='NSApplicationDeactivatedEventType' value='2'/>
<enum name='NSApplicationDefined' value='15'/>
<enum name='NSApplicationDefinedMask' value='32768'/>
<enum name='NSApplicationDelegateReplyCancel' value='1'/>
<enum name='NSApplicationDelegateReplyFailure' value='2'/>
<enum name='NSApplicationDelegateReplySuccess' value='0'/>
<enum name='NSApplicationPresentationAutoHideDock' value='1'/>
<enum name='NSApplicationPresentationAutoHideMenuBar' value='4'/>
<enum name='NSApplicationPresentationAutoHideToolbar' value='2048'/>
<enum name='NSApplicationPresentationDefault' value='0'/>
<enum name='NSApplicationPresentationDisableAppleMenu' value='16'/>
<enum name='NSApplicationPresentationDisableForceQuit' value='64'/>
<enum name='NSApplicationPresentationDisableHideApplication' value='256'/>
<enum name='NSApplicationPresentationDisableMenuBarTransparency' value='512'/>
<enum name='NSApplicationPresentationDisableProcessSwitching' value='32'/>
<enum name='NSApplicationPresentationDisableSessionTermination' value='128'/>
<enum name='NSApplicationPresentationFullScreen' value='1024'/>
<enum name='NSApplicationPresentationHideDock' value='2'/>
<enum name='NSApplicationPresentationHideMenuBar' value='8'/>
<enum name='NSAscendingPageOrder' value='1'/>
<enum name='NSAtBottom' value='5'/>
<enum name='NSAtTop' value='2'/>
<enum name='NSAttachmentCharacter' value='65532'/>
<enum name='NSAutoPagination' value='0'/>
<enum name='NSAutosaveElsewhereOperation' value='3'/>
<enum name='NSAutosaveInPlaceOperation' value='4'/>
<enum name='NSAutosaveOperation' value='3'/>
<enum name='NSBMPFileType' value='1'/>
<enum name='NSBackTabCharacter' value='25'/>
<enum name='NSBackgroundStyleDark' value='1'/>
<enum name='NSBackgroundStyleLight' value='0'/>
<enum name='NSBackgroundStyleLowered' value='3'/>
<enum name='NSBackgroundStyleRaised' value='2'/>
<enum name='NSBackgroundTab' value='1'/>
<enum name='NSBackingStoreBuffered' value='2'/>
<enum name='NSBackingStoreNonretained' value='1'/>
<enum name='NSBackingStoreRetained' value='0'/>
<enum name='NSBackspaceCharacter' value='8'/>
<enum name='NSBacktabTextMovement' value='18'/>
<enum name='NSBeginFunctionKey' value='63274'/>
<enum name='NSBelowBottom' value='6'/>
<enum name='NSBelowTop' value='3'/>
<enum name='NSBevelLineJoinStyle' value='2'/>
<enum name='NSBezelBorder' value='2'/>
<enum name='NSBlueControlTint' value='1'/>
<enum name='NSBoldFontMask' value='2'/>
<enum name='NSBorderlessWindowMask' value='0'/>
<enum name='NSBottomTabsBezelBorder' value='2'/>
<enum name='NSBoxCustom' value='4'/>
<enum name='NSBoxOldStyle' value='3'/>
<enum name='NSBoxPrimary' value='0'/>
<enum name='NSBoxSecondary' value='1'/>
<enum name='NSBoxSeparator' value='2'/>
<enum name='NSBreakFunctionKey' value='63282'/>
<enum name='NSBrowserAutoColumnResizing' value='1'/>
<enum name='NSBrowserDropAbove' value='1'/>
<enum name='NSBrowserDropOn' value='0'/>
<enum name='NSBrowserNoColumnResizing' value='0'/>
<enum name='NSBrowserUserColumnResizing' value='2'/>
<enum name='NSButtLineCapStyle' value='0'/>
<enum name='NSCMYKColorSpaceModel' value='2'/>
<enum name='NSCMYKModeColorPanel' value='2'/>
<enum name='NSCancelButton' value='0'/>
<enum name='NSCancelTextMovement' value='23'/>
<enum name='NSCarriageReturnCharacter' value='13'/>
<enum name='NSCellAllowsMixedState' value='16'/>
<enum name='NSCellChangesContents' value='14'/>
<enum name='NSCellDisabled' value='0'/>
<enum name='NSCellEditable' value='3'/>
<enum name='NSCellHasImageHorizontal' value='12'/>
<enum name='NSCellHasImageOnLeftOrBottom' value='13'/>
<enum name='NSCellHasOverlappingImage' value='11'/>
<enum name='NSCellHighlighted' value='5'/>
<enum name='NSCellHitContentArea' value='1'/>
<enum name='NSCellHitEditableTextArea' value='2'/>
<enum name='NSCellHitNone' value='0'/>
<enum name='NSCellHitTrackableArea' value='4'/>
<enum name='NSCellIsBordered' value='10'/>
<enum name='NSCellIsInsetButton' value='15'/>
<enum name='NSCellLightsByBackground' value='9'/>
<enum name='NSCellLightsByContents' value='6'/>
<enum name='NSCellLightsByGray' value='7'/>
<enum name='NSCellState' value='1'/>
<enum name='NSCenterTabStopType' value='2'/>
<enum name='NSCenterTextAlignment' value='2'/>
<enum name='NSChangeAutosaved' value='4'/>
<enum name='NSChangeBackgroundCell' value='8'/>
<enum name='NSChangeBackgroundCellMask' value='8'/>
<enum name='NSChangeCleared' value='2'/>
<enum name='NSChangeDiscardable' value='256'/>
<enum name='NSChangeDone' value='0'/>
<enum name='NSChangeGrayCell' value='4'/>
<enum name='NSChangeGrayCellMask' value='4'/>
<enum name='NSChangeReadOtherContents' value='3'/>
<enum name='NSChangeRedone' value='5'/>
<enum name='NSChangeUndone' value='1'/>
<enum name='NSCircularBezelStyle' value='7'/>
<enum name='NSCircularSlider' value='1'/>
<enum name='NSClearControlTint' value='7'/>
<enum name='NSClearDisplayFunctionKey' value='63290'/>
<enum name='NSClearLineFunctionKey' value='63289'/>
<enum name='NSClipPagination' value='2'/>
<enum name='NSClockAndCalendarDatePickerStyle' value='1'/>
<enum name='NSClosableWindowMask' value='2'/>
<enum name='NSClosePathBezierPathElement' value='3'/>
<enum name='NSCollectionViewDropBefore' value='1'/>
<enum name='NSCollectionViewDropOn' value='0'/>
<enum name='NSColorListModeColorPanel' value='5'/>
<enum name='NSColorPanelAllModesMask' value='65535'/>
<enum name='NSColorPanelCMYKModeMask' value='4'/>
<enum name='NSColorPanelColorListModeMask' value='32'/>
<enum name='NSColorPanelCrayonModeMask' value='128'/>
<enum name='NSColorPanelCustomPaletteModeMask' value='16'/>
<enum name='NSColorPanelGrayModeMask' value='1'/>
<enum name='NSColorPanelHSBModeMask' value='8'/>
<enum name='NSColorPanelRGBModeMask' value='2'/>
<enum name='NSColorPanelWheelModeMask' value='64'/>
<enum name='NSColorRenderingIntentAbsoluteColorimetric' value='1'/>
<enum name='NSColorRenderingIntentDefault' value='0'/>
<enum name='NSColorRenderingIntentPerceptual' value='3'/>
<enum name='NSColorRenderingIntentRelativeColorimetric' value='2'/>
<enum name='NSColorRenderingIntentSaturation' value='4'/>
<enum name='NSCommandKeyMask' value='1048576'/>
<enum name='NSCompositeClear' value='0'/>
<enum name='NSCompositeCopy' value='1'/>
<enum name='NSCompositeDestinationAtop' value='9'/>
<enum name='NSCompositeDestinationIn' value='7'/>
<enum name='NSCompositeDestinationOut' value='8'/>
<enum name='NSCompositeDestinationOver' value='6'/>
<enum name='NSCompositeHighlight' value='12'/>
<enum name='NSCompositePlusDarker' value='11'/>
<enum name='NSCompositePlusLighter' value='13'/>
<enum name='NSCompositeSourceAtop' value='5'/>
<enum name='NSCompositeSourceIn' value='3'/>
<enum name='NSCompositeSourceOut' value='4'/>
<enum name='NSCompositeSourceOver' value='2'/>
<enum name='NSCompositeXOR' value='10'/>
<enum name='NSCompressedFontMask' value='512'/>
<enum name='NSCondensedFontMask' value='64'/>
<enum name='NSContentsCellMask' value='1'/>
<enum name='NSContinuousCapacityLevelIndicatorStyle' value='1'/>
<enum name='NSControlGlyph' value='16777215'/>
<enum name='NSControlKeyMask' value='262144'/>
<enum name='NSCorrectionIndicatorTypeDefault' value='0'/>
<enum name='NSCorrectionIndicatorTypeGuesses' value='2'/>
<enum name='NSCorrectionIndicatorTypeReversion' value='1'/>
<enum name='NSCorrectionResponseAccepted' value='1'/>
<enum name='NSCorrectionResponseEdited' value='4'/>
<enum name='NSCorrectionResponseIgnored' value='3'/>
<enum name='NSCorrectionResponseNone' value='0'/>
<enum name='NSCorrectionResponseRejected' value='2'/>
<enum name='NSCorrectionResponseReverted' value='5'/>
<enum name='NSCrayonModeColorPanel' value='7'/>
<enum name='NSCriticalAlertStyle' value='2'/>
<enum name='NSCriticalRequest' value='0'/>
<enum name='NSCursorPointingDevice' value='2'/>
<enum name='NSCursorUpdate' value='17'/>
<enum name='NSCursorUpdateMask' value='131072'/>
<enum name='NSCurveToBezierPathElement' value='2'/>
<enum name='NSCustomPaletteModeColorPanel' value='4'/>
<enum name='NSDecimalTabStopType' value='3'/>
<enum name='NSDefaultControlTint' value='0'/>
<enum name='NSDefaultTokenStyle' value='0'/>
<enum name='NSDeleteCharFunctionKey' value='63294'/>
<enum name='NSDeleteCharacter' value='127'/>
<enum name='NSDeleteFunctionKey' value='63272'/>
<enum name='NSDeleteLineFunctionKey' value='63292'/>
<enum name='NSDescendingPageOrder' value='-1'/>
<enum name='NSDeviceIndependentModifierFlagsMask' value='4294901760'/>
<enum name='NSDeviceNColorSpaceModel' value='4'/>
<enum name='NSDirectSelection' value='0'/>
<enum name='NSDisclosureBezelStyle' value='5'/>
<enum name='NSDiscreteCapacityLevelIndicatorStyle' value='2'/>
<enum name='NSDisplayWindowRunLoopOrdering' value='600000'/>
<enum name='NSDocModalWindowMask' value='64'/>
<enum name='NSDockWindowLevel' value='20'/>
<enum name='NSDoubleType' value='6'/>
<enum name='NSDownArrowFunctionKey' value='63233'/>
<enum name='NSDownTextMovement' value='22'/>
<enum name='NSDragOperationAll' value='15'/>
<enum name='NSDragOperationAll_Obsolete' value='15'/>
<enum name='NSDragOperationCopy' value='1'/>
<enum name='NSDragOperationDelete' value='32'/>
<enum name='NSDragOperationEvery' value64='18446744073709551615' value='4294967295'/>
<enum name='NSDragOperationGeneric' value='4'/>
<enum name='NSDragOperationLink' value='2'/>
<enum name='NSDragOperationMove' value='16'/>
<enum name='NSDragOperationNone' value='0'/>
<enum name='NSDragOperationPrivate' value='8'/>
<enum name='NSDraggingContextOutsideApplication' value='0'/>
<enum name='NSDraggingContextWithinApplication' value='1'/>
<enum name='NSDraggingFormationDefault' value='0'/>
<enum name='NSDraggingFormationList' value='3'/>
<enum name='NSDraggingFormationNone' value='1'/>
<enum name='NSDraggingFormationPile' value='2'/>
<enum name='NSDraggingFormationStack' value='4'/>
<enum name='NSDraggingItemEnumerationClearNonenumeratedImages' value='65536'/>
<enum name='NSDraggingItemEnumerationConcurrent' value='1'/>
<enum name='NSDrawerClosedState' value='0'/>
<enum name='NSDrawerClosingState' value='3'/>
<enum name='NSDrawerOpenState' value='2'/>
<enum name='NSDrawerOpeningState' value='1'/>
<enum name='NSEndFunctionKey' value='63275'/>
<enum name='NSEnterCharacter' value='3'/>
<enum name='NSEraDatePickerElementFlag' value='256'/>
<enum name='NSEraserPointingDevice' value='3'/>
<enum name='NSEvenOddWindingRule' value='1'/>
<enum name='NSEventGestureAxisHorizontal' value='1'/>
<enum name='NSEventGestureAxisNone' value='0'/>
<enum name='NSEventGestureAxisVertical' value='2'/>
<enum name='NSEventMaskBeginGesture' value='524288'/>
<enum name='NSEventMaskEndGesture' value='1048576'/>
<enum name='NSEventMaskGesture' value='536870912'/>
<enum name='NSEventMaskMagnify' value='1073741824'/>
<enum name='NSEventMaskRotate' value='262144'/>
<enum name='NSEventMaskSwipe' value='2147483648'/>
<enum name='NSEventPhaseBegan' value='1'/>
<enum name='NSEventPhaseCancelled' value='16'/>
<enum name='NSEventPhaseChanged' value='4'/>
<enum name='NSEventPhaseEnded' value='8'/>
<enum name='NSEventPhaseNone' value='0'/>
<enum name='NSEventPhaseStationary' value='2'/>
<enum name='NSEventSwipeTrackingClampGestureAmount' value='2'/>
<enum name='NSEventSwipeTrackingLockDirection' value='1'/>
<enum name='NSEventTypeBeginGesture' value='19'/>
<enum name='NSEventTypeEndGesture' value='20'/>
<enum name='NSEventTypeGesture' value='29'/>
<enum name='NSEventTypeMagnify' value='30'/>
<enum name='NSEventTypeRotate' value='18'/>
<enum name='NSEventTypeSwipe' value='31'/>
<enum name='NSExclude10_4ElementsIconCreationOption' value='4'/>
<enum name='NSExcludeQuickDrawElementsIconCreationOption' value='2'/>
<enum name='NSExecuteFunctionKey' value='63298'/>
<enum name='NSExpandedFontMask' value='32'/>
<enum name='NSF10FunctionKey' value='63245'/>
<enum name='NSF11FunctionKey' value='63246'/>
<enum name='NSF12FunctionKey' value='63247'/>
<enum name='NSF13FunctionKey' value='63248'/>
<enum name='NSF14FunctionKey' value='63249'/>
<enum name='NSF15FunctionKey' value='63250'/>
<enum name='NSF16FunctionKey' value='63251'/>
<enum name='NSF17FunctionKey' value='63252'/>
<enum name='NSF18FunctionKey' value='63253'/>
<enum name='NSF19FunctionKey' value='63254'/>
<enum name='NSF1FunctionKey' value='63236'/>
<enum name='NSF20FunctionKey' value='63255'/>
<enum name='NSF21FunctionKey' value='63256'/>
<enum name='NSF22FunctionKey' value='63257'/>
<enum name='NSF23FunctionKey' value='63258'/>
<enum name='NSF24FunctionKey' value='63259'/>
<enum name='NSF25FunctionKey' value='63260'/>
<enum name='NSF26FunctionKey' value='63261'/>
<enum name='NSF27FunctionKey' value='63262'/>
<enum name='NSF28FunctionKey' value='63263'/>
<enum name='NSF29FunctionKey' value='63264'/>
<enum name='NSF2FunctionKey' value='63237'/>
<enum name='NSF30FunctionKey' value='63265'/>
<enum name='NSF31FunctionKey' value='63266'/>
<enum name='NSF32FunctionKey' value='63267'/>
<enum name='NSF33FunctionKey' value='63268'/>
<enum name='NSF34FunctionKey' value='63269'/>
<enum name='NSF35FunctionKey' value='63270'/>
<enum name='NSF3FunctionKey' value='63238'/>
<enum name='NSF4FunctionKey' value='63239'/>
<enum name='NSF5FunctionKey' value='63240'/>
<enum name='NSF6FunctionKey' value='63241'/>
<enum name='NSF7FunctionKey' value='63242'/>
<enum name='NSF8FunctionKey' value='63243'/>
<enum name='NSF9FunctionKey' value='63244'/>
<enum name='NSFPCurrentField' value='134'/>
<enum name='NSFPPreviewButton' value='131'/>
<enum name='NSFPPreviewField' value='128'/>
<enum name='NSFPRevertButton' value='130'/>
<enum name='NSFPSetButton' value='132'/>
<enum name='NSFPSizeField' value='129'/>
<enum name='NSFPSizeTitle' value='133'/>
<enum name='NSFileHandlingPanelCancelButton' value='0'/>
<enum name='NSFileHandlingPanelOKButton' value='1'/>
<enum name='NSFindFunctionKey' value='63301'/>
<enum name='NSFindPanelActionNext' value='2'/>
<enum name='NSFindPanelActionPrevious' value='3'/>
<enum name='NSFindPanelActionReplace' value='5'/>
<enum name='NSFindPanelActionReplaceAll' value='4'/>
<enum name='NSFindPanelActionReplaceAllInSelection' value='8'/>
<enum name='NSFindPanelActionReplaceAndFind' value='6'/>
<enum name='NSFindPanelActionSelectAll' value='9'/>
<enum name='NSFindPanelActionSelectAllInSelection' value='10'/>
<enum name='NSFindPanelActionSetFindString' value='7'/>
<enum name='NSFindPanelActionShowFindPanel' value='1'/>
<enum name='NSFindPanelSubstringMatchTypeContains' value='0'/>
<enum name='NSFindPanelSubstringMatchTypeEndsWith' value='3'/>
<enum name='NSFindPanelSubstringMatchTypeFullWord' value='2'/>
<enum name='NSFindPanelSubstringMatchTypeStartsWith' value='1'/>
<enum name='NSFitPagination' value='1'/>
<enum name='NSFixedPitchFontMask' value='1024'/>
<enum name='NSFlagsChanged' value='12'/>
<enum name='NSFlagsChangedMask' value='4096'/>
<enum name='NSFloatType' value='3'/>
<enum name='NSFloatingPointSamplesBitmapFormat' value='4'/>
<enum name='NSFloatingWindowLevel' value='3'/>
<enum name='NSFocusRingAbove' value='2'/>
<enum name='NSFocusRingBelow' value='1'/>
<enum name='NSFocusRingOnly' value='0'/>
<enum name='NSFocusRingTypeDefault' value='0'/>
<enum name='NSFocusRingTypeExterior' value='2'/>
<enum name='NSFocusRingTypeNone' value='1'/>
<enum name='NSFontAntialiasedIntegerAdvancementsRenderingMode' value='3'/>
<enum name='NSFontAntialiasedRenderingMode' value='1'/>
<enum name='NSFontBoldTrait' value='2'/>
<enum name='NSFontClarendonSerifsClass' value='1073741824'/>
<enum name='NSFontCollectionApplicationOnlyMask' value='1'/>
<enum name='NSFontCollectionVisibilityComputer' value='4'/>
<enum name='NSFontCollectionVisibilityProcess' value='1'/>
<enum name='NSFontCollectionVisibilityUser' value='2'/>
<enum name='NSFontCondensedTrait' value='64'/>
<enum name='NSFontDefaultRenderingMode' value='0'/>
<enum name='NSFontExpandedTrait' value='32'/>
<enum name='NSFontFamilyClassMask' value='4026531840'/>
<enum name='NSFontFreeformSerifsClass' value='1879048192'/>
<enum name='NSFontIntegerAdvancementsRenderingMode' value='2'/>
<enum name='NSFontItalicTrait' value='1'/>
<enum name='NSFontModernSerifsClass' value='805306368'/>
<enum name='NSFontMonoSpaceTrait' value='1024'/>
<enum name='NSFontOldStyleSerifsClass' value='268435456'/>
<enum name='NSFontOrnamentalsClass' value='-1879048192'/>
<enum name='NSFontPanelAllEffectsModeMask' value='1048320'/>
<enum name='NSFontPanelAllModesMask' value='4294967295'/>
<enum name='NSFontPanelCollectionModeMask' value='4'/>
<enum name='NSFontPanelDocumentColorEffectModeMask' value='2048'/>
<enum name='NSFontPanelFaceModeMask' value='1'/>
<enum name='NSFontPanelShadowEffectModeMask' value='4096'/>
<enum name='NSFontPanelSizeModeMask' value='2'/>
<enum name='NSFontPanelStandardModesMask' value='65535'/>
<enum name='NSFontPanelStrikethroughEffectModeMask' value='512'/>
<enum name='NSFontPanelTextColorEffectModeMask' value='1024'/>
<enum name='NSFontPanelUnderlineEffectModeMask' value='256'/>
<enum name='NSFontSansSerifClass' value='-2147483648'/>
<enum name='NSFontScriptsClass' value='-1610612736'/>
<enum name='NSFontSlabSerifsClass' value='1342177280'/>
<enum name='NSFontSymbolicClass' value='-1073741824'/>
<enum name='NSFontTransitionalSerifsClass' value='536870912'/>
<enum name='NSFontUIOptimizedTrait' value='4096'/>
<enum name='NSFontUnknownClass' value='0'/>
<enum name='NSFontVerticalTrait' value='2048'/>
<enum name='NSFormFeedCharacter' value='12'/>
<enum name='NSFullScreenWindowMask' value='16384'/>
<enum name='NSFunctionKeyMask' value='8388608'/>
<enum name='NSGIFFileType' value='2'/>
<enum name='NSGlyphAttributeBidiLevel' value='2'/>
<enum name='NSGlyphAttributeElastic' value='1'/>
<enum name='NSGlyphAttributeInscribe' value='5'/>
<enum name='NSGlyphAttributeSoft' value='0'/>
<enum name='NSGlyphInscribeAbove' value='2'/>
<enum name='NSGlyphInscribeBase' value='0'/>
<enum name='NSGlyphInscribeBelow' value='1'/>
<enum name='NSGlyphInscribeOverBelow' value='4'/>
<enum name='NSGlyphInscribeOverstrike' value='3'/>
<enum name='NSGradientConcaveStrong' value='2'/>
<enum name='NSGradientConcaveWeak' value='1'/>
<enum name='NSGradientConvexStrong' value='4'/>
<enum name='NSGradientConvexWeak' value='3'/>
<enum name='NSGradientDrawsAfterEndingLocation' value='2'/>
<enum name='NSGradientDrawsBeforeStartingLocation' value='1'/>
<enum name='NSGradientNone' value='0'/>
<enum name='NSGraphiteControlTint' value='6'/>
<enum name='NSGrayColorSpaceModel' value='0'/>
<enum name='NSGrayModeColorPanel' value='0'/>
<enum name='NSGrooveBorder' value='3'/>
<enum name='NSHSBModeColorPanel' value='3'/>
<enum name='NSHUDWindowMask' value='8192'/>
<enum name='NSHeavierFontAction' value='5'/>
<enum name='NSHelpButtonBezelStyle' value='9'/>
<enum name='NSHelpFunctionKey' value='63302'/>
<enum name='NSHelpKeyMask' value='4194304'/>
<enum name='NSHighlightModeMatrix' value='1'/>
<enum name='NSHomeFunctionKey' value='63273'/>
<enum name='NSHorizontalRuler' value='0'/>
<enum name='NSHourMinuteDatePickerElementFlag' value='12'/>
<enum name='NSHourMinuteSecondDatePickerElementFlag' value='14'/>
<enum name='NSIdentityMappingCharacterCollection' value='0'/>
<enum name='NSIllegalTextMovement' value='0'/>
<enum name='NSImageAbove' value='5'/>
<enum name='NSImageAlignBottom' value='5'/>
<enum name='NSImageAlignBottomLeft' value='6'/>
<enum name='NSImageAlignBottomRight' value='7'/>
<enum name='NSImageAlignCenter' value='0'/>
<enum name='NSImageAlignLeft' value='4'/>
<enum name='NSImageAlignRight' value='8'/>
<enum name='NSImageAlignTop' value='1'/>
<enum name='NSImageAlignTopLeft' value='2'/>
<enum name='NSImageAlignTopRight' value='3'/>
<enum name='NSImageBelow' value='4'/>
<enum name='NSImageCacheAlways' value='1'/>
<enum name='NSImageCacheBySize' value='2'/>
<enum name='NSImageCacheDefault' value='0'/>
<enum name='NSImageCacheNever' value='3'/>
<enum name='NSImageCellType' value='2'/>
<enum name='NSImageFrameButton' value='4'/>
<enum name='NSImageFrameGrayBezel' value='2'/>
<enum name='NSImageFrameGroove' value='3'/>
<enum name='NSImageFrameNone' value='0'/>
<enum name='NSImageFramePhoto' value='1'/>
<enum name='NSImageInterpolationDefault' value='0'/>
<enum name='NSImageInterpolationHigh' value='3'/>
<enum name='NSImageInterpolationLow' value='2'/>
<enum name='NSImageInterpolationMedium' value='4'/>
<enum name='NSImageInterpolationNone' value='1'/>
<enum name='NSImageLeft' value='2'/>
<enum name='NSImageLoadStatusCancelled' value='1'/>
<enum name='NSImageLoadStatusCompleted' value='0'/>
<enum name='NSImageLoadStatusInvalidData' value='2'/>
<enum name='NSImageLoadStatusReadError' value='4'/>
<enum name='NSImageLoadStatusUnexpectedEOF' value='3'/>
<enum name='NSImageOnly' value='1'/>
<enum name='NSImageOverlaps' value='6'/>
<enum name='NSImageRepLoadStatusCompleted' value='-6'/>
<enum name='NSImageRepLoadStatusInvalidData' value='-4'/>
<enum name='NSImageRepLoadStatusReadingHeader' value='-2'/>
<enum name='NSImageRepLoadStatusUnexpectedEOF' value='-5'/>
<enum name='NSImageRepLoadStatusUnknownType' value='-1'/>
<enum name='NSImageRepLoadStatusWillNeedAllData' value='-3'/>
<enum name='NSImageRepMatchesDevice' value='0'/>
<enum name='NSImageRight' value='3'/>
<enum name='NSImageScaleAxesIndependently' value='1'/>
<enum name='NSImageScaleNone' value='2'/>
<enum name='NSImageScaleProportionallyDown' value='0'/>
<enum name='NSImageScaleProportionallyUpOrDown' value='3'/>
<enum name='NSIndexedColorSpaceModel' value='5'/>
<enum name='NSInformationalAlertStyle' value='1'/>
<enum name='NSInformationalRequest' value='10'/>
<enum name='NSInlineBezelStyle' value='15'/>
<enum name='NSInsertCharFunctionKey' value='63293'/>
<enum name='NSInsertFunctionKey' value='63271'/>
<enum name='NSInsertLineFunctionKey' value='63291'/>
<enum name='NSIntType' value='1'/>
<enum name='NSItalicFontMask' value='1'/>
<enum name='NSJPEG2000FileType' value='5'/>
<enum name='NSJPEGFileType' value='3'/>
<enum name='NSJustifiedTextAlignment' value='3'/>
<enum name='NSKeyDown' value='10'/>
<enum name='NSKeyDownMask' value='1024'/>
<enum name='NSKeyUp' value='11'/>
<enum name='NSKeyUpMask' value='2048'/>
<enum name='NSLABColorSpaceModel' value='3'/>
<enum name='NSLandscapeOrientation' value='1'/>
<enum name='NSLayoutAttributeBaseline' value='11'/>
<enum name='NSLayoutAttributeBottom' value='4'/>
<enum name='NSLayoutAttributeCenterX' value='9'/>
<enum name='NSLayoutAttributeCenterY' value='10'/>
<enum name='NSLayoutAttributeHeight' value='8'/>
<enum name='NSLayoutAttributeLeading' value='5'/>
<enum name='NSLayoutAttributeLeft' value='1'/>
<enum name='NSLayoutAttributeNotAnAttribute' value='0'/>
<enum name='NSLayoutAttributeRight' value='2'/>
<enum name='NSLayoutAttributeTop' value='3'/>
<enum name='NSLayoutAttributeTrailing' value='6'/>
<enum name='NSLayoutAttributeWidth' value='7'/>
<enum name='NSLayoutConstraintOrientationHorizontal' value='0'/>
<enum name='NSLayoutConstraintOrientationVertical' value='1'/>
<enum name='NSLayoutFormatAlignAllBaseline' value='2048'/>
<enum name='NSLayoutFormatAlignAllBottom' value='16'/>
<enum name='NSLayoutFormatAlignAllCenterX' value='512'/>
<enum name='NSLayoutFormatAlignAllCenterY' value='1024'/>
<enum name='NSLayoutFormatAlignAllLeading' value='32'/>
<enum name='NSLayoutFormatAlignAllLeft' value='2'/>
<enum name='NSLayoutFormatAlignAllRight' value='4'/>
<enum name='NSLayoutFormatAlignAllTop' value='8'/>
<enum name='NSLayoutFormatAlignAllTrailing' value='64'/>
<enum name='NSLayoutFormatAlignmentMask' value='65535'/>
<enum name='NSLayoutFormatDirectionLeadingToTrailing' value='0'/>
<enum name='NSLayoutFormatDirectionLeftToRight' value='65536'/>
<enum name='NSLayoutFormatDirectionMask' value='196608'/>
<enum name='NSLayoutFormatDirectionRightToLeft' value='131072'/>
<enum name='NSLayoutPriorityDefaultHigh' value='750'/>
<enum name='NSLayoutPriorityDefaultLow' value='250'/>
<enum name='NSLayoutPriorityDragThatCanResizeWindow' value='510'/>
<enum name='NSLayoutPriorityDragThatCannotResizeWindow' value='490'/>
<enum name='NSLayoutPriorityFittingSizeCompression' value='50'/>
<enum name='NSLayoutPriorityRequired' value='1000'/>
<enum name='NSLayoutPriorityWindowSizeStayPut' value='500'/>
<enum name='NSLayoutRelationEqual' value='0'/>
<enum name='NSLayoutRelationGreaterThanOrEqual' value='1'/>
<enum name='NSLayoutRelationLessThanOrEqual' value='-1'/>
<enum name='NSLeftArrowFunctionKey' value='63234'/>
<enum name='NSLeftMouseDown' value='1'/>
<enum name='NSLeftMouseDownMask' value='2'/>
<enum name='NSLeftMouseDragged' value='6'/>
<enum name='NSLeftMouseDraggedMask' value='64'/>
<enum name='NSLeftMouseUp' value='2'/>
<enum name='NSLeftMouseUpMask' value='4'/>
<enum name='NSLeftTabStopType' value='0'/>
<enum name='NSLeftTabsBezelBorder' value='1'/>
<enum name='NSLeftTextAlignment' value='0'/>
<enum name='NSLeftTextMovement' value='19'/>
<enum name='NSLighterFontAction' value='6'/>
<enum name='NSLineBorder' value='1'/>
<enum name='NSLineBreakByCharWrapping' value='1'/>
<enum name='NSLineBreakByClipping' value='2'/>
<enum name='NSLineBreakByTruncatingHead' value='3'/>
<enum name='NSLineBreakByTruncatingMiddle' value='5'/>
<enum name='NSLineBreakByTruncatingTail' value='4'/>
<enum name='NSLineBreakByWordWrapping' value='0'/>
<enum name='NSLineDoesntMove' value='0'/>
<enum name='NSLineMovesDown' value='3'/>
<enum name='NSLineMovesLeft' value='1'/>
<enum name='NSLineMovesRight' value='2'/>
<enum name='NSLineMovesUp' value='4'/>
<enum name='NSLineSeparatorCharacter' value='8232'/>
<enum name='NSLineSweepDown' value='2'/>
<enum name='NSLineSweepLeft' value='0'/>
<enum name='NSLineSweepRight' value='1'/>
<enum name='NSLineSweepUp' value='3'/>
<enum name='NSLineToBezierPathElement' value='1'/>
<enum name='NSLinearSlider' value='0'/>
<enum name='NSListModeMatrix' value='2'/>
<enum name='NSMacintoshInterfaceStyle' value='3'/>
<enum name='NSMainMenuWindowLevel' value='24'/>
<enum name='NSMenuFunctionKey' value='63285'/>
<enum name='NSMenuPropertyItemAccessibilityDescription' value='32'/>
<enum name='NSMenuPropertyItemAttributedTitle' value='2'/>
<enum name='NSMenuPropertyItemEnabled' value='16'/>
<enum name='NSMenuPropertyItemImage' value='8'/>
<enum name='NSMenuPropertyItemKeyEquivalent' value='4'/>
<enum name='NSMenuPropertyItemTitle' value='1'/>
<enum name='NSMiniControlSize' value='2'/>
<enum name='NSMiniaturizableWindowMask' value='4'/>
<enum name='NSMiterLineJoinStyle' value='0'/>
<enum name='NSMixedState' value='-1'/>
<enum name='NSModalPanelWindowLevel' value='8'/>
<enum name='NSModeSwitchFunctionKey' value='63303'/>
<enum name='NSMomentaryChangeButton' value='5'/>
<enum name='NSMomentaryLight' value='7'/>
<enum name='NSMomentaryLightButton' value='0'/>
<enum name='NSMomentaryPushButton' value='0'/>
<enum name='NSMomentaryPushInButton' value='7'/>
<enum name='NSMouseEntered' value='8'/>
<enum name='NSMouseEnteredMask' value='256'/>
<enum name='NSMouseEventSubtype' value='0'/>
<enum name='NSMouseExited' value='9'/>
<enum name='NSMouseExitedMask' value='512'/>
<enum name='NSMouseMoved' value='5'/>
<enum name='NSMouseMovedMask' value='32'/>
<enum name='NSMoveToBezierPathElement' value='0'/>
<enum name='NSNarrowFontMask' value='16'/>
<enum name='NSNativeShortGlyphPacking' value='5'/>
<enum name='NSNaturalTextAlignment' value='4'/>
<enum name='NSNewlineCharacter' value='10'/>
<enum name='NSNextFunctionKey' value='63296'/>
<enum name='NSNextStepInterfaceStyle' value='1'/>
<enum name='NSNoBorder' value='0'/>
<enum name='NSNoCellMask' value='0'/>
<enum name='NSNoFontChangeAction' value='0'/>
<enum name='NSNoImage' value='0'/>
<enum name='NSNoInterfaceStyle' value='0'/>
<enum name='NSNoModeColorPanel' value='-1'/>
<enum name='NSNoScrollerParts' value='0'/>
<enum name='NSNoTabsBezelBorder' value='4'/>
<enum name='NSNoTabsLineBorder' value='5'/>
<enum name='NSNoTabsNoBorder' value='6'/>
<enum name='NSNoTitle' value='0'/>
<enum name='NSNoUnderlineStyle' value='0'/>
<enum name='NSNonStandardCharacterSetFontMask' value='8'/>
<enum name='NSNonZeroWindingRule' value='0'/>
<enum name='NSNonactivatingPanelMask' value='128'/>
<enum name='NSNormalWindowLevel' value='0'/>
<enum name='NSNullCellType' value='0'/>
<enum name='NSNullGlyph' value='0'/>
<enum name='NSNumericPadKeyMask' value='2097152'/>
<enum name='NSOKButton' value='1'/>
<enum name='NSOPENGL_CURRENT_VERSION' value='1'/>
<enum name='NSOffState' value='0'/>
<enum name='NSOnOffButton' value='6'/>
<enum name='NSOnState' value='1'/>
<enum name='NSOnlyScrollerArrows' value='1'/>
<enum name='NSOpenGLCPCurrentRendererID' value='309'/>
<enum name='NSOpenGLCPGPUFragmentProcessing' value='311'/>
<enum name='NSOpenGLCPGPUVertexProcessing' value='310'/>
<enum name='NSOpenGLCPHasDrawable' value='314'/>
<enum name='NSOpenGLCPMPSwapsInFlight' value='315'/>
<enum name='NSOpenGLCPRasterizationEnable' value='221'/>
<enum name='NSOpenGLCPReclaimResources' value='308'/>
<enum name='NSOpenGLCPStateValidation' value='301'/>
<enum name='NSOpenGLCPSurfaceBackingSize' value='304'/>
<enum name='NSOpenGLCPSurfaceOpacity' value='236'/>
<enum name='NSOpenGLCPSurfaceOrder' value='235'/>
<enum name='NSOpenGLCPSurfaceSurfaceVolatile' value='306'/>
<enum name='NSOpenGLCPSwapInterval' value='222'/>
<enum name='NSOpenGLCPSwapRectangle' value='200'/>
<enum name='NSOpenGLCPSwapRectangleEnable' value='201'/>
<enum name='NSOpenGLGOClearFormatCache' value='502'/>
<enum name='NSOpenGLGOFormatCacheSize' value='501'/>
<enum name='NSOpenGLGOResetLibrary' value='504'/>
<enum name='NSOpenGLGORetainRenderers' value='503'/>
<enum name='NSOpenGLGOUseBuildCache' value='506'/>
<enum name='NSOpenGLPFAAccelerated' value='73'/>
<enum name='NSOpenGLPFAAcceleratedCompute' value='97'/>
<enum name='NSOpenGLPFAAccumSize' value='14'/>
<enum name='NSOpenGLPFAAllRenderers' value='1'/>
<enum name='NSOpenGLPFAAllowOfflineRenderers' value='96'/>
<enum name='NSOpenGLPFAAlphaSize' value='11'/>
<enum name='NSOpenGLPFAAuxBuffers' value='7'/>
<enum name='NSOpenGLPFAAuxDepthStencil' value='57'/>
<enum name='NSOpenGLPFABackingStore' value='76'/>
<enum name='NSOpenGLPFAClosestPolicy' value='74'/>
<enum name='NSOpenGLPFAColorFloat' value='58'/>
<enum name='NSOpenGLPFAColorSize' value='8'/>
<enum name='NSOpenGLPFACompliant' value='83'/>
<enum name='NSOpenGLPFADepthSize' value='12'/>
<enum name='NSOpenGLPFADoubleBuffer' value='5'/>
<enum name='NSOpenGLPFAFullScreen' value='54'/>
<enum name='NSOpenGLPFAMPSafe' value='78'/>
<enum name='NSOpenGLPFAMaximumPolicy' value='52'/>
<enum name='NSOpenGLPFAMinimumPolicy' value='51'/>
<enum name='NSOpenGLPFAMultiScreen' value='81'/>
<enum name='NSOpenGLPFAMultisample' value='59'/>
<enum name='NSOpenGLPFANoRecovery' value='72'/>
<enum name='NSOpenGLPFAOffScreen' value='53'/>
<enum name='NSOpenGLPFAOpenGLProfile' value='99'/>
<enum name='NSOpenGLPFAPixelBuffer' value='90'/>
<enum name='NSOpenGLPFARemotePixelBuffer' value='91'/>
<enum name='NSOpenGLPFARendererID' value='70'/>
<enum name='NSOpenGLPFARobust' value='75'/>
<enum name='NSOpenGLPFASampleAlpha' value='61'/>
<enum name='NSOpenGLPFASampleBuffers' value='55'/>
<enum name='NSOpenGLPFASamples' value='56'/>
<enum name='NSOpenGLPFAScreenMask' value='84'/>
<enum name='NSOpenGLPFASingleRenderer' value='71'/>
<enum name='NSOpenGLPFAStencilSize' value='13'/>
<enum name='NSOpenGLPFAStereo' value='6'/>
<enum name='NSOpenGLPFASupersample' value='60'/>
<enum name='NSOpenGLPFATripleBuffer' value='3'/>
<enum name='NSOpenGLPFAVirtualScreenCount' value='128'/>
<enum name='NSOpenGLPFAWindow' value='80'/>
<enum name='NSOpenGLProfileVersion3_2Core' value='12800'/>
<enum name='NSOpenGLProfileVersionLegacy' value='4096'/>
<enum name='NSOtherMouseDown' value='25'/>
<enum name='NSOtherMouseDownMask' value='33554432'/>
<enum name='NSOtherMouseDragged' value='27'/>
<enum name='NSOtherMouseDraggedMask' value='134217728'/>
<enum name='NSOtherMouseUp' value='26'/>
<enum name='NSOtherMouseUpMask' value='67108864'/>
<enum name='NSOtherTextMovement' value='0'/>
<enum name='NSOutlineViewDropOnItemIndex' value='-1'/>
<enum name='NSPNGFileType' value='4'/>
<enum name='NSPageDownFunctionKey' value='63277'/>
<enum name='NSPageUpFunctionKey' value='63276'/>
<enum name='NSParagraphSeparatorCharacter' value='8233'/>
<enum name='NSPasteboardReadingAsData' value='0'/>
<enum name='NSPasteboardReadingAsKeyedArchive' value='4'/>
<enum name='NSPasteboardReadingAsPropertyList' value='2'/>
<enum name='NSPasteboardReadingAsString' value='1'/>
<enum name='NSPasteboardWritingPromised' value='512'/>
<enum name='NSPathStyleNavigationBar' value='1'/>
<enum name='NSPathStylePopUp' value='2'/>
<enum name='NSPathStyleStandard' value='0'/>
<enum name='NSPatternColorSpaceModel' value='6'/>
<enum name='NSPauseFunctionKey' value='63280'/>
<enum name='NSPenLowerSideMask' value='2'/>
<enum name='NSPenPointingDevice' value='1'/>
<enum name='NSPenTipMask' value='1'/>
<enum name='NSPenUpperSideMask' value='4'/>
<enum name='NSPeriodic' value='16'/>
<enum name='NSPeriodicMask' value='65536'/>
<enum name='NSPlainTextTokenStyle' value='1'/>
<enum name='NSPopUpArrowAtBottom' value='2'/>
<enum name='NSPopUpArrowAtCenter' value='1'/>
<enum name='NSPopUpMenuWindowLevel' value='101'/>
<enum name='NSPopUpNoArrow' value='0'/>
<enum name='NSPopoverAppearanceHUD' value='1'/>
<enum name='NSPopoverAppearanceMinimal' value='0'/>
<enum name='NSPopoverBehaviorApplicationDefined' value='0'/>
<enum name='NSPopoverBehaviorSemitransient' value='2'/>
<enum name='NSPopoverBehaviorTransient' value='1'/>
<enum name='NSPortraitOrientation' value='0'/>
<enum name='NSPositiveDoubleType' value='7'/>
<enum name='NSPositiveFloatType' value='4'/>
<enum name='NSPositiveIntType' value='2'/>
<enum name='NSPosterFontMask' value='256'/>
<enum name='NSPowerOffEventType' value='1'/>
<enum name='NSPressedTab' value='2'/>
<enum name='NSPrevFunctionKey' value='63295'/>
<enum name='NSPrintFunctionKey' value='63288'/>
<enum name='NSPrintPanelShowsCopies' value='1'/>
<enum name='NSPrintPanelShowsOrientation' value='8'/>
<enum name='NSPrintPanelShowsPageRange' value='2'/>
<enum name='NSPrintPanelShowsPageSetupAccessory' value='256'/>
<enum name='NSPrintPanelShowsPaperSize' value='4'/>
<enum name='NSPrintPanelShowsPreview' value='131072'/>
<enum name='NSPrintPanelShowsPrintSelection' value='32'/>
<enum name='NSPrintPanelShowsScaling' value='16'/>
<enum name='NSPrintRenderingQualityBest' value='0'/>
<enum name='NSPrintRenderingQualityResponsive' value='1'/>
<enum name='NSPrintScreenFunctionKey' value='63278'/>
<enum name='NSPrinterTableError' value='2'/>
<enum name='NSPrinterTableNotFound' value='1'/>
<enum name='NSPrinterTableOK' value='0'/>
<enum name='NSPrintingCancelled' value='0'/>
<enum name='NSPrintingFailure' value='3'/>
<enum name='NSPrintingReplyLater' value='2'/>
<enum name='NSPrintingSuccess' value='1'/>
<enum name='NSProgressIndicatorBarStyle' value='0'/>
<enum name='NSProgressIndicatorPreferredAquaThickness' value='12'/>
<enum name='NSProgressIndicatorPreferredLargeThickness' value='18'/>
<enum name='NSProgressIndicatorPreferredSmallThickness' value='10'/>
<enum name='NSProgressIndicatorPreferredThickness' value='14'/>
<enum name='NSProgressIndicatorSpinningStyle' value='1'/>
<enum name='NSPushInCell' value='2'/>
<enum name='NSPushInCellMask' value='2'/>
<enum name='NSPushOnPushOffButton' value='1'/>
<enum name='NSRGBColorSpaceModel' value='1'/>
<enum name='NSRGBModeColorPanel' value='1'/>
<enum name='NSRadioButton' value='4'/>
<enum name='NSRadioModeMatrix' value='0'/>
<enum name='NSRangeDateMode' value='1'/>
<enum name='NSRatingLevelIndicatorStyle' value='3'/>
<enum name='NSRecessedBezelStyle' value='13'/>
<enum name='NSRedoFunctionKey' value='63300'/>
<enum name='NSRegularControlSize' value='0'/>
<enum name='NSRegularSquareBezelStyle' value='2'/>
<enum name='NSRelevancyLevelIndicatorStyle' value='0'/>
<enum name='NSRemoteNotificationTypeBadge' value='1'/>
<enum name='NSRemoteNotificationTypeNone' value='0'/>
<enum name='NSRemoveTraitFontAction' value='7'/>
<enum name='NSResetCursorRectsRunLoopOrdering' value='700000'/>
<enum name='NSResetFunctionKey' value='63283'/>
<enum name='NSResizableWindowMask' value='8'/>
<enum name='NSReturnTextMovement' value='16'/>
<enum name='NSRightArrowFunctionKey' value='63235'/>
<enum name='NSRightMouseDown' value='3'/>
<enum name='NSRightMouseDownMask' value='8'/>
<enum name='NSRightMouseDragged' value='7'/>
<enum name='NSRightMouseDraggedMask' value='128'/>
<enum name='NSRightMouseUp' value='4'/>
<enum name='NSRightMouseUpMask' value='16'/>
<enum name='NSRightTabStopType' value='1'/>
<enum name='NSRightTabsBezelBorder' value='3'/>
<enum name='NSRightTextAlignment' value='1'/>
<enum name='NSRightTextMovement' value='20'/>
<enum name='NSRoundLineCapStyle' value='1'/>
<enum name='NSRoundLineJoinStyle' value='1'/>
<enum name='NSRoundRectBezelStyle' value='12'/>
<enum name='NSRoundedBezelStyle' value='1'/>
<enum name='NSRoundedDisclosureBezelStyle' value='14'/>
<enum name='NSRoundedTokenStyle' value='2'/>
<enum name='NSRuleEditorNestingModeCompound' value='2'/>
<enum name='NSRuleEditorNestingModeList' value='1'/>
<enum name='NSRuleEditorNestingModeSimple' value='3'/>
<enum name='NSRuleEditorNestingModeSingle' value='0'/>
<enum name='NSRuleEditorRowTypeCompound' value='1'/>
<enum name='NSRuleEditorRowTypeSimple' value='0'/>
<enum name='NSRunAbortedResponse' value='-1001'/>
<enum name='NSRunContinuesResponse' value='-1002'/>
<enum name='NSRunStoppedResponse' value='-1000'/>
<enum name='NSSaveAsOperation' value='1'/>
<enum name='NSSaveOperation' value='0'/>
<enum name='NSSaveToOperation' value='2'/>
<enum name='NSScaleNone' value='2'/>
<enum name='NSScaleProportionally' value='0'/>
<enum name='NSScaleToFit' value='1'/>
<enum name='NSScreenChangedEventType' value='8'/>
<enum name='NSScreenSaverWindowLevel' value='1000'/>
<enum name='NSScrollElasticityAllowed' value='2'/>
<enum name='NSScrollElasticityAutomatic' value='0'/>
<enum name='NSScrollElasticityNone' value='1'/>
<enum name='NSScrollLockFunctionKey' value='63279'/>
<enum name='NSScrollViewFindBarPositionAboveContent' value='1'/>
<enum name='NSScrollViewFindBarPositionAboveHorizontalRuler' value='0'/>
<enum name='NSScrollViewFindBarPositionBelowContent' value='2'/>
<enum name='NSScrollWheel' value='22'/>
<enum name='NSScrollWheelMask' value='4194304'/>
<enum name='NSScrollerArrowsDefaultSetting' value='0'/>
<enum name='NSScrollerArrowsMaxEnd' value='0'/>
<enum name='NSScrollerArrowsMinEnd' value='1'/>
<enum name='NSScrollerArrowsNone' value='2'/>
<enum name='NSScrollerDecrementArrow' value='1'/>
<enum name='NSScrollerDecrementLine' value='4'/>
<enum name='NSScrollerDecrementPage' value='1'/>
<enum name='NSScrollerIncrementArrow' value='0'/>
<enum name='NSScrollerIncrementLine' value='5'/>
<enum name='NSScrollerIncrementPage' value='3'/>
<enum name='NSScrollerKnob' value='2'/>
<enum name='NSScrollerKnobSlot' value='6'/>
<enum name='NSScrollerKnobStyleDark' value='1'/>
<enum name='NSScrollerKnobStyleDefault' value='0'/>
<enum name='NSScrollerKnobStyleLight' value='2'/>
<enum name='NSScrollerNoPart' value='0'/>
<enum name='NSScrollerStyleLegacy' value='0'/>
<enum name='NSScrollerStyleOverlay' value='1'/>
<enum name='NSSearchFieldClearRecentsMenuItemTag' value='1002'/>
<enum name='NSSearchFieldNoRecentsMenuItemTag' value='1003'/>
<enum name='NSSearchFieldRecentsMenuItemTag' value='1001'/>
<enum name='NSSearchFieldRecentsTitleMenuItemTag' value='1000'/>
<enum name='NSSegmentStyleAutomatic' value='0'/>
<enum name='NSSegmentStyleCapsule' value='5'/>
<enum name='NSSegmentStyleRoundRect' value='3'/>
<enum name='NSSegmentStyleRounded' value='1'/>
<enum name='NSSegmentStyleSmallSquare' value='6'/>
<enum name='NSSegmentStyleTexturedRounded' value='2'/>
<enum name='NSSegmentStyleTexturedSquare' value='4'/>
<enum name='NSSegmentSwitchTrackingMomentary' value='2'/>
<enum name='NSSegmentSwitchTrackingSelectAny' value='1'/>
<enum name='NSSegmentSwitchTrackingSelectOne' value='0'/>
<enum name='NSSelectByCharacter' value='0'/>
<enum name='NSSelectByParagraph' value='2'/>
<enum name='NSSelectByWord' value='1'/>
<enum name='NSSelectFunctionKey' value='63297'/>
<enum name='NSSelectedTab' value='0'/>
<enum name='NSSelectingNext' value='1'/>
<enum name='NSSelectingPrevious' value='2'/>
<enum name='NSSelectionAffinityDownstream' value='1'/>
<enum name='NSSelectionAffinityUpstream' value='0'/>
<enum name='NSServiceApplicationLaunchFailedError' value='66561'/>
<enum name='NSServiceApplicationNotFoundError' value='66560'/>
<enum name='NSServiceErrorMaximum' value='66817'/>
<enum name='NSServiceErrorMinimum' value='66560'/>
<enum name='NSServiceInvalidPasteboardDataError' value='66563'/>
<enum name='NSServiceMalformedServiceDictionaryError' value='66564'/>
<enum name='NSServiceMiscellaneousError' value='66800'/>
<enum name='NSServiceRequestTimedOutError' value='66562'/>
<enum name='NSShadowlessSquareBezelStyle' value='6'/>
<enum name='NSShiftKeyMask' value='131072'/>
<enum name='NSShowControlGlyphs' value='1'/>
<enum name='NSShowInvisibleGlyphs' value='2'/>
<enum name='NSSingleDateMode' value='0'/>
<enum name='NSSingleUnderlineStyle' value='1'/>
<enum name='NSSizeDownFontAction' value='4'/>
<enum name='NSSizeUpFontAction' value='3'/>
<enum name='NSSmallCapsFontMask' value='128'/>
<enum name='NSSmallControlSize' value='1'/>
<enum name='NSSmallIconButtonBezelStyle' value='2'/>
<enum name='NSSmallSquareBezelStyle' value='10'/>
<enum name='NSSpecialPageOrder' value='0'/>
<enum name='NSSpeechImmediateBoundary' value='0'/>
<enum name='NSSpeechSentenceBoundary' value='2'/>
<enum name='NSSpeechWordBoundary' value='1'/>
<enum name='NSSpellingStateGrammarFlag' value='2'/>
<enum name='NSSpellingStateSpellingFlag' value='1'/>
<enum name='NSSplitViewDividerStylePaneSplitter' value='3'/>
<enum name='NSSplitViewDividerStyleThick' value='1'/>
<enum name='NSSplitViewDividerStyleThin' value='2'/>
<enum name='NSSquareLineCapStyle' value='2'/>
<enum name='NSSquareStatusItemLength' value='-2'/>
<enum name='NSStatusWindowLevel' value='25'/>
<enum name='NSStopFunctionKey' value='63284'/>
<enum name='NSStringDrawingDisableScreenFontSubstitution' value='4'/>
<enum name='NSStringDrawingOneShot' value='16'/>
<enum name='NSStringDrawingTruncatesLastVisibleLine' value='32'/>
<enum name='NSStringDrawingUsesDeviceMetrics' value='8'/>
<enum name='NSStringDrawingUsesFontLeading' value='2'/>
<enum name='NSStringDrawingUsesLineFragmentOrigin' value='1'/>
<enum name='NSSubmenuWindowLevel' value='3'/>
<enum name='NSSwitchButton' value='3'/>
<enum name='NSSysReqFunctionKey' value='63281'/>
<enum name='NSSystemDefined' value='14'/>
<enum name='NSSystemDefinedMask' value='16384'/>
<enum name='NSSystemFunctionKey' value='63287'/>
<enum name='NSTIFFCompressionCCITTFAX3' value='3'/>
<enum name='NSTIFFCompressionCCITTFAX4' value='4'/>
<enum name='NSTIFFCompressionJPEG' value='6'/>
<enum name='NSTIFFCompressionLZW' value='5'/>
<enum name='NSTIFFCompressionNEXT' value='32766'/>
<enum name='NSTIFFCompressionNone' value='1'/>
<enum name='NSTIFFCompressionOldJPEG' value='32865'/>
<enum name='NSTIFFCompressionPackBits' value='32773'/>
<enum name='NSTIFFFileType' value='0'/>
<enum name='NSTabCharacter' value='9'/>
<enum name='NSTabTextMovement' value='17'/>
<enum name='NSTableColumnAutoresizingMask' value='1'/>
<enum name='NSTableColumnNoResizing' value='0'/>
<enum name='NSTableColumnUserResizingMask' value='2'/>
<enum name='NSTableViewAnimationEffectFade' value='1'/>
<enum name='NSTableViewAnimationEffectGap' value='2'/>
<enum name='NSTableViewAnimationEffectNone' value='0'/>
<enum name='NSTableViewAnimationSlideDown' value='32'/>
<enum name='NSTableViewAnimationSlideLeft' value='48'/>
<enum name='NSTableViewAnimationSlideRight' value='64'/>
<enum name='NSTableViewAnimationSlideUp' value='16'/>
<enum name='NSTableViewDashedHorizontalGridLineMask' value='8'/>
<enum name='NSTableViewDraggingDestinationFeedbackStyleNone' value='-1'/>
<enum name='NSTableViewDraggingDestinationFeedbackStyleRegular' value='0'/>
<enum name='NSTableViewDraggingDestinationFeedbackStyleSourceList' value='1'/>
<enum name='NSTableViewDropAbove' value='1'/>
<enum name='NSTableViewDropOn' value='0'/>
<enum name='NSTableViewFirstColumnOnlyAutoresizingStyle' value='5'/>
<enum name='NSTableViewGridNone' value='0'/>
<enum name='NSTableViewLastColumnOnlyAutoresizingStyle' value='4'/>
<enum name='NSTableViewNoColumnAutoresizing' value='0'/>
<enum name='NSTableViewReverseSequentialColumnAutoresizingStyle' value='3'/>
<enum name='NSTableViewRowSizeStyleCustom' value='0'/>
<enum name='NSTableViewRowSizeStyleDefault' value='-1'/>
<enum name='NSTableViewRowSizeStyleLarge' value='3'/>
<enum name='NSTableViewRowSizeStyleMedium' value='2'/>
<enum name='NSTableViewRowSizeStyleSmall' value='1'/>
<enum name='NSTableViewSelectionHighlightStyleNone' value='-1'/>
<enum name='NSTableViewSelectionHighlightStyleRegular' value='0'/>
<enum name='NSTableViewSelectionHighlightStyleSourceList' value='1'/>
<enum name='NSTableViewSequentialColumnAutoresizingStyle' value='2'/>
<enum name='NSTableViewSolidHorizontalGridLineMask' value='2'/>
<enum name='NSTableViewSolidVerticalGridLineMask' value='1'/>
<enum name='NSTableViewUniformColumnAutoresizingStyle' value='1'/>
<enum name='NSTabletPoint' value='23'/>
<enum name='NSTabletPointEventSubtype' value='1'/>
<enum name='NSTabletPointMask' value='8388608'/>
<enum name='NSTabletProximity' value='24'/>
<enum name='NSTabletProximityEventSubtype' value='2'/>
<enum name='NSTabletProximityMask' value='16777216'/>
<enum name='NSTerminateCancel' value='0'/>
<enum name='NSTerminateLater' value='2'/>
<enum name='NSTerminateNow' value='1'/>
<enum name='NSTextBlockAbsoluteValueType' value='0'/>
<enum name='NSTextBlockBaselineAlignment' value='3'/>
<enum name='NSTextBlockBorder' value='0'/>
<enum name='NSTextBlockBottomAlignment' value='2'/>
<enum name='NSTextBlockHeight' value='4'/>
<enum name='NSTextBlockMargin' value='1'/>
<enum name='NSTextBlockMaximumHeight' value='6'/>
<enum name='NSTextBlockMaximumWidth' value='2'/>
<enum name='NSTextBlockMiddleAlignment' value='1'/>
<enum name='NSTextBlockMinimumHeight' value='5'/>
<enum name='NSTextBlockMinimumWidth' value='1'/>
<enum name='NSTextBlockPadding' value='-1'/>
<enum name='NSTextBlockPercentageValueType' value='1'/>
<enum name='NSTextBlockTopAlignment' value='0'/>
<enum name='NSTextBlockWidth' value='0'/>
<enum name='NSTextCellType' value='1'/>
<enum name='NSTextFieldAndStepperDatePickerStyle' value='0'/>
<enum name='NSTextFieldDatePickerStyle' value='2'/>
<enum name='NSTextFieldRoundedBezel' value='1'/>
<enum name='NSTextFieldSquareBezel' value='0'/>
<enum name='NSTextFinderActionHideFindInterface' value='11'/>
<enum name='NSTextFinderActionHideReplaceInterface' value='13'/>
<enum name='NSTextFinderActionNextMatch' value='2'/>
<enum name='NSTextFinderActionPreviousMatch' value='3'/>
<enum name='NSTextFinderActionReplace' value='5'/>
<enum name='NSTextFinderActionReplaceAll' value='4'/>
<enum name='NSTextFinderActionReplaceAllInSelection' value='8'/>
<enum name='NSTextFinderActionReplaceAndFind' value='6'/>
<enum name='NSTextFinderActionSelectAll' value='9'/>
<enum name='NSTextFinderActionSelectAllInSelection' value='10'/>
<enum name='NSTextFinderActionSetSearchString' value='7'/>
<enum name='NSTextFinderActionShowFindInterface' value='1'/>
<enum name='NSTextFinderActionShowReplaceInterface' value='12'/>
<enum name='NSTextFinderMatchingTypeContains' value='0'/>
<enum name='NSTextFinderMatchingTypeEndsWith' value='3'/>
<enum name='NSTextFinderMatchingTypeFullWord' value='2'/>
<enum name='NSTextFinderMatchingTypeStartsWith' value='1'/>
<enum name='NSTextLayoutOrientationHorizontal' value='0'/>
<enum name='NSTextLayoutOrientationVertical' value='1'/>
<enum name='NSTextListPrependEnclosingMarker' value='1'/>
<enum name='NSTextReadInapplicableDocumentTypeError' value='65806'/>
<enum name='NSTextReadWriteErrorMaximum' value='66303'/>
<enum name='NSTextReadWriteErrorMinimum' value='65792'/>
<enum name='NSTextStorageEditedAttributes' value='1'/>
<enum name='NSTextStorageEditedCharacters' value='2'/>
<enum name='NSTextTableAutomaticLayoutAlgorithm' value='0'/>
<enum name='NSTextTableFixedLayoutAlgorithm' value='1'/>
<enum name='NSTextWriteInapplicableDocumentTypeError' value='66062'/>
<enum name='NSTextWritingDirectionEmbedding' value='0'/>
<enum name='NSTextWritingDirectionOverride' value='2'/>
<enum name='NSTexturedBackgroundWindowMask' value='256'/>
<enum name='NSTexturedRoundedBezelStyle' value='11'/>
<enum name='NSTexturedSquareBezelStyle' value='8'/>
<enum name='NSThickSquareBezelStyle' value='3'/>
<enum name='NSThickerSquareBezelStyle' value='4'/>
<enum name='NSTickMarkAbove' value='1'/>
<enum name='NSTickMarkBelow' value='0'/>
<enum name='NSTickMarkLeft' value='1'/>
<enum name='NSTickMarkRight' value='0'/>
<enum name='NSTimeZoneDatePickerElementFlag' value='16'/>
<enum name='NSTitledWindowMask' value='1'/>
<enum name='NSToggleButton' value='2'/>
<enum name='NSToolbarDisplayModeDefault' value='0'/>
<enum name='NSToolbarDisplayModeIconAndLabel' value='1'/>
<enum name='NSToolbarDisplayModeIconOnly' value='2'/>
<enum name='NSToolbarDisplayModeLabelOnly' value='3'/>
<enum name='NSToolbarItemVisibilityPriorityHigh' value='1000'/>
<enum name='NSToolbarItemVisibilityPriorityLow' value='-1000'/>
<enum name='NSToolbarItemVisibilityPriorityStandard' value='0'/>
<enum name='NSToolbarItemVisibilityPriorityUser' value='2000'/>
<enum name='NSToolbarSizeModeDefault' value='0'/>
<enum name='NSToolbarSizeModeRegular' value='1'/>
<enum name='NSToolbarSizeModeSmall' value='2'/>
<enum name='NSTopTabsBezelBorder' value='0'/>
<enum name='NSTornOffMenuWindowLevel' value='3'/>
<enum name='NSTouchEventSubtype' value='3'/>
<enum name='NSTouchPhaseAny' value64='18446744073709551615' value='4294967295'/>
<enum name='NSTouchPhaseBegan' value='1'/>
<enum name='NSTouchPhaseCancelled' value='16'/>
<enum name='NSTouchPhaseEnded' value='8'/>
<enum name='NSTouchPhaseMoved' value='2'/>
<enum name='NSTouchPhaseStationary' value='4'/>
<enum name='NSTouchPhaseTouching' value='7'/>
<enum name='NSTrackModeMatrix' value='3'/>
<enum name='NSTrackingActiveAlways' value='128'/>
<enum name='NSTrackingActiveInActiveApp' value='64'/>
<enum name='NSTrackingActiveInKeyWindow' value='32'/>
<enum name='NSTrackingActiveWhenFirstResponder' value='16'/>
<enum name='NSTrackingAssumeInside' value='256'/>
<enum name='NSTrackingCursorUpdate' value='4'/>
<enum name='NSTrackingEnabledDuringMouseDrag' value='1024'/>
<enum name='NSTrackingInVisibleRect' value='512'/>
<enum name='NSTrackingMouseEnteredAndExited' value='1'/>
<enum name='NSTrackingMouseMoved' value='2'/>
<enum name='NSTypesetterBehavior_10_2' value='2'/>
<enum name='NSTypesetterBehavior_10_2_WithCompatibility' value='1'/>
<enum name='NSTypesetterBehavior_10_3' value='3'/>
<enum name='NSTypesetterBehavior_10_4' value='4'/>
<enum name='NSTypesetterContainerBreakAction' value='32'/>
<enum name='NSTypesetterHorizontalTabAction' value='4'/>
<enum name='NSTypesetterLatestBehavior' value='-1'/>
<enum name='NSTypesetterLineBreakAction' value='8'/>
<enum name='NSTypesetterOriginalBehavior' value='0'/>
<enum name='NSTypesetterParagraphBreakAction' value='16'/>
<enum name='NSTypesetterWhitespaceAction' value='2'/>
<enum name='NSTypesetterZeroAdvancementAction' value='1'/>
<enum name='NSUnboldFontMask' value='4'/>
<enum name='NSUnderlinePatternDash' value='512'/>
<enum name='NSUnderlinePatternDashDot' value='768'/>
<enum name='NSUnderlinePatternDashDotDot' value='1024'/>
<enum name='NSUnderlinePatternDot' value='256'/>
<enum name='NSUnderlinePatternSolid' value='0'/>
<enum name='NSUnderlineStyleDouble' value='9'/>
<enum name='NSUnderlineStyleNone' value='0'/>
<enum name='NSUnderlineStyleSingle' value='1'/>
<enum name='NSUnderlineStyleThick' value='2'/>
<enum name='NSUndoFunctionKey' value='63299'/>
<enum name='NSUnifiedTitleAndToolbarWindowMask' value='4096'/>
<enum name='NSUnitalicFontMask' value='16777216'/>
<enum name='NSUnknownColorSpaceModel' value='-1'/>
<enum name='NSUnknownPageOrder' value='2'/>
<enum name='NSUnknownPointingDevice' value='0'/>
<enum name='NSUnscaledWindowMask' value='2048'/>
<enum name='NSUpArrowFunctionKey' value='63232'/>
<enum name='NSUpTextMovement' value='21'/>
<enum name='NSUpdateWindowsRunLoopOrdering' value='500000'/>
<enum name='NSUserFunctionKey' value='63286'/>
<enum name='NSUserInterfaceLayoutDirectionLeftToRight' value='0'/>
<enum name='NSUserInterfaceLayoutDirectionRightToLeft' value='1'/>
<enum name='NSUtilityWindowMask' value='16'/>
<enum name='NSVariableStatusItemLength' value='-1'/>
<enum name='NSVerticalRuler' value='1'/>
<enum name='NSViaPanelFontAction' value='1'/>
<enum name='NSViewHeightSizable' value='16'/>
<enum name='NSViewLayerContentsPlacementBottom' value='8'/>
<enum name='NSViewLayerContentsPlacementBottomLeft' value='9'/>
<enum name='NSViewLayerContentsPlacementBottomRight' value='7'/>
<enum name='NSViewLayerContentsPlacementCenter' value='3'/>
<enum name='NSViewLayerContentsPlacementLeft' value='10'/>
<enum name='NSViewLayerContentsPlacementRight' value='6'/>
<enum name='NSViewLayerContentsPlacementScaleAxesIndependently' value='0'/>
<enum name='NSViewLayerContentsPlacementScaleProportionallyToFill' value='2'/>
<enum name='NSViewLayerContentsPlacementScaleProportionallyToFit' value='1'/>
<enum name='NSViewLayerContentsPlacementTop' value='4'/>
<enum name='NSViewLayerContentsPlacementTopLeft' value='11'/>
<enum name='NSViewLayerContentsPlacementTopRight' value='5'/>
<enum name='NSViewLayerContentsRedrawBeforeViewResize' value='3'/>
<enum name='NSViewLayerContentsRedrawDuringViewResize' value='2'/>
<enum name='NSViewLayerContentsRedrawNever' value='0'/>
<enum name='NSViewLayerContentsRedrawOnSetNeedsDisplay' value='1'/>
<enum name='NSViewMaxXMargin' value='4'/>
<enum name='NSViewMaxYMargin' value='32'/>
<enum name='NSViewMinXMargin' value='1'/>
<enum name='NSViewMinYMargin' value='8'/>
<enum name='NSViewNotSizable' value='0'/>
<enum name='NSViewWidthSizable' value='2'/>
<enum name='NSWantsBidiLevels' value='4'/>
<enum name='NSWarningAlertStyle' value='0'/>
<enum name='NSWheelModeColorPanel' value='6'/>
<enum name='NSWindowAbove' value='1'/>
<enum name='NSWindowAnimationBehaviorAlertPanel' value='5'/>
<enum name='NSWindowAnimationBehaviorDefault' value='0'/>
<enum name='NSWindowAnimationBehaviorDocumentWindow' value='3'/>
<enum name='NSWindowAnimationBehaviorNone' value='2'/>
<enum name='NSWindowAnimationBehaviorUtilityWindow' value='4'/>
<enum name='NSWindowBackingLocationDefault' value='0'/>
<enum name='NSWindowBackingLocationMainMemory' value='2'/>
<enum name='NSWindowBackingLocationVideoMemory' value='1'/>
<enum name='NSWindowBelow' value='-1'/>
<enum name='NSWindowCloseButton' value='0'/>
<enum name='NSWindowCollectionBehaviorCanJoinAllSpaces' value='1'/>
<enum name='NSWindowCollectionBehaviorDefault' value='0'/>
<enum name='NSWindowCollectionBehaviorFullScreenAuxiliary' value='256'/>
<enum name='NSWindowCollectionBehaviorFullScreenPrimary' value='128'/>
<enum name='NSWindowCollectionBehaviorIgnoresCycle' value='64'/>
<enum name='NSWindowCollectionBehaviorManaged' value='4'/>
<enum name='NSWindowCollectionBehaviorMoveToActiveSpace' value='2'/>
<enum name='NSWindowCollectionBehaviorParticipatesInCycle' value='32'/>
<enum name='NSWindowCollectionBehaviorStationary' value='16'/>
<enum name='NSWindowCollectionBehaviorTransient' value='8'/>
<enum name='NSWindowDepthOnehundredtwentyeightBitRGB' value='544'/>
<enum name='NSWindowDepthSixtyfourBitRGB' value='528'/>
<enum name='NSWindowDepthTwentyfourBitRGB' value='520'/>
<enum name='NSWindowDocumentIconButton' value='4'/>
<enum name='NSWindowDocumentVersionsButton' value='6'/>
<enum name='NSWindowExposedEventType' value='0'/>
<enum name='NSWindowFullScreenButton' value='7'/>
<enum name='NSWindowMiniaturizeButton' value='1'/>
<enum name='NSWindowMovedEventType' value='4'/>
<enum name='NSWindowNumberListAllApplications' value='1'/>
<enum name='NSWindowNumberListAllSpaces' value='16'/>
<enum name='NSWindowOut' value='0'/>
<enum name='NSWindowSharingNone' value='0'/>
<enum name='NSWindowSharingReadOnly' value='1'/>
<enum name='NSWindowSharingReadWrite' value='2'/>
<enum name='NSWindowToolbarButton' value='3'/>
<enum name='NSWindowZoomButton' value='2'/>
<enum name='NSWindows95InterfaceStyle' value='2'/>
<enum name='NSWorkspaceLaunchAllowingClassicStartup' value='131072'/>
<enum name='NSWorkspaceLaunchAndHide' value='1048576'/>
<enum name='NSWorkspaceLaunchAndHideOthers' value='2097152'/>
<enum name='NSWorkspaceLaunchAndPrint' value='2'/>
<enum name='NSWorkspaceLaunchAsync' value='65536'/>
<enum name='NSWorkspaceLaunchDefault' value='196608'/>
<enum name='NSWorkspaceLaunchInhibitingBackgroundOnly' value='128'/>
<enum name='NSWorkspaceLaunchNewInstance' value='524288'/>
<enum name='NSWorkspaceLaunchPreferringClassic' value='262144'/>
<enum name='NSWorkspaceLaunchWithoutActivation' value='512'/>
<enum name='NSWorkspaceLaunchWithoutAddingToRecents' value='256'/>
<enum name='NSWritingDirectionLeftToRight' value='0'/>
<enum name='NSWritingDirectionNatural' value='-1'/>
<enum name='NSWritingDirectionRightToLeft' value='1'/>
<enum name='NSYearMonthDatePickerElementFlag' value='192'/>
<enum name='NSYearMonthDayDatePickerElementFlag' value='224'/>
<function name='NSAccessibilityActionDescription'>
<arg name='action' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='NSAccessibilityPostNotification'>
<arg name='element' declared_type='id' type='@'/>
<arg name='notification' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSAccessibilityRaiseBadArgumentException'>
<arg name='element' declared_type='id' type='@'/>
<arg name='attribute' declared_type='NSString*' type='@'/>
<arg name='value' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSAccessibilityRoleDescription'>
<arg name='role' declared_type='NSString*' type='@'/>
<arg name='subrole' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='NSAccessibilityRoleDescriptionForUIElement'>
<arg name='element' declared_type='id' type='@'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='NSAccessibilityUnignoredAncestor'>
<arg name='element' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</function>
<function name='NSAccessibilityUnignoredChildren'>
<arg name='originalChildren' declared_type='NSArray*' type='@'/>
<retval declared_type='NSArray*' type='@'/>
</function>
<function name='NSAccessibilityUnignoredChildrenForOnlyChild'>
<arg name='originalChild' declared_type='id' type='@'/>
<retval declared_type='NSArray*' type='@'/>
</function>
<function name='NSAccessibilityUnignoredDescendant'>
<arg name='element' declared_type='id' type='@'/>
<retval declared_type='id' type='@'/>
</function>
<function name='NSApplicationLoad'>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='NSApplicationMain'>
<arg name='argc' declared_type='int' type='i'/>
<arg name='argv' declared_type='char**' const='true' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='NSAvailableWindowDepths'>
<retval declared_type='NSWindowDepth*' const='true' type='^i'/>
</function>
<function name='NSBeep'>
<retval declared_type='void' type='v'/>
</function>
<function name='NSBeginAlertSheet' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<arg name='docWindow' declared_type='NSWindow*' type='@'/>
<arg name='modalDelegate' declared_type='id' type='@'/>
<arg name='didEndSelector' declared_type='SEL' type=':'/>
<arg name='didDismissSelector' declared_type='SEL' type=':'/>
<arg name='contextInfo' declared_type='void*' type='^v'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSBeginCriticalAlertSheet' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<arg name='docWindow' declared_type='NSWindow*' type='@'/>
<arg name='modalDelegate' declared_type='id' type='@'/>
<arg name='didEndSelector' declared_type='SEL' type=':'/>
<arg name='didDismissSelector' declared_type='SEL' type=':'/>
<arg name='contextInfo' declared_type='void*' type='^v'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSBeginInformationalAlertSheet' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<arg name='docWindow' declared_type='NSWindow*' type='@'/>
<arg name='modalDelegate' declared_type='id' type='@'/>
<arg name='didEndSelector' declared_type='SEL' type=':'/>
<arg name='didDismissSelector' declared_type='SEL' type=':'/>
<arg name='contextInfo' declared_type='void*' type='^v'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSBestDepth'>
<arg name='colorSpace' declared_type='NSString*' type='@'/>
<arg name='bps' declared_type='NSInteger' type64='q' type='i'/>
<arg name='bpp' declared_type='NSInteger' type64='q' type='i'/>
<arg name='planar' declared_type='BOOL' type='B'/>
<arg name='exactMatch' declared_type='BOOL*' type='^B'/>
<retval declared_type='NSWindowDepth' type='i'/>
</function>
<function name='NSBitsPerPixelFromDepth'>
<arg name='depth' declared_type='NSWindowDepth' type='i'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSBitsPerSampleFromDepth'>
<arg name='depth' declared_type='NSWindowDepth' type='i'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSColorSpaceFromDepth'>
<arg name='depth' declared_type='NSWindowDepth' type='i'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='NSConvertGlyphsToPackedGlyphs'>
<arg name='glBuf' declared_type='NSGlyph*' type='^I'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i'/>
<arg name='packing' declared_type='NSMultibyteGlyphPacking' type64='Q' type='I'/>
<arg name='packedGlyphs' declared_type='char*' type='*'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSCopyBits'>
<arg name='srcGState' declared_type='NSInteger' type64='q' type='i'/>
<arg name='srcRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='destPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSCountWindows'>
<arg name='count' declared_type='NSInteger*' type64='^q' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSCountWindowsForContext'>
<arg name='context' declared_type='NSInteger' type64='q' type='i'/>
<arg name='count' declared_type='NSInteger*' type64='^q' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSCreateFileContentsPboardType'>
<arg name='fileType' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='NSCreateFilenamePboardType'>
<arg name='fileType' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='NSDisableScreenUpdates'>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDottedFrameRect'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawBitmap'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='width' declared_type='NSInteger' type64='q' type='i'/>
<arg name='height' declared_type='NSInteger' type64='q' type='i'/>
<arg name='bps' declared_type='NSInteger' type64='q' type='i'/>
<arg name='spp' declared_type='NSInteger' type64='q' type='i'/>
<arg name='bpp' declared_type='NSInteger' type64='q' type='i'/>
<arg name='bpr' declared_type='NSInteger' type64='q' type='i'/>
<arg name='isPlanar' declared_type='BOOL' type='B'/>
<arg name='hasAlpha' declared_type='BOOL' type='B'/>
<arg name='colorSpaceName' declared_type='NSString*' type='@'/>
<arg name='data' declared_type='unsigned char **' const='true' type='^*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawButton'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawColorTiledRects'>
<arg name='boundsRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='sides' declared_type='NSRectEdge*' type64='^Q' const='true' type='^i'/>
<arg name='colors' declared_type='NSColor**' type='^@'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</function>
<function name='NSDrawDarkBezel'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawGrayBezel'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawGroove'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawLightBezel'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawNinePartImage'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='topLeftCorner' declared_type='NSImage*' type='@'/>
<arg name='topEdgeFill' declared_type='NSImage*' type='@'/>
<arg name='topRightCorner' declared_type='NSImage*' type='@'/>
<arg name='leftEdgeFill' declared_type='NSImage*' type='@'/>
<arg name='centerFill' declared_type='NSImage*' type='@'/>
<arg name='rightEdgeFill' declared_type='NSImage*' type='@'/>
<arg name='bottomLeftCorner' declared_type='NSImage*' type='@'/>
<arg name='bottomEdgeFill' declared_type='NSImage*' type='@'/>
<arg name='bottomRightCorner' declared_type='NSImage*' type='@'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I'/>
<arg name='alphaFraction' declared_type='CGFloat' type64='d' type='f'/>
<arg name='flipped' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawThreePartImage'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='startCap' declared_type='NSImage*' type='@'/>
<arg name='centerFill' declared_type='NSImage*' type='@'/>
<arg name='endCap' declared_type='NSImage*' type='@'/>
<arg name='vertical' declared_type='BOOL' type='B'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I'/>
<arg name='alphaFraction' declared_type='CGFloat' type64='d' type='f'/>
<arg name='flipped' declared_type='BOOL' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawTiledRects'>
<arg name='boundsRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='sides' declared_type='NSRectEdge*' type64='^Q' const='true' type='^i'/>
<arg name='grays' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</function>
<function name='NSDrawWhiteBezel'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSDrawWindowBackground'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSEdgeInsetsMake' inline='true'>
<arg name='top' declared_type='CGFloat' type64='d' type='f'/>
<arg name='left' declared_type='CGFloat' type64='d' type='f'/>
<arg name='bottom' declared_type='CGFloat' type64='d' type='f'/>
<arg name='right' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='NSEdgeInsets' type64='{_NSEdgeInsets=dddd}' type='{_NSEdgeInsets=ffff}'/>
</function>
<function name='NSEnableScreenUpdates'>
<retval declared_type='void' type='v'/>
</function>
<function name='NSEraseRect'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSEventMaskFromType' inline='true'>
<arg name='type' declared_type='NSEventType' type64='Q' type='I'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</function>
<function name='NSFrameRect'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSFrameRectWithWidth'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='frameWidth' declared_type='CGFloat' type64='d' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSFrameRectWithWidthUsingOperation'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='frameWidth' declared_type='CGFloat' type64='d' type='f'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSGetAlertPanel' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</function>
<function name='NSGetCriticalAlertPanel' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</function>
<function name='NSGetFileType'>
<arg name='pboardType' declared_type='NSString*' type='@'/>
<retval declared_type='NSString*' type='@'/>
</function>
<function name='NSGetFileTypes'>
<arg name='pboardTypes' declared_type='NSArray*' type='@'/>
<retval declared_type='NSArray*' type='@'/>
</function>
<function name='NSGetInformationalAlertPanel' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<retval declared_type='id' type='@'/>
</function>
<function name='NSGetWindowServerMemory'>
<arg name='context' declared_type='NSInteger' type64='q' type='i'/>
<arg name='virtualMemory' declared_type='NSInteger*' type64='^q' type='^i'/>
<arg name='windowBackingMemory' declared_type='NSInteger*' type64='^q' type='^i'/>
<arg name='windowDumpString' declared_type='NSString**' type='^@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSHighlightRect'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSInterfaceStyleForKey'>
<arg name='key' declared_type='NSString*' type='@'/>
<arg name='responder' declared_type='NSResponder*' type='@'/>
<retval declared_type='NSInterfaceStyle' type64='Q' type='I'/>
</function>
<function name='NSIsControllerMarker'>
<arg name='object' declared_type='id' type='@'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='NSNumberOfColorComponents'>
<arg name='colorSpaceName' declared_type='NSString*' type='@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSOpenGLGetOption'>
<arg name='pname' declared_type='NSOpenGLGlobalOption' type='i'/>
<arg name='param' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSOpenGLGetVersion'>
<arg name='major' declared_type='GLint*' type='^i'/>
<arg name='minor' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSOpenGLSetOption'>
<arg name='pname' declared_type='NSOpenGLGlobalOption' type='i'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSPerformService'>
<arg name='itemName' declared_type='NSString*' type='@'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='NSPlanarFromDepth'>
<arg name='depth' declared_type='NSWindowDepth' type='i'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='NSReadPixel'>
<arg name='passedPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
<retval declared_type='NSColor*' type='@'/>
</function>
<function name='NSRectClip'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectClipList'>
<arg name='rects' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectFill'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectFillList'>
<arg name='rects' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectFillListUsingOperation'>
<arg name='rects' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectFillListWithColors'>
<arg name='rects' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='colors' declared_type='NSColor **' const='true' type='^@'/>
<arg name='num' declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectFillListWithColorsUsingOperation'>
<arg name='rects' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='colors' declared_type='NSColor **' const='true' type='^@'/>
<arg name='num' declared_type='NSInteger' type64='q' type='i'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectFillListWithGrays'>
<arg name='rects' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' const='true' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='grays' declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
<arg name='num' declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRectFillUsingOperation'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRegisterServicesProvider'>
<arg name='provider' declared_type='id' type='@'/>
<arg name='name' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSReleaseAlertPanel'>
<arg name='panel' declared_type='id' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSRunAlertPanel' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSRunAlertPanelRelativeToWindow' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<arg name='docWindow' declared_type='NSWindow*' type='@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSRunCriticalAlertPanel' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSRunCriticalAlertPanelRelativeToWindow' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<arg name='docWindow' declared_type='NSWindow*' type='@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSRunInformationalAlertPanel' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSRunInformationalAlertPanelRelativeToWindow' variadic='true'>
<arg name='title' declared_type='NSString*' type='@'/>
<arg name='msgFormat' declared_type='NSString*' type='@'/>
<arg name='defaultButton' declared_type='NSString*' type='@'/>
<arg name='alternateButton' declared_type='NSString*' type='@'/>
<arg name='otherButton' declared_type='NSString*' type='@'/>
<arg name='docWindow' declared_type='NSWindow*' type='@'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSSetFocusRingStyle'>
<arg name='placement' declared_type='NSFocusRingPlacement' type64='Q' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSSetShowsServicesMenuItem'>
<arg name='itemName' declared_type='NSString*' type='@'/>
<arg name='enabled' declared_type='BOOL' type='B'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</function>
<function name='NSShowAnimationEffect'>
<arg name='animationEffect' declared_type='NSAnimationEffect' type64='Q' type='I'/>
<arg name='centerLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
<arg name='animationDelegate' declared_type='id' type='@'/>
<arg name='didEndSelector' declared_type='SEL' type=':'/>
<arg name='contextInfo' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSShowsServicesMenuItem'>
<arg name='itemName' declared_type='NSString*' type='@'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='NSUnregisterServicesProvider'>
<arg name='name' declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSUpdateDynamicServices'>
<retval declared_type='void' type='v'/>
</function>
<function name='NSWindowList'>
<arg name='size' declared_type='NSInteger' type64='q' type='i'/>
<arg name='list' declared_type='NSInteger*' type64='^q' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NSWindowListForContext'>
<arg name='context' declared_type='NSInteger' type64='q' type='i'/>
<arg name='size' declared_type='NSInteger' type64='q' type='i'/>
<arg name='list' declared_type='NSInteger*' type64='^q' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<class name='CIColor'>
<method selector='initWithColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='CIImage'>
<method selector='drawAtPoint:fromRect:operation:fraction:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='fromRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<arg name='delta' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:fromRect:operation:fraction:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='fromRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<arg name='delta' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithBitmapImageRep:'>
<arg name='bitmapImageRep' declared_type='NSBitmapImageRep*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSATSTypesetter'>
<method selector='attributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='bidiProcessingEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='1'/>
<arg name='proposedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='glyphPosition' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='4'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='characterRangeForGlyphRange:actualGlyphRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='currentTextContainer'>
<retval declared_type='NSTextContainer*' type='@'/>
</method>
<method selector='deleteGlyphsInRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:'>
<arg name='glyphsRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='glyphBuffer' declared_type='NSGlyph*' type='^I' index='1'/>
<arg name='charIndexBuffer' declared_type='NSUInteger*' type64='^Q' type='^I' index='2'/>
<arg name='inscribeBuffer' declared_type='NSGlyphInscription*' type64='^Q' type='^I' index='3'/>
<arg name='elasticBuffer' declared_type='BOOL*' type='^B' index='4'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:'>
<arg name='lineFragmentRect' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='lineFragmentUsedRect' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='paragraphSeparatorGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='lineOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='glyphRangeForCharacterRange:actualCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='hyphenCharacterForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='UTF32Char' type64='I' type='L'/>
</method>
<method selector='hyphenationFactor'>
<retval declared_type='float' type='f'/>
</method>
<method selector='hyphenationFactorForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='float' type='f'/>
</method>
<method selector='insertGlyph:atGlyphIndex:characterIndex:'>
<arg name='glyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutManager'>
<retval declared_type='NSLayoutManager*' type='@'/>
</method>
<method selector='layoutParagraphAtPoint:'>
<arg name='lineFragmentOrigin' declared_type='NSPoint*' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='lineFragmentPadding'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='lineFragmentRectForProposedRect:remainingRect:'>
<arg name='proposedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='remainingRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='paragraphGlyphRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='paragraphSeparatorGlyphRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='setAttachmentSize:forGlyphRange:'>
<arg name='attachmentSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedString:'>
<arg name='attrString' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBidiLevels:forGlyphRange:'>
<arg name='levels' declared_type='uint8_t*' const='true' type='*' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBidiProcessingEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsOutsideLineFragment:forGlyphRange:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHardInvalidation:forGlyphRange:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHyphenationFactor:'>
<arg name='factor' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineFragmentPadding:'>
<arg name='padding' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:'>
<arg name='fragmentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='usedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='baselineOffset' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocation:withAdvancements:forStartOfGlyphRange:'>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='advancements' declared_type='CGFloat*' type64='^d' const='true' type='^f' index='1'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNotShownAttribute:forGlyphRange:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParagraphGlyphRange:separatorGlyphRange:'>
<arg name='paragraphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='paragraphSeparatorRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTypesetterBehavior:'>
<arg name='behavior' declared_type='NSTypesetterBehavior' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFontLeading:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedTypesetter' class_method='true'>
<retval declared_type='id' type='@'/>
</method>
<method selector='shouldBreakLineByHyphenatingBeforeCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldBreakLineByWordBeforeCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='substituteFontForFont:'>
<arg name='originalFont' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='substituteGlyphsInRange:withGlyphs:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='glyphs' declared_type='NSGlyph*' type='^I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textTabForGlyphLocation:writingDirection:maxLocation:'>
<arg name='glyphLocation' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='direction' declared_type='NSWritingDirection' type64='q' type='i' index='1'/>
<arg name='maxLocation' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='NSTextTab*' type='@'/>
</method>
<method selector='typesetterBehavior'>
<retval declared_type='NSTypesetterBehavior' type64='q' type='i'/>
</method>
<method selector='usesFontLeading'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:'>
<arg name='lineRect' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='usedRect' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='baselineOffset' declared_type='CGFloat*' type64='^d' type='^f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSActionCell'>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='setAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTag:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSAffineTransform'>
<method selector='concat'>
<retval declared_type='void' type='v'/>
</method>
<method selector='set'>
<retval declared_type='void' type='v'/>
</method>
<method selector='transformBezierPath:'>
<arg name='aPath' declared_type='NSBezierPath*' type='@' index='0'/>
<retval declared_type='NSBezierPath*' type='@'/>
</method>
</class>
<class name='NSAlert'>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='addButtonWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSButton*' type='@'/>
</method>
<method selector='alertStyle'>
<retval declared_type='NSAlertStyle' type64='Q' type='I'/>
</method>
<method selector='alertWithError:' class_method='true'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='NSAlert*' type='@'/>
</method>
<method variadic='true' selector='alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:' class_method='true'>
<arg name='message' declared_type='NSString*' type='@' index='0'/>
<arg name='defaultButton' declared_type='NSString*' type='@' index='1'/>
<arg name='alternateButton' declared_type='NSString*' type='@' index='2'/>
<arg name='otherButton' declared_type='NSString*' type='@' index='3'/>
<arg name='format' declared_type='NSString*' type='@' index='4'/>
<retval declared_type='NSAlert*' type='@'/>
</method>
<method selector='beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='delegate' declared_type='id' type='@' index='1'/>
<arg name='didEndSelector' declared_type='SEL' type=':' index='2'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='buttons'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='helpAnchor'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='icon'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='informativeText'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='layout'>
<retval declared_type='void' type='v'/>
</method>
<method selector='messageText'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='runModal'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAccessoryView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlertStyle:'>
<arg name='style' declared_type='NSAlertStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHelpAnchor:'>
<arg name='anchor' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIcon:'>
<arg name='icon' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInformativeText:'>
<arg name='informativeText' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMessageText:'>
<arg name='messageText' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsHelp:'>
<arg name='showsHelp' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsSuppressionButton:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsHelp'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsSuppressionButton'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='suppressionButton'>
<retval declared_type='NSButton*' type='@'/>
</method>
<method selector='window'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSAnimation'>
<method selector='addProgressMark:'>
<arg name='progressMark' declared_type='NSAnimationProgress' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='animationBlockingMode'>
<retval declared_type='NSAnimationBlockingMode' type64='Q' type='I'/>
</method>
<method selector='animationCurve'>
<retval declared_type='NSAnimationCurve' type64='Q' type='I'/>
</method>
<method selector='clearStartAnimation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='clearStopAnimation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='currentProgress'>
<retval declared_type='NSAnimationProgress' type='f'/>
</method>
<method selector='currentValue'>
<retval declared_type='float' type='f'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='duration'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='frameRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='initWithDuration:animationCurve:'>
<arg name='duration' declared_type='NSTimeInterval' type='d' index='0'/>
<arg name='animationCurve' declared_type='NSAnimationCurve' type64='Q' type='I' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isAnimating'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='progressMarks'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='removeProgressMark:'>
<arg name='progressMark' declared_type='NSAnimationProgress' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runLoopModesForAnimating'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='setAnimationBlockingMode:'>
<arg name='animationBlockingMode' declared_type='NSAnimationBlockingMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnimationCurve:'>
<arg name='curve' declared_type='NSAnimationCurve' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCurrentProgress:'>
<arg name='progress' declared_type='NSAnimationProgress' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDuration:'>
<arg name='duration' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameRate:'>
<arg name='framesPerSecond' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProgressMarks:'>
<arg name='progressMarks' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startAnimation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='startWhenAnimation:reachesProgress:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<arg name='startProgress' declared_type='NSAnimationProgress' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopAnimation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopWhenAnimation:reachesProgress:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<arg name='stopProgress' declared_type='NSAnimationProgress' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSAnimationContext'>
<method selector='beginGrouping' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='completionHandler'>
<retval function_pointer='true' declared_type='void (^)(void)' type='@?'>
<retval declared_type='void' type='v'/>
</retval>
</method>
<method selector='currentContext' class_method='true'>
<retval declared_type='NSAnimationContext*' type='@'/>
</method>
<method selector='duration'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='endGrouping' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='runAnimationGroup:completionHandler:' class_method='true'>
<arg name='changes' function_pointer='true' declared_type='void (^)(NSAnimationContext *)' type='@?' index='0'>
<arg declared_type='NSAnimationContext*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(void)' type='@?' index='1'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompletionHandler:'>
<arg name='handler' function_pointer='true' declared_type='void (^)(void)' type='@?' index='0'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDuration:'>
<arg name='duration' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTimingFunction:'>
<arg name='newTimingFunction' declared_type='CAMediaTimingFunction*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='timingFunction'>
<retval declared_type='CAMediaTimingFunction*' type='@'/>
</method>
</class>
<class name='NSAppleScript'>
<method selector='richTextSource'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
</class>
<class name='NSApplication'>
<method selector='abortModal'>
<retval declared_type='void' type='v'/>
</method>
<method selector='activateContextHelpMode:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='activateIgnoringOtherApps:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='activationPolicy'>
<retval declared_type='NSApplicationActivationPolicy' type64='q' type='i'/>
</method>
<method selector='addWindowsItem:title:filename:'>
<arg name='win' declared_type='NSWindow*' type='@' index='0'/>
<arg name='aString' declared_type='NSString*' type='@' index='1'/>
<arg name='isFilename' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='application:printFiles:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filenames' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationIconImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='arrangeInFront:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginModalSessionForWindow:'>
<arg name='theWindow' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSModalSession' type='^{_NSModalSession=}'/>
</method>
<method selector='beginModalSessionForWindow:relativeToWindow:'>
<arg name='theWindow' declared_type='NSWindow*' type='@' index='0'/>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='1'/>
<retval declared_type='NSModalSession' type='^{_NSModalSession=}'/>
</method>
<method selector='beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:'>
<arg name='sheet' declared_type='NSWindow*' type='@' index='0'/>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='1'/>
<arg name='modalDelegate' declared_type='id' type='@' index='2'/>
<arg name='didEndSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cancelUserAttentionRequest:'>
<arg name='request' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeWindowsItem:title:filename:'>
<arg name='win' declared_type='NSWindow*' type='@' index='0'/>
<arg name='aString' declared_type='NSString*' type='@' index='1'/>
<arg name='isFilename' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='completeStateRestoration'>
<retval declared_type='void' type='v'/>
</method>
<method selector='context'>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='currentEvent'>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='currentSystemPresentationOptions'>
<retval declared_type='NSApplicationPresentationOptions' type64='Q' type='I'/>
</method>
<method selector='deactivate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='detachDrawingThread:toTarget:withObject:' class_method='true'>
<arg name='selector' declared_type='SEL' type=':' index='0'/>
<arg name='target' declared_type='id' type='@' index='1'/>
<arg name='argument' declared_type='id' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='disableRelaunchOnLogin'>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardEventsMatchingMask:beforeEvent:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='lastEvent' declared_type='NSEvent*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dockTile'>
<retval declared_type='NSDockTile*' type='@'/>
</method>
<method selector='enableRelaunchOnLogin'>
<retval declared_type='void' type='v'/>
</method>
<method selector='enabledRemoteNotificationTypes'>
<retval declared_type='NSRemoteNotificationType' type64='Q' type='I'/>
</method>
<method selector='endModalSession:'>
<arg name='session' declared_type='NSModalSession' type='^{_NSModalSession=}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='endSheet:'>
<arg name='sheet' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='endSheet:returnCode:'>
<arg name='sheet' declared_type='NSWindow*' type='@' index='0'/>
<arg name='returnCode' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='extendStateRestoration'>
<retval declared_type='void' type='v'/>
</method>
<method selector='finishLaunching'>
<retval declared_type='void' type='v'/>
</method>
<method selector='helpMenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='hide:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hideOtherApplications:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isActive'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFullKeyboardAccessEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHidden'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRunning'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyWindow'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='mainMenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='mainWindow'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='makeWindowsPerform:inOrder:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='miniaturizeAll:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='modalWindow'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='nextEventMatchingMask:untilDate:inMode:dequeue:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='expiration' declared_type='NSDate*' type='@' index='1'/>
<arg name='mode' declared_type='NSString*' type='@' index='2'/>
<arg name='deqFlag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='orderFrontCharacterPalette:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontColorPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontStandardAboutPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontStandardAboutPanelWithOptions:'>
<arg name='optionsDictionary' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderedDocuments'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='orderedWindows'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='postEvent:atStart:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='presentationOptions'>
<retval declared_type='NSApplicationPresentationOptions' type64='Q' type='I'/>
</method>
<method selector='preventWindowOrdering'>
<retval declared_type='void' type='v'/>
</method>
<method selector='registerForRemoteNotificationTypes:'>
<arg name='types' declared_type='NSRemoteNotificationType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='registerServicesMenuSendTypes:returnTypes:'>
<arg name='sendTypes' declared_type='NSArray*' type='@' index='0'/>
<arg name='returnTypes' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='registerUserInterfaceItemSearchHandler:'>
<arg name='handler' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeWindowsItem:'>
<arg name='win' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replyToApplicationShouldTerminate:'>
<arg name='shouldTerminate' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replyToOpenOrPrint:'>
<arg name='reply' declared_type='NSApplicationDelegateReply' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reportException:'>
<arg name='theException' declared_type='NSException*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='requestUserAttention:'>
<arg name='requestType' declared_type='NSRequestUserAttentionType' type64='Q' type='I' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='restoreWindowWithIdentifier:state:completionHandler:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSWindow *, NSError *)' type='@?' index='2'>
<arg declared_type='NSWindow*' type='@'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='run'>
<retval declared_type='void' type='v'/>
</method>
<method selector='runModalForWindow:'>
<arg name='theWindow' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runModalForWindow:relativeToWindow:'>
<arg name='theWindow' declared_type='NSWindow*' type='@' index='0'/>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runModalSession:'>
<arg name='session' declared_type='NSModalSession' type='^{_NSModalSession=}' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runPageLayout:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='searchString:inUserInterfaceItemString:searchRange:foundRange:'>
<arg name='searchString' declared_type='NSString*' type='@' index='0'/>
<arg name='stringToSearch' declared_type='NSString*' type='@' index='1'/>
<arg name='searchRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='foundRange' declared_type='NSRange*' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sendAction:to:from:'>
<arg name='theAction' declared_type='SEL' type=':' index='0'/>
<arg name='theTarget' declared_type='id' type='@' index='1'/>
<arg name='sender' declared_type='id' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sendEvent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='servicesMenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='servicesProvider'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setActivationPolicy:'>
<arg name='activationPolicy' declared_type='NSApplicationActivationPolicy' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setApplicationIconImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHelpMenu:'>
<arg name='helpMenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMainMenu:'>
<arg name='aMenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPresentationOptions:'>
<arg name='newOptions' declared_type='NSApplicationPresentationOptions' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setServicesMenu:'>
<arg name='aMenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setServicesProvider:'>
<arg name='provider' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWindowsMenu:'>
<arg name='aMenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWindowsNeedUpdate:'>
<arg name='needUpdate' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedApplication' class_method='true'>
<retval declared_type='NSApplication*' type='@'/>
</method>
<method selector='showHelp:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stop:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopModal'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopModalWithCode:'>
<arg name='returnCode' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='targetForAction:'>
<arg name='theAction' declared_type='SEL' type=':' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='targetForAction:to:from:'>
<arg name='theAction' declared_type='SEL' type=':' index='0'/>
<arg name='theTarget' declared_type='id' type='@' index='1'/>
<arg name='sender' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='terminate:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tryToPerform:with:'>
<arg name='anAction' declared_type='SEL' type=':' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='unhide:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unhideAllApplications:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unhideWithoutActivation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unregisterForRemoteNotifications'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unregisterUserInterfaceItemSearchHandler:'>
<arg name='handler' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateWindows'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateWindowsItem:'>
<arg name='win' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='userInterfaceLayoutDirection'>
<retval declared_type='NSUserInterfaceLayoutDirection' type64='q' type='i'/>
</method>
<method selector='validRequestorForSendType:returnType:'>
<arg name='sendType' declared_type='NSString*' type='@' index='0'/>
<arg name='returnType' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='windowWithWindowNumber:'>
<arg name='windowNum' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='windows'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='windowsMenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
</class>
<class name='NSArrayController'>
<method selector='add:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addObjects:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSelectedObjects:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='addSelectionIndexes:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='alwaysUsesMultipleValuesMarker'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='arrangeObjects:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='arrangedObjects'>
<retval declared_type='id' type='@'/>
</method>
<method selector='automaticRearrangementKeyPaths'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='automaticallyRearrangesObjects'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='avoidsEmptySelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canInsert'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canSelectNext'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canSelectPrevious'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='clearsFilterPredicateOnInsertion'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='didChangeArrangementCriteria'>
<retval declared_type='void' type='v'/>
</method>
<method selector='filterPredicate'>
<retval declared_type='NSPredicate*' type='@'/>
</method>
<method selector='insert:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertObject:atArrangedObjectIndex:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertObjects:atArrangedObjectIndexes:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preservesSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rearrangeObjects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='remove:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObjectAtArrangedObjectIndex:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObjects:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObjectsAtArrangedObjectIndexes:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSelectedObjects:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='removeSelectionIndexes:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectNext:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectPrevious:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedObjects'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectionIndex'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='selectionIndexes'>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='selectsInsertedObjects'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAlwaysUsesMultipleValuesMarker:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticallyRearrangesObjects:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAvoidsEmptySelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setClearsFilterPredicateOnInsertion:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFilterPredicate:'>
<arg name='filterPredicate' declared_type='NSPredicate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreservesSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedObjects:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setSelectionIndex:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setSelectionIndexes:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setSelectsInsertedObjects:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSortDescriptors:'>
<arg name='sortDescriptors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortDescriptors'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSAttributedString'>
<method selector='RTFDFileWrapperFromRange:documentAttributes:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='dict' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSFileWrapper*' type='@'/>
</method>
<method selector='RTFDFromRange:documentAttributes:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='dict' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='RTFFromRange:documentAttributes:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='dict' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='URLAtIndex:effectiveRange:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='attributedStringWithAttachment:' class_method='true'>
<arg name='attachment' declared_type='NSTextAttachment*' type='@' index='0'/>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='boundingRectWithSize:options:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='options' declared_type='NSStringDrawingOptions' type64='q' type='i' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='containsAttachments'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dataFromRange:documentAttributes:error:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='dict' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='error' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='docFormatFromRange:documentAttributes:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='dict' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='doubleClickAtIndex:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='drawAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWithRect:options:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='options' declared_type='NSStringDrawingOptions' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fileWrapperFromRange:documentAttributes:error:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='dict' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='error' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='NSFileWrapper*' type='@'/>
</method>
<method selector='fontAttributesInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='initWithData:options:documentAttributes:error:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDocFormat:documentAttributes:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithHTML:baseURL:documentAttributes:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='base' declared_type='NSURL*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithHTML:documentAttributes:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithHTML:options:documentAttributes:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPath:documentAttributes:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRTF:documentAttributes:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRTFD:documentAttributes:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithRTFDFileWrapper:documentAttributes:'>
<arg name='wrapper' declared_type='NSFileWrapper*' type='@' index='0'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithURL:documentAttributes:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithURL:options:documentAttributes:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='itemNumberInTextList:atIndex:'>
<arg name='list' declared_type='NSTextList*' type='@' index='0'/>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='lineBreakBeforeIndex:withinRange:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='aRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='lineBreakByHyphenatingBeforeIndex:withinRange:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='aRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='nextWordFromIndex:forward:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='isForward' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='rangeOfTextBlock:atIndex:'>
<arg name='block' declared_type='NSTextBlock*' type='@' index='0'/>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rangeOfTextList:atIndex:'>
<arg name='list' declared_type='NSTextList*' type='@' index='0'/>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rangeOfTextTable:atIndex:'>
<arg name='table' declared_type='NSTextTable*' type='@' index='0'/>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rulerAttributesInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='size'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='textFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textPasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textUnfilteredFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textUnfilteredPasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textUnfilteredTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSBezierPath'>
<method selector='addClip'>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPath:'>
<arg name='path' declared_type='NSBezierPath*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithArcFromPoint:toPoint:radius:'>
<arg name='point1' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='point2' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:'>
<arg name='center' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='startAngle' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='endAngle' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:'>
<arg name='center' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='radius' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='startAngle' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='endAngle' declared_type='CGFloat' type64='d' type='f' index='3'/>
<arg name='clockwise' declared_type='BOOL' type='B' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithGlyph:inFont:'>
<arg name='glyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='font' declared_type='NSFont*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithGlyphs:count:inFont:'>
<arg name='glyphs' declared_type='NSGlyph*' type='^I' index='0'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='font' declared_type='NSFont*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithOvalInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithPackedGlyphs:'>
<arg name='packedGlyphs' declared_type='char*' const='true' type='*' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithPoints:count:'>
<arg name='points' declared_type='NSPointArray' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='0'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='appendBezierPathWithRoundedRect:xRadius:yRadius:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='xRadius' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='yRadius' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='bezierPath' class_method='true'>
<retval declared_type='NSBezierPath*' type='@'/>
</method>
<method selector='bezierPathByFlatteningPath'>
<retval declared_type='NSBezierPath*' type='@'/>
</method>
<method selector='bezierPathByReversingPath'>
<retval declared_type='NSBezierPath*' type='@'/>
</method>
<method selector='bezierPathWithOvalInRect:' class_method='true'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSBezierPath*' type='@'/>
</method>
<method selector='bezierPathWithRect:' class_method='true'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSBezierPath*' type='@'/>
</method>
<method selector='bezierPathWithRoundedRect:xRadius:yRadius:' class_method='true'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='xRadius' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='yRadius' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='NSBezierPath*' type='@'/>
</method>
<method selector='bounds'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='cachesBezierPath'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='clipRect:' class_method='true'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='closePath'>
<retval declared_type='void' type='v'/>
</method>
<method selector='containsPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='controlPointBounds'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='currentPoint'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='curveToPoint:controlPoint1:controlPoint2:'>
<arg name='endPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='controlPoint1' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='controlPoint2' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='defaultFlatness' class_method='true'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='defaultLineCapStyle' class_method='true'>
<retval declared_type='NSLineCapStyle' type64='Q' type='I'/>
</method>
<method selector='defaultLineJoinStyle' class_method='true'>
<retval declared_type='NSLineJoinStyle' type64='Q' type='I'/>
</method>
<method selector='defaultLineWidth' class_method='true'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='defaultMiterLimit' class_method='true'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='defaultWindingRule' class_method='true'>
<retval declared_type='NSWindingRule' type64='Q' type='I'/>
</method>
<method selector='drawPackedGlyphs:atPoint:' class_method='true'>
<arg name='packedGlyphs' declared_type='char*' const='true' type='*' index='0'/>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='elementAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSBezierPathElement' type64='Q' type='I'/>
</method>
<method selector='elementAtIndex:associatedPoints:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='points' declared_type='NSPointArray' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='1'/>
<retval declared_type='NSBezierPathElement' type64='Q' type='I'/>
</method>
<method selector='elementCount'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='fill'>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillRect:' class_method='true'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='flatness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='getLineDash:count:phase:'>
<arg name='pattern' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<arg name='count' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<arg name='phase' declared_type='CGFloat*' type64='^d' type='^f' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isEmpty'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lineCapStyle'>
<retval declared_type='NSLineCapStyle' type64='Q' type='I'/>
</method>
<method selector='lineJoinStyle'>
<retval declared_type='NSLineJoinStyle' type64='Q' type='I'/>
</method>
<method selector='lineToPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='lineWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='miterLimit'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='moveToPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='relativeCurveToPoint:controlPoint1:controlPoint2:'>
<arg name='endPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='controlPoint1' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='controlPoint2' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='relativeLineToPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='relativeMoveToPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllPoints'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAssociatedPoints:atIndex:'>
<arg name='points' declared_type='NSPointArray' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCachesBezierPath:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setClip'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultFlatness:' class_method='true'>
<arg name='flatness' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultLineCapStyle:' class_method='true'>
<arg name='lineCapStyle' declared_type='NSLineCapStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultLineJoinStyle:' class_method='true'>
<arg name='lineJoinStyle' declared_type='NSLineJoinStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultLineWidth:' class_method='true'>
<arg name='lineWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultMiterLimit:' class_method='true'>
<arg name='limit' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultWindingRule:' class_method='true'>
<arg name='windingRule' declared_type='NSWindingRule' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFlatness:'>
<arg name='flatness' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineCapStyle:'>
<arg name='lineCapStyle' declared_type='NSLineCapStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineDash:count:phase:'>
<arg name='pattern' declared_type='CGFloat*' type64='^d' const='true' type='^f' index='0'/>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='phase' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineJoinStyle:'>
<arg name='lineJoinStyle' declared_type='NSLineJoinStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineWidth:'>
<arg name='lineWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMiterLimit:'>
<arg name='miterLimit' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWindingRule:'>
<arg name='windingRule' declared_type='NSWindingRule' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stroke'>
<retval declared_type='void' type='v'/>
</method>
<method selector='strokeLineFromPoint:toPoint:' class_method='true'>
<arg name='point1' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='point2' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='strokeRect:' class_method='true'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='transformUsingAffineTransform:'>
<arg name='transform' declared_type='NSAffineTransform*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windingRule'>
<retval declared_type='NSWindingRule' type64='Q' type='I'/>
</method>
</class>
<class name='NSBitmapImageRep'>
<method selector='CGImage'>
<retval declared_type='CGImageRef' type='^{CGImage=}'/>
</method>
<method selector='TIFFRepresentation'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='TIFFRepresentationOfImageRepsInArray:' class_method='true'>
<arg name='array' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='TIFFRepresentationOfImageRepsInArray:usingCompression:factor:' class_method='true'>
<arg name='array' declared_type='NSArray*' type='@' index='0'/>
<arg name='comp' declared_type='NSTIFFCompression' type64='Q' type='I' index='1'/>
<arg name='factor' declared_type='float' type='f' index='2'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='TIFFRepresentationUsingCompression:factor:'>
<arg name='comp' declared_type='NSTIFFCompression' type64='Q' type='I' index='0'/>
<arg name='factor' declared_type='float' type='f' index='1'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='bitmapData'>
<retval declared_type='unsigned char*' type='*'/>
</method>
<method selector='bitmapFormat'>
<retval declared_type='NSBitmapFormat' type64='Q' type='I'/>
</method>
<method selector='bitmapImageRepByConvertingToColorSpace:renderingIntent:'>
<arg name='targetSpace' declared_type='NSColorSpace*' type='@' index='0'/>
<arg name='renderingIntent' declared_type='NSColorRenderingIntent' type64='q' type='i' index='1'/>
<retval declared_type='NSBitmapImageRep*' type='@'/>
</method>
<method selector='bitmapImageRepByRetaggingWithColorSpace:'>
<arg name='newSpace' declared_type='NSColorSpace*' type='@' index='0'/>
<retval declared_type='NSBitmapImageRep*' type='@'/>
</method>
<method selector='bitsPerPixel'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='bytesPerPlane'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='bytesPerRow'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='canBeCompressedUsing:'>
<arg name='compression' declared_type='NSTIFFCompression' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='colorAtX:y:'>
<arg name='x' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='y' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorSpace'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='colorizeByMappingGray:toColor:blackMapping:whiteMapping:'>
<arg name='midPoint' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='midPointColor' declared_type='NSColor*' type='@' index='1'/>
<arg name='shadowColor' declared_type='NSColor*' type='@' index='2'/>
<arg name='lightColor' declared_type='NSColor*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getBitmapDataPlanes:'>
<arg name='data' declared_type='unsigned char**' type='^*' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getCompression:factor:'>
<arg name='compression' declared_type='NSTIFFCompression*' type64='^Q' type='^I' index='0'/>
<arg name='factor' declared_type='float*' type='^f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getPixel:atX:y:'>
<arg name='p' declared_type='NSUInteger*' type64='^Q' type='^I' index='0'/>
<arg name='x' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='y' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getTIFFCompressionTypes:count:' class_method='true'>
<arg name='list' declared_type='NSTIFFCompression**' type64='^^Q' const='true' type='^^I' index='0'/>
<arg name='numTypes' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='imageRepWithData:' class_method='true'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='imageRepsWithData:' class_method='true'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='incrementalLoadFromData:complete:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='complete' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='initForIncrementalLoad'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:'>
<arg name='planes' declared_type='unsigned char**' type='^*' index='0'/>
<arg name='width' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='height' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='bps' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='spp' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='alpha' declared_type='BOOL' type='B' index='5'/>
<arg name='isPlanar' declared_type='BOOL' type='B' index='6'/>
<arg name='colorSpaceName' declared_type='NSString*' type='@' index='7'/>
<arg name='bitmapFormat' declared_type='NSBitmapFormat' type64='Q' type='I' index='8'/>
<arg name='rBytes' declared_type='NSInteger' type64='q' type='i' index='9'/>
<arg name='pBits' declared_type='NSInteger' type64='q' type='i' index='10'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:'>
<arg name='planes' declared_type='unsigned char**' type='^*' index='0'/>
<arg name='width' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='height' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='bps' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='spp' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='alpha' declared_type='BOOL' type='B' index='5'/>
<arg name='isPlanar' declared_type='BOOL' type='B' index='6'/>
<arg name='colorSpaceName' declared_type='NSString*' type='@' index='7'/>
<arg name='rBytes' declared_type='NSInteger' type64='q' type='i' index='8'/>
<arg name='pBits' declared_type='NSInteger' type64='q' type='i' index='9'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCGImage:'>
<arg name='cgImage' declared_type='CGImageRef' type='^{CGImage=}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCIImage:'>
<arg name='ciImage' declared_type='CIImage*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFocusedViewRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isPlanar'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='localizedNameForTIFFCompressionType:' class_method='true'>
<arg name='compression' declared_type='NSTIFFCompression' type64='Q' type='I' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='numberOfPlanes'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='representationOfImageRepsInArray:usingType:properties:' class_method='true'>
<arg name='imageReps' declared_type='NSArray*' type='@' index='0'/>
<arg name='storageType' declared_type='NSBitmapImageFileType' type64='Q' type='I' index='1'/>
<arg name='properties' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='representationUsingType:properties:'>
<arg name='storageType' declared_type='NSBitmapImageFileType' type64='Q' type='I' index='0'/>
<arg name='properties' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='samplesPerPixel'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setColor:atX:y:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<arg name='x' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='y' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompression:factor:'>
<arg name='compression' declared_type='NSTIFFCompression' type64='Q' type='I' index='0'/>
<arg name='factor' declared_type='float' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPixel:atX:y:'>
<arg name='p' declared_type='NSUInteger*' type64='^Q' type='^I' index='0'/>
<arg name='x' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='y' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setProperty:withValue:'>
<arg name='property' declared_type='NSString*' type='@' index='0'/>
<arg name='value' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='valueForProperty:'>
<arg name='property' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSBox'>
<method selector='borderColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='borderRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='borderType'>
<retval declared_type='NSBorderType' type64='Q' type='I'/>
</method>
<method selector='borderWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='boxType'>
<retval declared_type='NSBoxType' type64='Q' type='I'/>
</method>
<method selector='contentView'>
<retval declared_type='id' type='@'/>
</method>
<method selector='contentViewMargins'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='cornerRadius'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='fillColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='isTransparent'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setBorderColor:'>
<arg name='borderColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBorderType:'>
<arg name='aType' declared_type='NSBorderType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBorderWidth:'>
<arg name='borderWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBoxType:'>
<arg name='boxType' declared_type='NSBoxType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentViewMargins:'>
<arg name='offsetSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCornerRadius:'>
<arg name='cornerRadius' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFillColor:'>
<arg name='fillColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameFromContentFrame:'>
<arg name='contentFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitlePosition:'>
<arg name='aPosition' declared_type='NSTitlePosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTransparent:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='titleFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='titlePosition'>
<retval declared_type='NSTitlePosition' type64='Q' type='I'/>
</method>
<method selector='titleRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
</class>
<class name='NSBrowser'>
<method selector='acceptsArrowKeys'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='addColumn'>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowsBranchSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsEmptySelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsMultipleSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsTypeSelect'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autohidesScroller'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='canDragRowsWithIndexes:inColumn:withEvent:'>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cellClass' class_method='true'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='cellPrototype'>
<retval declared_type='id' type='@'/>
</method>
<method selector='clickedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='clickedRow'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='columnContentWidthForColumnWidth:'>
<arg name='columnWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='columnOfMatrix:'>
<arg name='matrix' declared_type='NSMatrix*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='columnResizingType'>
<retval declared_type='NSBrowserColumnResizingType' type64='Q' type='I'/>
</method>
<method selector='columnWidthForColumnContentWidth:'>
<arg name='columnContentWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='columnsAutosaveName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='defaultColumnWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='displayAllColumns'>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doClick:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doDoubleClick:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doubleAction'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='draggingImageForRowsWithIndexes:inColumn:withEvent:offset:'>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='3'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='drawTitleOfColumn:inRect:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='editItemAtIndexPath:withEvent:select:'>
<arg name='indexPath' declared_type='NSIndexPath*' type='@' index='0'/>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='1'/>
<arg name='select' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='firstVisibleColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='frameOfColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='frameOfInsideOfColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='frameOfRow:inColumn:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='getRow:column:forPoint:'>
<arg name='row' declared_type='NSInteger*' type64='^q' type='^i' index='0'/>
<arg name='column' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasHorizontalScroller'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='indexPathForColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSIndexPath*' type='@'/>
</method>
<method selector='isLeafItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isLoaded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTitled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='itemAtIndexPath:'>
<arg name='indexPath' declared_type='NSIndexPath*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='itemAtRow:inColumn:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='lastColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='lastVisibleColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='loadColumnZero'>
<retval declared_type='void' type='v'/>
</method>
<method selector='loadedCellAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='matrixClass'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='matrixInColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSMatrix*' type='@'/>
</method>
<method selector='maxVisibleColumns'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='minColumnWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='noteHeightOfRowsWithIndexesChanged:inColumn:'>
<arg name='indexSet' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='numberOfVisibleColumns'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='parentForItemsInColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='path'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='pathSeparator'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='pathToColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='prefersAllColumnUserResizing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='reloadColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadDataForRowIndexes:inColumn:'>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSavedColumnsWithAutosaveName:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reusesColumns'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rowHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='scrollColumnToVisible:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollColumnsLeftBy:'>
<arg name='shiftAmount' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollColumnsRightBy:'>
<arg name='shiftAmount' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollRowToVisible:inColumn:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollViaScroller:'>
<arg name='sender' declared_type='NSScroller*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectAll:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectRow:inColumn:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectRowIndexes:inColumn:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='selectedCellInColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='selectedCells'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='selectedRowInColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='selectedRowIndexesInColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='selectionIndexPath'>
<retval declared_type='NSIndexPath*' type='@'/>
</method>
<method selector='selectionIndexPaths'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='sendAction'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sendsActionOnArrowKeys'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='separatesColumns'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAcceptsArrowKeys:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsBranchSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsEmptySelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsMultipleSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsTypeSelect:'>
<arg name='value' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutohidesScroller:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCellClass:'>
<arg name='factoryId' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCellPrototype:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColumnResizingType:'>
<arg name='columnResizingType' declared_type='NSBrowserColumnResizingType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColumnsAutosaveName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultColumnWidth:'>
<arg name='columnWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingSourceOperationMask:forLocal:'>
<arg name='mask' declared_type='NSDragOperation' type64='Q' type='I' index='0'/>
<arg name='isLocal' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasHorizontalScroller:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLastColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMatrixClass:'>
<arg name='factoryId' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxVisibleColumns:'>
<arg name='columnCount' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinColumnWidth:'>
<arg name='columnWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPath:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setPathSeparator:'>
<arg name='newString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPrefersAllColumnUserResizing:'>
<arg name='prefersAllColumnResizing' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReusesColumns:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowHeight:'>
<arg name='height' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionIndexPath:'>
<arg name='path' declared_type='NSIndexPath*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionIndexPaths:'>
<arg name='paths' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSendsActionOnArrowKeys:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSeparatesColumns:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTakesTitleFromPreviousColumn:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:ofColumn:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidth:ofColumn:'>
<arg name='columnWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takesTitleFromPreviousColumn'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tile'>
<retval declared_type='void' type='v'/>
</method>
<method selector='titleFrameOfColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='titleHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='titleOfColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='updateScroller'>
<retval declared_type='void' type='v'/>
</method>
<method selector='validateVisibleColumns'>
<retval declared_type='void' type='v'/>
</method>
<method selector='widthOfColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSBrowserCell'>
<method selector='alternateImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='branchImage' class_method='true'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='highlightColorInView:'>
<arg name='controlView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='highlightedBranchImage' class_method='true'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='isLeaf'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isLoaded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='reset'>
<retval declared_type='void' type='v'/>
</method>
<method selector='set'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateImage:'>
<arg name='newAltImage' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLeaf:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLoaded:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSBundle'>
<method selector='URLForImageResource:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='contextHelpForKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='imageForResource:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='loadNibFile:externalNameTable:withZone:' class_method='true'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='context' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='zone' declared_type='NSZone*' type='^{_NSZone=}' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadNibFile:externalNameTable:withZone:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='context' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='zone' declared_type='NSZone*' type='^{_NSZone=}' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadNibNamed:owner:' class_method='true'>
<arg name='nibName' declared_type='NSString*' type='@' index='0'/>
<arg name='owner' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pathForImageResource:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='pathForSoundResource:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSButton'>
<method selector='allowsMixedState'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='alternateImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='alternateTitle'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='attributedAlternateTitle'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='attributedTitle'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='bezelStyle'>
<retval declared_type='NSBezelStyle' type64='Q' type='I'/>
</method>
<method selector='getPeriodicDelay:interval:'>
<arg name='delay' declared_type='float*' type='^f' index='0'/>
<arg name='interval' declared_type='float*' type='^f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='highlight:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='imagePosition'>
<retval declared_type='NSCellImagePosition' type64='Q' type='I'/>
</method>
<method selector='isBordered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTransparent'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyEquivalent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='keyEquivalentModifierMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='performKeyEquivalent:'>
<arg name='key' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAllowsMixedState:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedAlternateTitle:'>
<arg name='obj' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedTitle:'>
<arg name='aString' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezelStyle:'>
<arg name='bezelStyle' declared_type='NSBezelStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setButtonType:'>
<arg name='aType' declared_type='NSButtonType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImagePosition:'>
<arg name='aPosition' declared_type='NSCellImagePosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalent:'>
<arg name='charCode' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalentModifierMask:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNextState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPeriodicDelay:interval:'>
<arg name='delay' declared_type='float' type='f' index='0'/>
<arg name='interval' declared_type='float' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsBorderOnlyWhileMouseInside:'>
<arg name='show' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSound:'>
<arg name='aSound' declared_type='NSSound*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setState:'>
<arg name='value' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTransparent:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsBorderOnlyWhileMouseInside'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sound'>
<retval declared_type='NSSound*' type='@'/>
</method>
<method selector='state'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSButtonCell'>
<method selector='alternateImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='alternateMnemonic'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='alternateMnemonicLocation'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='alternateTitle'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='attributedAlternateTitle'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='attributedTitle'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='bezelStyle'>
<retval declared_type='NSBezelStyle' type64='Q' type='I'/>
</method>
<method selector='drawBezelWithFrame:inView:'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawImage:withFrame:inView:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawTitle:withFrame:inView:'>
<arg name='title' declared_type='NSAttributedString*' type='@' index='0'/>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='getPeriodicDelay:interval:'>
<arg name='delay' declared_type='float*' type='^f' index='0'/>
<arg name='interval' declared_type='float*' type='^f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='gradientType'>
<retval declared_type='NSGradientType' type64='Q' type='I'/>
</method>
<method selector='highlightsBy'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='imageDimsWhenDisabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='imagePosition'>
<retval declared_type='NSCellImagePosition' type64='Q' type='I'/>
</method>
<method selector='imageScaling'>
<retval declared_type='NSImageScaling' type64='Q' type='I'/>
</method>
<method selector='isOpaque'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTransparent'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyEquivalent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='keyEquivalentFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='keyEquivalentModifierMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='mouseEntered:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseExited:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performClick:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateMnemonicLocation:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedAlternateTitle:'>
<arg name='obj' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedTitle:'>
<arg name='obj' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezelStyle:'>
<arg name='bezelStyle' declared_type='NSBezelStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setButtonType:'>
<arg name='aType' declared_type='NSButtonType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGradientType:'>
<arg name='type' declared_type='NSGradientType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHighlightsBy:'>
<arg name='aType' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageDimsWhenDisabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImagePosition:'>
<arg name='aPosition' declared_type='NSCellImagePosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageScaling:'>
<arg name='scaling' declared_type='NSImageScaling' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalent:'>
<arg name='aKeyEquivalent' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalentFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalentFont:size:'>
<arg name='fontName' declared_type='NSString*' type='@' index='0'/>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalentModifierMask:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPeriodicDelay:interval:'>
<arg name='delay' declared_type='float' type='f' index='0'/>
<arg name='interval' declared_type='float' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsBorderOnlyWhileMouseInside:'>
<arg name='show' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsStateBy:'>
<arg name='aType' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSound:'>
<arg name='aSound' declared_type='NSSound*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTransparent:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsBorderOnlyWhileMouseInside'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsStateBy'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='sound'>
<retval declared_type='NSSound*' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSCIImageRep'>
<method selector='CIImage'>
<retval declared_type='CIImage*' type='@'/>
</method>
<method selector='imageRepWithCIImage:' class_method='true'>
<arg name='image' declared_type='CIImage*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCIImage:'>
<arg name='image' declared_type='CIImage*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSCachedImageRep'>
<method selector='initWithSize:depth:separate:alpha:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='depth' declared_type='NSWindowDepth' type='i' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<arg name='alpha' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithWindow:rect:'>
<arg name='win' declared_type='NSWindow*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='window'>
<retval declared_type='NSWindow*' type='@'/>
</method>
</class>
<class name='NSCell'>
<method selector='acceptsFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='alignment'>
<retval declared_type='NSTextAlignment' type64='Q' type='I'/>
</method>
<method selector='allowsEditingTextAttributes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsMixedState'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsUndo'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='attributedStringValue'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='backgroundStyle'>
<retval declared_type='NSBackgroundStyle' type64='q' type='i'/>
</method>
<method selector='baseWritingDirection'>
<retval declared_type='NSWritingDirection' type64='q' type='i'/>
</method>
<method selector='calcDrawInfo:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cellAttribute:'>
<arg name='aParameter' declared_type='NSCellAttribute' type64='Q' type='I' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='cellSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='cellSizeForBounds:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='compare:'>
<arg name='otherCell' declared_type='id' type='@' index='0'/>
<retval declared_type='NSComparisonResult' type64='q' type='i'/>
</method>
<method selector='continueTracking:at:inView:'>
<arg name='lastPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='currentPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='controlSize'>
<retval declared_type='NSControlSize' type64='Q' type='I'/>
</method>
<method selector='controlTint'>
<retval declared_type='NSControlTint' type64='Q' type='I'/>
</method>
<method selector='controlView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='defaultFocusRingType' class_method='true'>
<retval declared_type='NSFocusRingType' type64='Q' type='I'/>
</method>
<method selector='defaultMenu' class_method='true'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='doubleValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='draggingImageComponentsWithFrame:inView:'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='drawFocusRingMaskWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInteriorWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWithExpansionFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawingRectForBounds:'>
<arg name='theRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='editWithFrame:inView:editor:delegate:event:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='textObj' declared_type='NSText*' type='@' index='2'/>
<arg name='anObject' declared_type='id' type='@' index='3'/>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='endEditing:'>
<arg name='textObj' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='entryType'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='expansionFrameWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='fieldEditorForView:'>
<arg name='aControlView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='NSTextView*' type='@'/>
</method>
<method selector='floatValue'>
<retval declared_type='float' type='f'/>
</method>
<method selector='focusRingMaskBoundsForFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='focusRingType'>
<retval declared_type='NSFocusRingType' type64='Q' type='I'/>
</method>
<method selector='font'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='formatter'>
<retval declared_type='id' type='@'/>
</method>
<method selector='getPeriodicDelay:interval:'>
<arg name='delay' declared_type='float*' type='^f' index='0'/>
<arg name='interval' declared_type='float*' type='^f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hasValidObjectValue'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='highlight:withFrame:inView:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='highlightColorWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='hitTestForEvent:inRect:ofView:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='imageRectForBounds:'>
<arg name='theRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='importsGraphics'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initImageCell:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initTextCell:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='intValue'>
<retval declared_type='int' type='i'/>
</method>
<method selector='integerValue'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='interiorBackgroundStyle'>
<retval declared_type='NSBackgroundStyle' type64='q' type='i'/>
</method>
<method selector='isBezeled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isBordered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isContinuous'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEntryAcceptable:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHighlighted'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isOpaque'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isScrollable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyEquivalent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='lineBreakMode'>
<retval declared_type='NSLineBreakMode' type64='Q' type='I'/>
</method>
<method selector='menu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='menuForEvent:inRect:ofView:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='mnemonic'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='mnemonicLocation'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='mouseDownFlags'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='nextState'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='objectValue'>
<retval declared_type='id' type='@'/>
</method>
<method selector='performClick:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='prefersTrackingUntilMouseUp' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='refusesFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='representedObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='resetCursorRect:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectWithFrame:inView:editor:delegate:start:length:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='textObj' declared_type='NSText*' type='@' index='2'/>
<arg name='anObject' declared_type='id' type='@' index='3'/>
<arg name='selStart' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='selLength' declared_type='NSInteger' type64='q' type='i' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sendActionOn:'>
<arg name='mask' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='sendsActionOnEndEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlignment:'>
<arg name='mode' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsEditingTextAttributes:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsMixedState:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsUndo:'>
<arg name='allowsUndo' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedStringValue:'>
<arg name='obj' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundStyle:'>
<arg name='style' declared_type='NSBackgroundStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBaseWritingDirection:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezeled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCellAttribute:to:'>
<arg name='aParameter' declared_type='NSCellAttribute' type64='Q' type='I' index='0'/>
<arg name='value' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContinuous:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlSize:'>
<arg name='size' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlTint:'>
<arg name='controlTint' declared_type='NSControlTint' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleValue:'>
<arg name='aDouble' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEntryType:'>
<arg name='aType' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatValue:'>
<arg name='aFloat' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatingPointFormat:left:right:'>
<arg name='autoRange' declared_type='BOOL' type='B' index='0'/>
<arg name='leftDigits' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='rightDigits' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFocusRingType:'>
<arg name='focusRingType' declared_type='NSFocusRingType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFormatter:'>
<arg name='newFormatter' declared_type='NSFormatter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHighlighted:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImportsGraphics:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntValue:'>
<arg name='anInt' declared_type='int' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntegerValue:'>
<arg name='anInteger' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineBreakMode:'>
<arg name='mode' declared_type='NSLineBreakMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:'>
<arg name='aMenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMnemonicLocation:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNextState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjectValue:'>
<arg name='obj' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRefusesFirstResponder:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRepresentedObject:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSendsActionOnEndEditing:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsFirstResponder:'>
<arg name='showFR' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setState:'>
<arg name='value' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStringValue:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTag:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTruncatesLastVisibleLine:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setType:'>
<arg name='aType' declared_type='NSCellType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUpFieldEditorAttributes:'>
<arg name='textObj' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='NSText*' type='@'/>
</method>
<method selector='setUserInterfaceLayoutDirection:'>
<arg name='layoutDirection' declared_type='NSUserInterfaceLayoutDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesSingleLineMode:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWraps:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='startTrackingAt:inView:'>
<arg name='startPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='state'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='stopTracking:at:inView:mouseIsUp:'>
<arg name='lastPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='stopPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stringValue'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='takeDoubleValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeFloatValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeIntValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeIntegerValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeObjectValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeStringValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleRectForBounds:'>
<arg name='theRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='trackMouse:inRect:ofView:untilMouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='truncatesLastVisibleLine'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='type'>
<retval declared_type='NSCellType' type64='Q' type='I'/>
</method>
<method selector='userInterfaceLayoutDirection'>
<retval declared_type='NSUserInterfaceLayoutDirection' type64='q' type='i'/>
</method>
<method selector='usesSingleLineMode'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsNotificationForMarkedText'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wraps'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSClipView'>
<method selector='autoscroll:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='constrainScrollPoint:'>
<arg name='newOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='copiesOnScroll'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='documentCursor'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='documentRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='documentView'>
<retval declared_type='id' type='@'/>
</method>
<method selector='documentVisibleRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='scrollToPoint:'>
<arg name='newOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCopiesOnScroll:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDocumentCursor:'>
<arg name='anObj' declared_type='NSCursor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDocumentView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewBoundsChanged:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewFrameChanged:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSCoder'>
<method selector='decodeNXColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
</class>
<class name='NSCollectionView'>
<method selector='allowsMultipleSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColors'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='content'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='draggingImageForItemsAtIndexes:withEvent:offset:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='2'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='frameForItemAtIndex:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='frameForItemAtIndex:withNumberOfItems:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='numberOfItems' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='isFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='itemAtIndex:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSCollectionViewItem*' type='@'/>
</method>
<method selector='itemPrototype'>
<retval declared_type='NSCollectionViewItem*' type='@'/>
</method>
<method selector='maxItemSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='maxNumberOfColumns'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='maxNumberOfRows'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='minItemSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='newItemForRepresentedObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='NSCollectionViewItem*' type='@'/>
</method>
<method selector='selectionIndexes'>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='setAllowsMultipleSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColors:'>
<arg name='colors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContent:'>
<arg name='content' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='aDelegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingSourceOperationMask:forLocal:'>
<arg name='dragOperationMask' declared_type='NSDragOperation' type64='Q' type='I' index='0'/>
<arg name='localDestination' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setItemPrototype:'>
<arg name='prototype' declared_type='NSCollectionViewItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxItemSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxNumberOfColumns:'>
<arg name='number' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxNumberOfRows:'>
<arg name='number' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinItemSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionIndexes:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSCollectionViewItem'>
<method selector='collectionView'>
<retval declared_type='NSCollectionView*' type='@'/>
</method>
<method selector='draggingImageComponents'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageView'>
<retval declared_type='NSImageView*' type='@'/>
</method>
<method selector='isSelected'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setImageView:'>
<arg name='imageView' declared_type='NSImageView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelected:'>
<arg name='selected' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextField:'>
<arg name='textField' declared_type='NSTextField*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textField'>
<retval declared_type='NSTextField*' type='@'/>
</method>
</class>
<class name='NSColor'>
<method selector='alphaComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='alternateSelectedControlColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='alternateSelectedControlTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='blackColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='blackComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='blendedColorWithFraction:ofColor:'>
<arg name='fraction' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='color' declared_type='NSColor*' type='@' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='blueColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='blueComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='brightnessComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='brownColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='catalogNameComponent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='clearColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorForControlTint:' class_method='true'>
<arg name='controlTint' declared_type='NSControlTint' type64='Q' type='I' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorFromPasteboard:' class_method='true'>
<arg name='pasteBoard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorNameComponent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='colorSpace'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='colorSpaceName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='colorUsingColorSpace:'>
<arg name='space' declared_type='NSColorSpace*' type='@' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorUsingColorSpaceName:'>
<arg name='colorSpace' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorUsingColorSpaceName:device:'>
<arg name='colorSpace' declared_type='NSString*' type='@' index='0'/>
<arg name='deviceDescription' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithAlphaComponent:'>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithCIColor:' class_method='true'>
<arg name='color' declared_type='CIColor*' type='@' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithCalibratedHue:saturation:brightness:alpha:' class_method='true'>
<arg name='hue' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='saturation' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='brightness' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithCalibratedRed:green:blue:alpha:' class_method='true'>
<arg name='red' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='green' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='blue' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithCalibratedWhite:alpha:' class_method='true'>
<arg name='white' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithCatalogName:colorName:' class_method='true'>
<arg name='listName' declared_type='NSString*' type='@' index='0'/>
<arg name='colorName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithColorSpace:components:count:' class_method='true'>
<arg name='space' declared_type='NSColorSpace*' type='@' index='0'/>
<arg name='components' declared_type='CGFloat*' type64='^d' const='true' type='^f' index='1'/>
<arg name='numberOfComponents' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithDeviceCyan:magenta:yellow:black:alpha:' class_method='true'>
<arg name='cyan' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='magenta' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='yellow' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='black' declared_type='CGFloat' type64='d' type='f' index='3'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='4'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithDeviceHue:saturation:brightness:alpha:' class_method='true'>
<arg name='hue' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='saturation' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='brightness' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithDeviceRed:green:blue:alpha:' class_method='true'>
<arg name='red' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='green' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='blue' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithDeviceWhite:alpha:' class_method='true'>
<arg name='white' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithGenericGamma22White:alpha:' class_method='true'>
<arg name='white' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithPatternImage:' class_method='true'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='colorWithSRGBRed:green:blue:alpha:' class_method='true'>
<arg name='red' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='green' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='blue' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='alpha' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='controlAlternatingRowBackgroundColors' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='controlBackgroundColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='controlColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='controlDarkShadowColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='controlHighlightColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='controlLightHighlightColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='controlShadowColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='controlTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='currentControlTint' class_method='true'>
<retval declared_type='NSControlTint' type64='Q' type='I'/>
</method>
<method selector='cyanColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='cyanComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='darkGrayColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='disabledControlTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='drawSwatchInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getComponents:'>
<arg name='components' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getCyan:magenta:yellow:black:alpha:'>
<arg name='cyan' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<arg name='magenta' declared_type='CGFloat*' type64='^d' type='^f' index='1'/>
<arg name='yellow' declared_type='CGFloat*' type64='^d' type='^f' index='2'/>
<arg name='black' declared_type='CGFloat*' type64='^d' type='^f' index='3'/>
<arg name='alpha' declared_type='CGFloat*' type64='^d' type='^f' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getHue:saturation:brightness:alpha:'>
<arg name='hue' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<arg name='saturation' declared_type='CGFloat*' type64='^d' type='^f' index='1'/>
<arg name='brightness' declared_type='CGFloat*' type64='^d' type='^f' index='2'/>
<arg name='alpha' declared_type='CGFloat*' type64='^d' type='^f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getRed:green:blue:alpha:'>
<arg name='red' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<arg name='green' declared_type='CGFloat*' type64='^d' type='^f' index='1'/>
<arg name='blue' declared_type='CGFloat*' type64='^d' type='^f' index='2'/>
<arg name='alpha' declared_type='CGFloat*' type64='^d' type='^f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getWhite:alpha:'>
<arg name='white' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<arg name='alpha' declared_type='CGFloat*' type64='^d' type='^f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='grayColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='greenColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='greenComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='gridColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='headerColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='headerTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='highlightColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='highlightWithLevel:'>
<arg name='val' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='hueComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='ignoresAlpha' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyboardFocusIndicatorColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='knobColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='lightGrayColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='localizedCatalogNameComponent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='localizedColorNameComponent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='magentaColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='magentaComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='numberOfComponents'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='orangeColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='patternImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='purpleColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='redColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='redComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='saturationComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='scrollBarColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='secondarySelectedControlColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='selectedControlColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='selectedControlTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='selectedKnobColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='selectedMenuItemColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='selectedMenuItemTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='selectedTextBackgroundColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='selectedTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='set'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFill'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIgnoresAlpha:' class_method='true'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStroke'>
<retval declared_type='void' type='v'/>
</method>
<method selector='shadowColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='shadowWithLevel:'>
<arg name='val' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='textBackgroundColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='textColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='whiteColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='whiteComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='windowBackgroundColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='windowFrameColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='windowFrameTextColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='writeToPasteboard:'>
<arg name='pasteBoard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='yellowColor' class_method='true'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='yellowComponent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSColorList'>
<method selector='allKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='availableColorLists' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='colorListNamed:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSColorList*' type='@'/>
</method>
<method selector='colorWithKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='initWithName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithName:fromFile:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<arg name='path' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertColor:key:atIndex:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<arg name='key' declared_type='NSString*' type='@' index='1'/>
<arg name='loc' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='removeColorWithKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeFile'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:forKey:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<arg name='key' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='writeToFile:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSColorPanel'>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='alpha'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='attachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='color'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='detachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dragColor:withEvent:fromView:' class_method='true'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='1'/>
<arg name='sourceView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isContinuous'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mode'>
<retval declared_type='NSColorPanelMode' type64='q' type='i'/>
</method>
<method selector='setAccessoryView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContinuous:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMode:'>
<arg name='mode' declared_type='NSColorPanelMode' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPickerMask:' class_method='true'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPickerMode:' class_method='true'>
<arg name='mode' declared_type='NSColorPanelMode' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsAlpha:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedColorPanel' class_method='true'>
<retval declared_type='NSColorPanel*' type='@'/>
</method>
<method selector='sharedColorPanelExists' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsAlpha'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSColorPicker'>
<method selector='attachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='buttonToolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='colorPanel'>
<retval declared_type='NSColorPanel*' type='@'/>
</method>
<method selector='detachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithPickerMask:colorPanel:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='owningColorPanel' declared_type='NSColorPanel*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertNewButtonImage:in:'>
<arg name='newButtonImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='buttonCell' declared_type='NSButtonCell*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='minContentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='provideNewButtonImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='setMode:'>
<arg name='mode' declared_type='NSColorPanelMode' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewSizeChanged:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSColorSpace'>
<method selector='CGColorSpace'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='ICCProfileData'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='adobeRGB1998ColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='availableColorSpacesWithModel:' class_method='true'>
<arg name='model' declared_type='NSColorSpaceModel' type64='q' type='i' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='colorSpaceModel'>
<retval declared_type='NSColorSpaceModel' type64='q' type='i'/>
</method>
<method selector='colorSyncProfile'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='deviceCMYKColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='deviceGrayColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='deviceRGBColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='genericCMYKColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='genericGamma22GrayColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='genericGrayColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='genericRGBColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='initWithCGColorSpace:'>
<arg name='cgColorSpace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithColorSyncProfile:'>
<arg name='prof' declared_type='void*' type='^v' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithICCProfileData:'>
<arg name='iccData' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='localizedName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='numberOfColorComponents'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='sRGBColorSpace' class_method='true'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
</class>
<class name='NSColorWell'>
<method selector='activate:'>
<arg name='exclusive' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='color'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='deactivate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWellInside:'>
<arg name='insideRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isActive'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isBordered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeColorFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSComboBox'>
<method selector='addItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addItemsWithObjectValues:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='completes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dataSource'>
<retval declared_type='id' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='deselectItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hasVerticalScroller'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='indexOfItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfSelectedItem'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='insertItemWithObjectValue:atIndex:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='intercellSpacing'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='isButtonBordered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='itemHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='itemObjectValueAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='noteNumberOfItemsChanged'>
<retval declared_type='void' type='v'/>
</method>
<method selector='numberOfItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfVisibleItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='objectValueOfSelectedItem'>
<retval declared_type='id' type='@'/>
</method>
<method selector='objectValues'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='reloadData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllItems'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollItemAtIndexToTop:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollItemAtIndexToVisible:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setButtonBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompletes:'>
<arg name='completes' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataSource:'>
<arg name='aSource' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasVerticalScroller:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntercellSpacing:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setItemHeight:'>
<arg name='itemHeight' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfVisibleItems:'>
<arg name='visibleItems' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesDataSource:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesDataSource'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSComboBoxCell'>
<method selector='addItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addItemsWithObjectValues:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='completedString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='completes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dataSource'>
<retval declared_type='id' type='@'/>
</method>
<method selector='deselectItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hasVerticalScroller'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='indexOfItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfSelectedItem'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='insertItemWithObjectValue:atIndex:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='intercellSpacing'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='isButtonBordered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='itemHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='itemObjectValueAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='noteNumberOfItemsChanged'>
<retval declared_type='void' type='v'/>
</method>
<method selector='numberOfItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfVisibleItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='objectValueOfSelectedItem'>
<retval declared_type='id' type='@'/>
</method>
<method selector='objectValues'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='reloadData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllItems'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollItemAtIndexToTop:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollItemAtIndexToVisible:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemWithObjectValue:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setButtonBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompletes:'>
<arg name='completes' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataSource:'>
<arg name='aSource' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasVerticalScroller:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntercellSpacing:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setItemHeight:'>
<arg name='itemHeight' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfVisibleItems:'>
<arg name='visibleItems' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesDataSource:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesDataSource'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSControl'>
<method selector='abortEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='alignment'>
<retval declared_type='NSTextAlignment' type64='Q' type='I'/>
</method>
<method selector='attributedStringValue'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='baseWritingDirection'>
<retval declared_type='NSWritingDirection' type64='q' type='i'/>
</method>
<method selector='calcSize'>
<retval declared_type='void' type='v'/>
</method>
<method selector='cell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='cellClass' class_method='true'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='currentEditor'>
<retval declared_type='NSText*' type='@'/>
</method>
<method selector='doubleValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='drawCell:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawCellInside:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='floatValue'>
<retval declared_type='float' type='f'/>
</method>
<method selector='font'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='formatter'>
<retval declared_type='id' type='@'/>
</method>
<method selector='ignoresMultiClick'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithFrame:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='intValue'>
<retval declared_type='int' type='i'/>
</method>
<method selector='integerValue'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='invalidateIntrinsicContentSizeForCell:'>
<arg name='cell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isContinuous'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mouseDown:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='objectValue'>
<retval declared_type='id' type='@'/>
</method>
<method selector='performClick:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='refusesFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectCell:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='selectedTag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='sendAction:to:'>
<arg name='theAction' declared_type='SEL' type=':' index='0'/>
<arg name='theTarget' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sendActionOn:'>
<arg name='mask' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlignment:'>
<arg name='mode' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedStringValue:'>
<arg name='obj' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBaseWritingDirection:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCell:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCellClass:' class_method='true'>
<arg name='factoryId' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContinuous:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleValue:'>
<arg name='aDouble' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatValue:'>
<arg name='aFloat' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatingPointFormat:left:right:'>
<arg name='autoRange' declared_type='BOOL' type='B' index='0'/>
<arg name='leftDigits' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='rightDigits' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFormatter:'>
<arg name='newFormatter' declared_type='NSFormatter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIgnoresMultiClick:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntValue:'>
<arg name='anInt' declared_type='int' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntegerValue:'>
<arg name='anInteger' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplay'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjectValue:'>
<arg name='obj' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRefusesFirstResponder:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStringValue:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTag:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stringValue'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='takeDoubleValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeFloatValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeIntValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeIntegerValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeObjectValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='takeStringValueFrom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
<method selector='updateCell:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateCellInside:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='validateEditing'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSController'>
<method selector='commitEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='commitEditingWithDelegate:didCommitSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didCommitSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardEditing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='objectDidBeginEditing:'>
<arg name='editor' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='objectDidEndEditing:'>
<arg name='editor' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSCursor'>
<method selector='IBeamCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='IBeamCursorForVerticalLayout' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='arrowCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='closedHandCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='contextualMenuCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='crosshairCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='currentCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='currentSystemCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='disappearingItemCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='dragCopyCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='dragLinkCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='hide' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='hotSpot'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:'>
<arg name='newImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='fg' declared_type='NSColor*' type='@' index='1'/>
<arg name='bg' declared_type='NSColor*' type='@' index='2'/>
<arg name='hotSpot' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithImage:hotSpot:'>
<arg name='newImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isSetOnMouseEntered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSetOnMouseExited'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mouseEntered:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseExited:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='openHandCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='operationNotAllowedCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='pointingHandCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='pop' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='pop'>
<retval declared_type='void' type='v'/>
</method>
<method selector='push'>
<retval declared_type='void' type='v'/>
</method>
<method selector='resizeDownCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='resizeLeftCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='resizeLeftRightCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='resizeRightCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='resizeUpCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='resizeUpDownCursor' class_method='true'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='set'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHiddenUntilMouseMoves:' class_method='true'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOnMouseEntered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOnMouseExited:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unhide' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSCustomImageRep'>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawSelector'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='initWithDrawSelector:delegate:'>
<arg name='aMethod' declared_type='SEL' type=':' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSDatePicker'>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='calendar'>
<retval declared_type='NSCalendar*' type='@'/>
</method>
<method selector='datePickerElements'>
<retval declared_type='NSDatePickerElementFlags' type64='Q' type='I'/>
</method>
<method selector='datePickerMode'>
<retval declared_type='NSDatePickerMode' type64='Q' type='I'/>
</method>
<method selector='datePickerStyle'>
<retval declared_type='NSDatePickerStyle' type64='Q' type='I'/>
</method>
<method selector='dateValue'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isBezeled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isBordered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='locale'>
<retval declared_type='NSLocale*' type='@'/>
</method>
<method selector='maxDate'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='minDate'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezeled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCalendar:'>
<arg name='newCalendar' declared_type='NSCalendar*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDatePickerElements:'>
<arg name='elementFlags' declared_type='NSDatePickerElementFlags' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDatePickerMode:'>
<arg name='newMode' declared_type='NSDatePickerMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDatePickerStyle:'>
<arg name='newStyle' declared_type='NSDatePickerStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDateValue:'>
<arg name='newStartDate' declared_type='NSDate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocale:'>
<arg name='newLocale' declared_type='NSLocale*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxDate:'>
<arg name='date' declared_type='NSDate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinDate:'>
<arg name='date' declared_type='NSDate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTimeInterval:'>
<arg name='newTimeInterval' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTimeZone:'>
<arg name='newTimeZone' declared_type='NSTimeZone*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='timeInterval'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='timeZone'>
<retval declared_type='NSTimeZone*' type='@'/>
</method>
</class>
<class name='NSDatePickerCell'>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='calendar'>
<retval declared_type='NSCalendar*' type='@'/>
</method>
<method selector='datePickerElements'>
<retval declared_type='NSDatePickerElementFlags' type64='Q' type='I'/>
</method>
<method selector='datePickerMode'>
<retval declared_type='NSDatePickerMode' type64='Q' type='I'/>
</method>
<method selector='datePickerStyle'>
<retval declared_type='NSDatePickerStyle' type64='Q' type='I'/>
</method>
<method selector='dateValue'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='locale'>
<retval declared_type='NSLocale*' type='@'/>
</method>
<method selector='maxDate'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='minDate'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCalendar:'>
<arg name='newCalendar' declared_type='NSCalendar*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDatePickerElements:'>
<arg name='elementFlags' declared_type='NSDatePickerElementFlags' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDatePickerMode:'>
<arg name='newMode' declared_type='NSDatePickerMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDatePickerStyle:'>
<arg name='newStyle' declared_type='NSDatePickerStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDateValue:'>
<arg name='newStartDate' declared_type='NSDate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocale:'>
<arg name='newLocale' declared_type='NSLocale*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxDate:'>
<arg name='date' declared_type='NSDate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinDate:'>
<arg name='date' declared_type='NSDate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTimeInterval:'>
<arg name='newTimeInterval' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTimeZone:'>
<arg name='newTimeZone' declared_type='NSTimeZone*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='timeInterval'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='timeZone'>
<retval declared_type='NSTimeZone*' type='@'/>
</method>
</class>
<class name='NSDictionaryController'>
<method selector='excludedKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='includedKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='initialKey'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='initialValue'>
<retval declared_type='id' type='@'/>
</method>
<method selector='localizedKeyDictionary'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='localizedKeyTable'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='newObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setExcludedKeys:'>
<arg name='keys' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncludedKeys:'>
<arg name='keys' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInitialKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInitialValue:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocalizedKeyDictionary:'>
<arg name='dictionary' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocalizedKeyTable:'>
<arg name='stringsFileName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSDockTile'>
<method selector='badgeLabel'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='contentView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='display'>
<retval declared_type='void' type='v'/>
</method>
<method selector='owner'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setBadgeLabel:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsApplicationBadge:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsApplicationBadge'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='size'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
</class>
<class name='NSDocument'>
<method selector='addWindowController:'>
<arg name='windowController' declared_type='NSWindowController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didAutosaveSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='autosaveWithImplicitCancellability:completionHandler:'>
<arg name='autosavingIsImplicitlyCancellable' declared_type='BOOL' type='B' index='0'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSError *)' type='@?' index='1'>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='autosavedContentsFileURL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='autosavesInPlace' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autosavingFileType'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='autosavingIsImplicitlyCancellable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canAsynchronouslyWriteToURL:ofType:forSaveOperation:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='shouldCloseSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='canConcurrentlyReadDocumentsOfType:' class_method='true'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='changeCountTokenForSaveOperation:'>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='checkAutosavingSafetyAndReturnError:'>
<arg name='outError' declared_type='NSError**' type='^@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='close'>
<retval declared_type='void' type='v'/>
</method>
<method selector='continueActivityUsingBlock:'>
<arg name='block' function_pointer='true' declared_type='void (^)(void)' type='@?' index='0'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='continueAsynchronousWorkOnMainThreadUsingBlock:'>
<arg name='block' function_pointer='true' declared_type='void (^)(void)' type='@?' index='0'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='dataOfType:error:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='dataRepresentationOfType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='displayName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='duplicateAndReturnError:'>
<arg name='outError' declared_type='NSError**' type='^@' index='0'/>
<retval declared_type='NSDocument*' type='@'/>
</method>
<method selector='duplicateDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='duplicateDocumentWithDelegate:didDuplicateSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didDuplicateSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeRestorableStateWithCoder:'>
<arg name='coder' declared_type='NSCoder*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fileAttributesToWriteToFile:ofType:saveOperation:'>
<arg name='fullDocumentPath' declared_type='NSString*' type='@' index='0'/>
<arg name='documentTypeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperationType' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<arg name='absoluteOriginalContentsURL' declared_type='NSURL*' type='@' index='3'/>
<arg name='outError' declared_type='NSError**' type='^@' index='4'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='fileModificationDate'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='fileName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fileNameExtensionForType:saveOperation:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fileNameExtensionWasHiddenInLastRunSavePanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='fileType'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fileTypeFromLastRunSavePanel'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fileURL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='fileWrapperOfType:error:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='NSFileWrapper*' type='@'/>
</method>
<method selector='fileWrapperRepresentationOfType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSFileWrapper*' type='@'/>
</method>
<method selector='handleCloseScriptCommand:'>
<arg name='command' declared_type='NSCloseCommand*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='handlePrintScriptCommand:'>
<arg name='command' declared_type='NSScriptCommand*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='handleSaveScriptCommand:'>
<arg name='command' declared_type='NSScriptCommand*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='hasUnautosavedChanges'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasUndoManager'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initForURL:withContentsOfURL:ofType:error:'>
<arg name='urlOrNil' declared_type='NSURL*' type='@' index='0'/>
<arg name='contentsURL' declared_type='NSURL*' type='@' index='1'/>
<arg name='typeName' declared_type='NSString*' type='@' index='2'/>
<arg name='outError' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentsOfFile:ofType:'>
<arg name='absolutePath' declared_type='NSString*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentsOfURL:ofType:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentsOfURL:ofType:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithType:error:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='invalidateRestorableState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isDocumentEdited'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEntireFileLoaded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isInViewingMode'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isNativeType:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keepBackupFile'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lastComponentOfFileName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='loadDataRepresentation:ofType:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadFileWrapperRepresentation:ofType:'>
<arg name='wrapper' declared_type='NSFileWrapper*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='makeWindowControllers'>
<retval declared_type='void' type='v'/>
</method>
<method selector='objectSpecifier'>
<retval declared_type='NSScriptObjectSpecifier*' type='@'/>
</method>
<method selector='performActivityWithSynchronousWaiting:usingBlock:'>
<arg name='waitSynchronously' declared_type='BOOL' type='B' index='0'/>
<arg name='block' function_pointer='true' declared_type='void (^)(void (^)(void))' type='@?' index='1'>
<arg declared_type='void (^)(void)' type='@?'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='performAsynchronousFileAccessUsingBlock:'>
<arg name='block' function_pointer='true' declared_type='void (^)(void (^)(void))' type='@?' index='0'>
<arg declared_type='void (^)(void)' type='@?'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='performSynchronousFileAccessUsingBlock:'>
<arg name='block' function_pointer='true' declared_type='void (^)(void)' type='@?' index='0'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='preparePageLayout:'>
<arg name='pageLayout' declared_type='NSPageLayout*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='prepareSavePanel:'>
<arg name='savePanel' declared_type='NSSavePanel*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='presentError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='presentError:modalForWindow:delegate:didPresentSelector:contextInfo:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<arg name='window' declared_type='NSWindow*' type='@' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didPresentSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preservesVersions' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='printDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:'>
<arg name='printSettings' declared_type='NSDictionary*' type='@' index='0'/>
<arg name='showPrintPanel' declared_type='BOOL' type='B' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didPrintSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='printInfo'>
<retval declared_type='NSPrintInfo*' type='@'/>
</method>
<method selector='printOperationWithSettings:error:'>
<arg name='printSettings' declared_type='NSDictionary*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='printShowingPrintPanel:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='readFromData:ofType:error:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readFromFile:ofType:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readFromFileWrapper:ofType:error:'>
<arg name='fileWrapper' declared_type='NSFileWrapper*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readFromURL:ofType:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readFromURL:ofType:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readableTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='removeWindowController:'>
<arg name='windowController' declared_type='NSWindowController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='restorableStateKeyPaths' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='restoreDocumentWindowWithIdentifier:state:completionHandler:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSWindow *, NSError *)' type='@?' index='2'>
<arg declared_type='NSWindow*' type='@'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='restoreStateWithCoder:'>
<arg name='coder' declared_type='NSCoder*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='revertDocumentToSaved:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='revertToContentsOfURL:ofType:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='revertToSavedFromFile:ofType:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='revertToSavedFromURL:ofType:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='runModalPageLayoutWithPrintInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<arg name='delegate' declared_type='id' type='@' index='1'/>
<arg name='didRunSelector' declared_type='SEL' type=':' index='2'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runModalPrintOperation:delegate:didRunSelector:contextInfo:'>
<arg name='printOperation' declared_type='NSPrintOperation*' type='@' index='0'/>
<arg name='delegate' declared_type='id' type='@' index='1'/>
<arg name='didRunSelector' declared_type='SEL' type=':' index='2'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:'>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='0'/>
<arg name='delegate' declared_type='id' type='@' index='1'/>
<arg name='didSaveSelector' declared_type='SEL' type=':' index='2'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runPageLayout:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveDocumentAs:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveDocumentTo:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveDocumentWithDelegate:didSaveSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didSaveSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didSaveSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveToURL:ofType:forSaveOperation:completionHandler:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSError *)' type='@?' index='3'>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<arg name='delegate' declared_type='id' type='@' index='3'/>
<arg name='didSaveSelector' declared_type='SEL' type=':' index='4'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveToURL:ofType:forSaveOperation:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<arg name='outError' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='scheduleAutosaving'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutosavedContentsFileURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayName:'>
<arg name='displayNameOrNil' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFileModificationDate:'>
<arg name='modificationDate' declared_type='NSDate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFileName:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFileType:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFileURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasUndoManager:'>
<arg name='hasUndoManager' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLastComponentOfFileName:'>
<arg name='str' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPrintInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUndoManager:'>
<arg name='undoManager' declared_type='NSUndoManager*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldChangePrintInfo:'>
<arg name='newPrintInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:'>
<arg name='windowController' declared_type='NSWindowController*' type='@' index='0'/>
<arg name='delegate' declared_type='id' type='@' index='1'/>
<arg name='shouldCloseSelector' declared_type='SEL' type=':' index='2'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldRunSavePanelWithAccessoryView'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showWindows'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unblockUserInteraction'>
<retval declared_type='void' type='v'/>
</method>
<method selector='undoManager'>
<retval declared_type='NSUndoManager*' type='@'/>
</method>
<method selector='updateChangeCount:'>
<arg name='change' declared_type='NSDocumentChangeType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateChangeCountWithToken:forSaveOperation:'>
<arg name='changeCountToken' declared_type='id' type='@' index='0'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='validateUserInterfaceItem:'>
<arg name='anItem' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='willNotPresentError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='willPresentError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='NSError*' type='@'/>
</method>
<method selector='windowControllerDidLoadNib:'>
<arg name='windowController' declared_type='NSWindowController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowControllerWillLoadNib:'>
<arg name='windowController' declared_type='NSWindowController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowControllers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='windowForSheet'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='windowNibName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='writableTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='writableTypesForSaveOperation:'>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='writeSafelyToURL:ofType:forSaveOperation:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<arg name='outError' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeToFile:ofType:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeToFile:ofType:originalFile:saveOperation:'>
<arg name='fullDocumentPath' declared_type='NSString*' type='@' index='0'/>
<arg name='documentTypeName' declared_type='NSString*' type='@' index='1'/>
<arg name='fullOriginalDocumentPath' declared_type='NSString*' type='@' index='2'/>
<arg name='saveOperationType' declared_type='NSSaveOperationType' type64='Q' type='I' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeToURL:ofType:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeToURL:ofType:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeToURL:ofType:forSaveOperation:originalContentsURL:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<arg name='absoluteOriginalContentsURL' declared_type='NSURL*' type='@' index='3'/>
<arg name='outError' declared_type='NSError**' type='^@' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeWithBackupToFile:ofType:saveOperation:'>
<arg name='fullDocumentPath' declared_type='NSString*' type='@' index='0'/>
<arg name='documentTypeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperationType' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSDocumentController'>
<method selector='URLsFromRunningOpenPanel'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='addDocument:'>
<arg name='document' declared_type='NSDocument*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='autosavingDelay'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='clearRecentDocuments:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didCloseAllSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='currentDirectory'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='currentDocument'>
<retval declared_type='id' type='@'/>
</method>
<method selector='defaultType'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='displayNameForType:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='documentClassForType:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='Class' type='#'/>
</method>
<method selector='documentClassNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='documentForFileName:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='documentForURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='documentForWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='documents'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='duplicateDocumentWithContentsOfURL:copying:displayName:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='duplicateByCopying' declared_type='BOOL' type='B' index='1'/>
<arg name='displayNameOrNil' declared_type='NSString*' type='@' index='2'/>
<arg name='outError' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='NSDocument*' type='@'/>
</method>
<method selector='fileExtensionsFromType:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='fileNamesFromRunningOpenPanel'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='hasEditedDocuments'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeDocumentForURL:withContentsOfURL:ofType:error:'>
<arg name='urlOrNil' declared_type='NSURL*' type='@' index='0'/>
<arg name='contentsURL' declared_type='NSURL*' type='@' index='1'/>
<arg name='typeName' declared_type='NSString*' type='@' index='2'/>
<arg name='outError' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeDocumentWithContentsOfFile:ofType:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeDocumentWithContentsOfURL:ofType:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeDocumentWithContentsOfURL:ofType:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeUntitledDocumentOfType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeUntitledDocumentOfType:error:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='maximumRecentDocumentCount'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='newDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='noteNewRecentDocument:'>
<arg name='document' declared_type='NSDocument*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='noteNewRecentDocumentURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='openDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='openDocumentWithContentsOfFile:display:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<arg name='display' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='openDocumentWithContentsOfURL:display:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='display' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='openDocumentWithContentsOfURL:display:completionHandler:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='displayDocument' declared_type='BOOL' type='B' index='1'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSDocument *, BOOL, NSError *)' type='@?' index='2'>
<arg declared_type='NSDocument*' type='@'/>
<arg declared_type='BOOL' type='B'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='openDocumentWithContentsOfURL:display:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='displayDocument' declared_type='BOOL' type='B' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='openUntitledDocumentAndDisplay:error:'>
<arg name='displayDocument' declared_type='BOOL' type='B' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='openUntitledDocumentOfType:display:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<arg name='display' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='presentError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='presentError:modalForWindow:delegate:didPresentSelector:contextInfo:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<arg name='window' declared_type='NSWindow*' type='@' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didPresentSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='recentDocumentURLs'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='removeDocument:'>
<arg name='document' declared_type='NSDocument*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reopenDocumentForURL:withContentsOfURL:display:completionHandler:'>
<arg name='urlOrNil' declared_type='NSURL*' type='@' index='0'/>
<arg name='contentsURL' declared_type='NSURL*' type='@' index='1'/>
<arg name='displayDocument' declared_type='BOOL' type='B' index='2'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSDocument *, BOOL, NSError *)' type='@?' index='3'>
<arg declared_type='NSDocument*' type='@'/>
<arg declared_type='BOOL' type='B'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='reopenDocumentForURL:withContentsOfURL:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='contentsURL' declared_type='NSURL*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<arg name='cancellable' declared_type='BOOL' type='B' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didReviewAllSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runModalOpenPanel:forTypes:'>
<arg name='openPanel' declared_type='NSOpenPanel*' type='@' index='0'/>
<arg name='types' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='saveAllDocuments:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutosavingDelay:'>
<arg name='autosavingDelay' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldCreateUI:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedDocumentController' class_method='true'>
<retval declared_type='id' type='@'/>
</method>
<method selector='shouldCreateUI'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='typeForContentsOfURL:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='typeFromFileExtension:'>
<arg name='fileNameExtensionOrHFSFileType' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='validateUserInterfaceItem:'>
<arg name='anItem' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='willPresentError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='NSError*' type='@'/>
</method>
</class>
<class name='NSDraggingImageComponent'>
<method selector='contents'>
<retval declared_type='id' type='@'/>
</method>
<method selector='draggingImageComponentWithKey:' class_method='true'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='frame'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='initWithKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='key'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setContents:'>
<arg name='contents' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrame:'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSDraggingItem'>
<method selector='draggingFrame'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='imageComponents'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageComponentsProvider'>
<retval function_pointer='true' declared_type='NSArray *(^)(void)' type='@?'>
<retval declared_type='NSArray*' type='@'/>
</retval>
</method>
<method selector='initWithPasteboardWriter:'>
<arg name='pasteboardWriter' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='item'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setDraggingFrame:'>
<arg name='draggingFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingFrame:contents:'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='contents' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageComponentsProvider:'>
<arg name='imageComponentsProvider' function_pointer='true' declared_type='NSArray *(^)(void)' type='@?' index='0'>
<retval declared_type='NSArray*' type='@'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSDraggingSession'>
<method selector='animatesToStartingPositionsOnCancelOrFail'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='draggingFormation'>
<retval declared_type='NSDraggingFormation' type64='q' type='i'/>
</method>
<method selector='draggingLeaderIndex'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='draggingLocation'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='draggingPasteboard'>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='draggingSequenceNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:'>
<arg name='enumOpts' declared_type='NSDraggingItemEnumerationOptions' type64='Q' type='I' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<arg name='classArray' declared_type='NSArray*' type='@' index='2'/>
<arg name='searchOptions' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='block' function_pointer='true' declared_type='void (^)(NSDraggingItem *, NSInteger, BOOL *)' type='@?' index='4'>
<arg declared_type='NSDraggingItem*' type='@'/>
<arg declared_type='NSInteger' type64='q' type='i'/>
<arg declared_type='BOOL*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnimatesToStartingPositionsOnCancelOrFail:'>
<arg name='animatesToStartingPositionsOnCancelOrFail' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingFormation:'>
<arg name='draggingFormation' declared_type='NSDraggingFormation' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingLeaderIndex:'>
<arg name='draggingLeaderIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSDrawer'>
<method selector='close'>
<retval declared_type='void' type='v'/>
</method>
<method selector='close:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='contentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='edge'>
<retval declared_type='NSRectEdge' type64='Q' type='i'/>
</method>
<method selector='initWithContentSize:preferredEdge:'>
<arg name='contentSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='leadingOffset'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='maxContentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='minContentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='open'>
<retval declared_type='void' type='v'/>
</method>
<method selector='open:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='openOnEdge:'>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='parentWindow'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='preferredEdge'>
<retval declared_type='NSRectEdge' type64='Q' type='i'/>
</method>
<method selector='setContentSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLeadingOffset:'>
<arg name='offset' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxContentSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinContentSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParentWindow:'>
<arg name='parent' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreferredEdge:'>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTrailingOffset:'>
<arg name='offset' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='state'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='toggle:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='trailingOffset'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSEPSImageRep'>
<method selector='EPSRepresentation'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='boundingBox'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='imageRepWithData:' class_method='true'>
<arg name='epsData' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:'>
<arg name='epsData' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='prepareGState'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSEvent'>
<method selector='CGEvent'>
<retval declared_type='CGEventRef' type='^{__CGEvent=}'/>
</method>
<method selector='absoluteX'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='absoluteY'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='absoluteZ'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='addGlobalMonitorForEventsMatchingMask:handler:' class_method='true'>
<arg name='mask' declared_type='NSEventMask' type='Q' index='0'/>
<arg name='block' function_pointer='true' declared_type='void (^)(NSEvent *)' type='@?' index='1'>
<arg declared_type='NSEvent*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='addLocalMonitorForEventsMatchingMask:handler:' class_method='true'>
<arg name='mask' declared_type='NSEventMask' type='Q' index='0'/>
<arg name='block' function_pointer='true' declared_type='NSEvent *(^)(NSEvent *)' type='@?' index='1'>
<arg declared_type='NSEvent*' type='@'/>
<retval declared_type='NSEvent*' type='@'/>
</arg>
<retval declared_type='id' type='@'/>
</method>
<method selector='buttonMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='buttonNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='capabilityMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='characters'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='charactersIgnoringModifiers'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='clickCount'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='context'>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='data1'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='data2'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='deltaX'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='deltaY'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='deltaZ'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='deviceID'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='doubleClickInterval' class_method='true'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:' class_method='true'>
<arg name='type' declared_type='NSEventType' type64='Q' type='I' index='0'/>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='flags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='time' declared_type='NSTimeInterval' type='d' index='3'/>
<arg name='wNum' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='5'/>
<arg name='eNum' declared_type='NSInteger' type64='q' type='i' index='6'/>
<arg name='tNum' declared_type='NSInteger' type64='q' type='i' index='7'/>
<arg name='data' declared_type='void*' type='^v' index='8'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='eventNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='eventRef'>
<retval declared_type='void*' const='true' type='^v'/>
</method>
<method selector='eventWithCGEvent:' class_method='true'>
<arg name='cgEvent' declared_type='CGEventRef' type='^{__CGEvent=}' index='0'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='eventWithEventRef:' class_method='true'>
<arg name='eventRef' declared_type='void*' const='true' type='^v' index='0'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='hasPreciseScrollingDeltas'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isARepeat'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isDirectionInvertedFromDevice'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEnteringProximity'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMouseCoalescingEnabled' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSwipeTrackingFromScrollEventsEnabled' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyCode'>
<retval declared_type='unsigned short' type='S'/>
</method>
<method selector='keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:' class_method='true'>
<arg name='type' declared_type='NSEventType' type64='Q' type='I' index='0'/>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='flags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='time' declared_type='NSTimeInterval' type='d' index='3'/>
<arg name='wNum' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='5'/>
<arg name='keys' declared_type='NSString*' type='@' index='6'/>
<arg name='ukeys' declared_type='NSString*' type='@' index='7'/>
<arg name='flag' declared_type='BOOL' type='B' index='8'/>
<arg name='code' declared_type='unsigned short' type='S' index='9'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='keyRepeatDelay' class_method='true'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='keyRepeatInterval' class_method='true'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='locationInWindow'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='magnification'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='modifierFlags' class_method='true'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='modifierFlags'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='momentumPhase'>
<retval declared_type='NSEventPhase' type64='Q' type='I'/>
</method>
<method selector='mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:' class_method='true'>
<arg name='type' declared_type='NSEventType' type64='Q' type='I' index='0'/>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='flags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='time' declared_type='NSTimeInterval' type='d' index='3'/>
<arg name='wNum' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='5'/>
<arg name='eNum' declared_type='NSInteger' type64='q' type='i' index='6'/>
<arg name='cNum' declared_type='NSInteger' type64='q' type='i' index='7'/>
<arg name='pressure' declared_type='float' type='f' index='8'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='mouseLocation' class_method='true'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:' class_method='true'>
<arg name='type' declared_type='NSEventType' type64='Q' type='I' index='0'/>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='flags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='time' declared_type='NSTimeInterval' type='d' index='3'/>
<arg name='wNum' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='5'/>
<arg name='subtype' declared_type='short' type='s' index='6'/>
<arg name='d1' declared_type='NSInteger' type64='q' type='i' index='7'/>
<arg name='d2' declared_type='NSInteger' type64='q' type='i' index='8'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='phase'>
<retval declared_type='NSEventPhase' type64='Q' type='I'/>
</method>
<method selector='pointingDeviceID'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='pointingDeviceSerialNumber'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='pointingDeviceType'>
<retval declared_type='NSPointingDeviceType' type64='Q' type='I'/>
</method>
<method selector='pressedMouseButtons' class_method='true'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='pressure'>
<retval declared_type='float' type='f'/>
</method>
<method selector='removeMonitor:' class_method='true'>
<arg name='eventMonitor' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotation'>
<retval declared_type='float' type='f'/>
</method>
<method selector='scrollingDeltaX'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='scrollingDeltaY'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='setMouseCoalescingEnabled:' class_method='true'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startPeriodicEventsAfterDelay:withPeriod:' class_method='true'>
<arg name='delay' declared_type='NSTimeInterval' type='d' index='0'/>
<arg name='period' declared_type='NSTimeInterval' type='d' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopPeriodicEvents' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='subtype'>
<retval declared_type='short' type='s'/>
</method>
<method selector='systemTabletID'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='tabletID'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='tangentialPressure'>
<retval declared_type='float' type='f'/>
</method>
<method selector='tilt'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='timestamp'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='touchesMatchingPhase:inView:'>
<arg name='phase' declared_type='NSTouchPhase' type64='Q' type='I' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:'>
<arg name='options' declared_type='NSEventSwipeTrackingOptions' type64='Q' type='I' index='0'/>
<arg name='minDampenThreshold' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='maxDampenThreshold' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='trackingHandler' function_pointer='true' declared_type='void (^)(CGFloat, NSEventPhase, BOOL, BOOL *)' type='@?' index='3'>
<arg declared_type='CGFloat' type64='d' type='f'/>
<arg declared_type='NSEventPhase' type64='Q' type='I'/>
<arg declared_type='BOOL' type='B'/>
<arg declared_type='BOOL*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='trackingArea'>
<retval declared_type='NSTrackingArea*' type='@'/>
</method>
<method selector='trackingNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='type'>
<retval declared_type='NSEventType' type64='Q' type='I'/>
</method>
<method selector='uniqueID'>
<retval declared_type='unsigned long long' type='Q'/>
</method>
<method selector='userData'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='vendorDefined'>
<retval declared_type='id' type='@'/>
</method>
<method selector='vendorID'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='vendorPointingDeviceType'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='window'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='windowNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</class>
<class name='NSFileWrapper'>
<method selector='icon'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='setIcon:'>
<arg name='icon' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSFont'>
<method selector='advancementForGlyph:'>
<arg name='ag' declared_type='NSGlyph' type='I' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='afmDictionary'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='ascender'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='boldSystemFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='boundingRectForFont'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='boundingRectForGlyph:'>
<arg name='aGlyph' declared_type='NSGlyph' type='I' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='capHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='controlContentFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='coveredCharacterSet'>
<retval declared_type='NSCharacterSet*' type='@'/>
</method>
<method selector='defaultLineHeightForFont'>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='descender'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='displayName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='encodingScheme'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='familyName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fontDescriptor'>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fontWithDescriptor:size:' class_method='true'>
<arg name='fontDescriptor' declared_type='NSFontDescriptor*' type='@' index='0'/>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='fontWithDescriptor:textTransform:' class_method='true'>
<arg name='fontDescriptor' declared_type='NSFontDescriptor*' type='@' index='0'/>
<arg name='textTransform' declared_type='NSAffineTransform*' type='@' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='fontWithName:matrix:' class_method='true'>
<arg name='fontName' declared_type='NSString*' type='@' index='0'/>
<arg name='fontMatrix' declared_type='CGFloat*' type64='^d' const='true' type='^f' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='fontWithName:size:' class_method='true'>
<arg name='fontName' declared_type='NSString*' type='@' index='0'/>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='getAdvancements:forGlyphs:count:'>
<arg name='advancements' declared_type='NSSizeArray' type64='^{CGSize=dd}' type='^{_NSSize=ff}' index='0'/>
<arg name='glyphs' declared_type='NSGlyph*' const='true' type='^I' index='1'/>
<arg name='glyphCount' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getAdvancements:forPackedGlyphs:length:'>
<arg name='advancements' declared_type='NSSizeArray' type64='^{CGSize=dd}' type='^{_NSSize=ff}' index='0'/>
<arg name='packedGlyphs' declared_type='void*' const='true' type='^v' index='1'/>
<arg name='length' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getBoundingRects:forGlyphs:count:'>
<arg name='bounds' declared_type='NSRectArray' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='glyphs' declared_type='NSGlyph*' const='true' type='^I' index='1'/>
<arg name='glyphCount' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='glyphIsEncoded:'>
<arg name='aGlyph' declared_type='NSGlyph' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='glyphPacking'>
<retval declared_type='NSMultibyteGlyphPacking' type='I'/>
</method>
<method selector='glyphWithName:'>
<arg name='aName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSGlyph' type='I'/>
</method>
<method selector='isBaseFont'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFixedPitch'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isVertical'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='italicAngle'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='labelFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='labelFontSize' class_method='true'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='leading'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='matrix'>
<retval declared_type='CGFloat*' type64='^d' const='true' type='^f'/>
</method>
<method selector='maximumAdvancement'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='menuBarFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='menuFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='messageFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='mostCompatibleStringEncoding'>
<retval declared_type='NSStringEncoding' type64='Q' type='I'/>
</method>
<method selector='numberOfGlyphs'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='paletteFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='pointSize'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='positionOfGlyph:forCharacter:struckOverRect:'>
<arg name='aGlyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='aChar' declared_type='unichar' type='S' index='1'/>
<arg name='aRect' declared_type='NSRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='NSPoint' type='{_NSPoint=ff}'/>
</method>
<method selector='positionOfGlyph:precededByGlyph:isNominal:'>
<arg name='curGlyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='prevGlyph' declared_type='NSGlyph' type='I' index='1'/>
<arg name='nominal' declared_type='BOOL*' type='^B' index='2'/>
<retval declared_type='NSPoint' type='{_NSPoint=ff}'/>
</method>
<method selector='positionOfGlyph:struckOverGlyph:metricsExist:'>
<arg name='curGlyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='prevGlyph' declared_type='NSGlyph' type='I' index='1'/>
<arg name='exist' declared_type='BOOL*' type='^B' index='2'/>
<retval declared_type='NSPoint' type='{_NSPoint=ff}'/>
</method>
<method selector='positionOfGlyph:struckOverRect:metricsExist:'>
<arg name='aGlyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='aRect' declared_type='NSRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='exist' declared_type='BOOL*' type='^B' index='2'/>
<retval declared_type='NSPoint' type='{_NSPoint=ff}'/>
</method>
<method selector='positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:'>
<arg name='thisGlyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='rel' declared_type='NSGlyphRelation' type='I' index='1'/>
<arg name='baseGlyph' declared_type='NSGlyph' type='I' index='2'/>
<arg name='adv' declared_type='NSSizePointer' type='^{_NSSize=ff}' index='3'/>
<arg name='exist' declared_type='BOOL*' type='^B' index='4'/>
<retval declared_type='NSPoint' type='{_NSPoint=ff}'/>
</method>
<method selector='positionsForCompositeSequence:numberOfGlyphs:pointArray:'>
<arg name='someGlyphs' declared_type='NSGlyph*' type='^I' index='0'/>
<arg name='numGlyphs' declared_type='NSInteger' type='i' index='1'/>
<arg name='points' declared_type='NSPointArray' type='^{_NSPoint=ff}' index='2'/>
<retval declared_type='NSInteger' type='i'/>
</method>
<method selector='preferredFontNames' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='printerFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='renderingMode'>
<retval declared_type='NSFontRenderingMode' type64='Q' type='I'/>
</method>
<method selector='screenFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='screenFontWithRenderingMode:'>
<arg name='renderingMode' declared_type='NSFontRenderingMode' type64='Q' type='I' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='set'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInContext:'>
<arg name='graphicsContext' declared_type='NSGraphicsContext*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreferredFontNames:' class_method='true'>
<arg name='fontNameArray' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserFixedPitchFont:' class_method='true'>
<arg name='aFont' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserFont:' class_method='true'>
<arg name='aFont' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='smallSystemFontSize' class_method='true'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='systemFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='systemFontSize' class_method='true'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='systemFontSizeForControlSize:' class_method='true'>
<arg name='controlSize' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='textTransform'>
<retval declared_type='NSAffineTransform*' type='@'/>
</method>
<method selector='titleBarFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='toolTipsFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='underlinePosition'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='underlineThickness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='useFont:' class_method='true'>
<arg name='fontName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='userFixedPitchFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='userFontOfSize:' class_method='true'>
<arg name='fontSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='verticalFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='widthOfString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='CGFloat' type='f'/>
</method>
<method selector='xHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSFontCollection'>
<method selector='allFontCollectionNames' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='exclusionDescriptors'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='fontCollectionWithAllAvailableDescriptors' class_method='true'>
<retval declared_type='id' type='@'/>
</method>
<method selector='fontCollectionWithDescriptors:' class_method='true'>
<arg name='queryDescriptors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='fontCollectionWithLocale:' class_method='true'>
<arg name='locale' declared_type='NSLocale*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='fontCollectionWithName:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='fontCollectionWithName:visibility:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<arg name='visibility' declared_type='NSFontCollectionVisibility' type64='Q' type='I' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='hideFontCollectionWithName:visibility:error:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<arg name='visibility' declared_type='NSFontCollectionVisibility' type64='Q' type='I' index='1'/>
<arg name='error' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='matchingDescriptors'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='matchingDescriptorsForFamily:'>
<arg name='family' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='matchingDescriptorsForFamily:options:'>
<arg name='family' declared_type='NSString*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='matchingDescriptorsWithOptions:'>
<arg name='options' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='queryDescriptors'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='renameFontCollectionWithName:visibility:toName:error:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<arg name='visibility' declared_type='NSFontCollectionVisibility' type64='Q' type='I' index='1'/>
<arg name='name' declared_type='NSString*' type='@' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showFontCollection:withName:visibility:error:' class_method='true'>
<arg name='collection' declared_type='NSFontCollection*' type='@' index='0'/>
<arg name='name' declared_type='NSString*' type='@' index='1'/>
<arg name='visibility' declared_type='NSFontCollectionVisibility' type64='Q' type='I' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSFontDescriptor'>
<method selector='fontAttributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='fontDescriptorByAddingAttributes:'>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithFace:'>
<arg name='newFace' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithFamily:'>
<arg name='newFamily' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithFontAttributes:' class_method='true'>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithMatrix:'>
<arg name='matrix' declared_type='NSAffineTransform*' type='@' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithName:matrix:' class_method='true'>
<arg name='fontName' declared_type='NSString*' type='@' index='0'/>
<arg name='matrix' declared_type='NSAffineTransform*' type='@' index='1'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithName:size:' class_method='true'>
<arg name='fontName' declared_type='NSString*' type='@' index='0'/>
<arg name='size' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithSize:'>
<arg name='newPointSize' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='fontDescriptorWithSymbolicTraits:'>
<arg name='symbolicTraits' declared_type='NSFontSymbolicTraits' type='I' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='initWithFontAttributes:'>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='matchingFontDescriptorWithMandatoryKeys:'>
<arg name='mandatoryKeys' declared_type='NSSet*' type='@' index='0'/>
<retval declared_type='NSFontDescriptor*' type='@'/>
</method>
<method selector='matchingFontDescriptorsWithMandatoryKeys:'>
<arg name='mandatoryKeys' declared_type='NSSet*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='matrix'>
<retval declared_type='NSAffineTransform*' type='@'/>
</method>
<method selector='objectForKey:'>
<arg name='anAttribute' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='pointSize'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='postscriptName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='symbolicTraits'>
<retval declared_type='NSFontSymbolicTraits' type='I'/>
</method>
</class>
<class name='NSFontManager'>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='addCollection:options:'>
<arg name='collectionName' declared_type='NSString*' type='@' index='0'/>
<arg name='collectionOptions' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='addFontDescriptors:toCollection:'>
<arg name='descriptors' declared_type='NSArray*' type='@' index='0'/>
<arg name='collectionName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addFontTrait:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='availableFontFamilies'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='availableFontNamesMatchingFontDescriptor:'>
<arg name='descriptor' declared_type='NSFontDescriptor*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='availableFontNamesWithTraits:'>
<arg name='someTraits' declared_type='NSFontTraitMask' type64='Q' type='I' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='availableFonts'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='availableMembersOfFontFamily:'>
<arg name='fam' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='collectionNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='convertAttributes:'>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='convertFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='convertFont:toFace:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<arg name='typeface' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='convertFont:toFamily:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<arg name='family' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='convertFont:toHaveTrait:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<arg name='trait' declared_type='NSFontTraitMask' type64='Q' type='I' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='convertFont:toNotHaveTrait:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<arg name='trait' declared_type='NSFontTraitMask' type64='Q' type='I' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='convertFont:toSize:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<arg name='size' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='convertFontTraits:'>
<arg name='traits' declared_type='NSFontTraitMask' type64='Q' type='I' index='0'/>
<retval declared_type='NSFontTraitMask' type64='Q' type='I'/>
</method>
<method selector='convertWeight:ofFont:'>
<arg name='upFlag' declared_type='BOOL' type='B' index='0'/>
<arg name='fontObj' declared_type='NSFont*' type='@' index='1'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='currentFontAction'>
<retval declared_type='NSFontAction' type64='Q' type='I'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='fontDescriptorsInCollection:'>
<arg name='collectionNames' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='fontMenu:'>
<arg name='create' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='fontNamed:hasTraits:'>
<arg name='fName' declared_type='NSString*' type='@' index='0'/>
<arg name='someTraits' declared_type='NSFontTraitMask' type64='Q' type='I' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='fontPanel:'>
<arg name='create' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSFontPanel*' type='@'/>
</method>
<method selector='fontWithFamily:traits:weight:size:'>
<arg name='family' declared_type='NSString*' type='@' index='0'/>
<arg name='traits' declared_type='NSFontTraitMask' type64='Q' type='I' index='1'/>
<arg name='weight' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='size' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMultiple'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='localizedNameForFamily:face:'>
<arg name='family' declared_type='NSString*' type='@' index='0'/>
<arg name='faceKey' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='modifyFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='modifyFontViaPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontFontPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontStylesPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeCollection:'>
<arg name='collectionName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='removeFontDescriptor:fromCollection:'>
<arg name='descriptor' declared_type='NSFontDescriptor*' type='@' index='0'/>
<arg name='collection' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeFontTrait:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='sendAction'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontManagerFactory:' class_method='true'>
<arg name='factoryId' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontMenu:'>
<arg name='newMenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFontPanelFactory:' class_method='true'>
<arg name='factoryId' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedAttributes:isMultiple:'>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedFont:isMultiple:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='aTarget' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedFontManager' class_method='true'>
<retval declared_type='NSFontManager*' type='@'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
<method selector='traitsOfFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='NSFontTraitMask' type64='Q' type='I'/>
</method>
<method selector='weightOfFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</class>
<class name='NSFontPanel'>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='panelConvertFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='reloadDefaultFontFamilies'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAccessoryView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPanelFont:isMultiple:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedFontPanel' class_method='true'>
<retval declared_type='NSFontPanel*' type='@'/>
</method>
<method selector='sharedFontPanelExists' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='worksWhenModal'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSForm'>
<method selector='addEntry:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSFormCell*' type='@'/>
</method>
<method selector='cellAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawCellAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='indexOfCellWithTag:'>
<arg name='aTag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfSelectedItem'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='insertEntry:atIndex:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSFormCell*' type='@'/>
</method>
<method selector='removeEntryAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectTextAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezeled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEntryWidth:'>
<arg name='width' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameSize:'>
<arg name='newSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInterlineSpacing:'>
<arg name='spacing' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextAlignment:'>
<arg name='mode' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextBaseWritingDirection:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleAlignment:'>
<arg name='mode' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleBaseWritingDirection:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSFormCell'>
<method selector='attributedTitle'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='initTextCell:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isOpaque'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='placeholderAttributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='placeholderString'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setAttributedTitle:'>
<arg name='obj' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlaceholderAttributedString:'>
<arg name='string' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlaceholderString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleAlignment:'>
<arg name='mode' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleBaseWritingDirection:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWidth:'>
<arg name='width' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleAlignment'>
<retval declared_type='NSTextAlignment' type64='Q' type='I'/>
</method>
<method selector='titleBaseWritingDirection'>
<retval declared_type='NSWritingDirection' type64='q' type='i'/>
</method>
<method selector='titleFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='titleWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='titleWidth:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSGlyphGenerator'>
<method selector='generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:'>
<arg name='glyphStorage' declared_type='id' type='@' index='0'/>
<arg name='nChars' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='glyphIndex' declared_type='NSUInteger*' type64='^Q' type='^I' index='2'/>
<arg name='charIndex' declared_type='NSUInteger*' type64='^Q' type='^I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedGlyphGenerator' class_method='true'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSGlyphInfo'>
<method selector='characterCollection'>
<retval declared_type='NSCharacterCollection' type64='Q' type='I'/>
</method>
<method selector='characterIdentifier'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='glyphInfoWithCharacterIdentifier:collection:baseString:' class_method='true'>
<arg name='cid' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='characterCollection' declared_type='NSCharacterCollection' type64='Q' type='I' index='1'/>
<arg name='theString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='NSGlyphInfo*' type='@'/>
</method>
<method selector='glyphInfoWithGlyph:forFont:baseString:' class_method='true'>
<arg name='glyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='font' declared_type='NSFont*' type='@' index='1'/>
<arg name='theString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='NSGlyphInfo*' type='@'/>
</method>
<method selector='glyphInfoWithGlyphName:forFont:baseString:' class_method='true'>
<arg name='glyphName' declared_type='NSString*' type='@' index='0'/>
<arg name='font' declared_type='NSFont*' type='@' index='1'/>
<arg name='theString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='NSGlyphInfo*' type='@'/>
</method>
<method selector='glyphName'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSGradient'>
<method selector='colorSpace'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='drawFromCenter:radius:toCenter:radius:options:'>
<arg name='startCenter' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='startRadius' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='endCenter' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='endRadius' declared_type='CGFloat' type64='d' type='f' index='3'/>
<arg name='options' declared_type='NSGradientDrawingOptions' type64='Q' type='I' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawFromPoint:toPoint:options:'>
<arg name='startingPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='endingPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='options' declared_type='NSGradientDrawingOptions' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInBezierPath:angle:'>
<arg name='path' declared_type='NSBezierPath*' type='@' index='0'/>
<arg name='angle' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInBezierPath:relativeCenterPosition:'>
<arg name='path' declared_type='NSBezierPath*' type='@' index='0'/>
<arg name='relativeCenterPosition' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:angle:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='angle' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:relativeCenterPosition:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='relativeCenterPosition' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getColor:location:atIndex:'>
<arg name='color' declared_type='NSColor**' type='^@' index='0'/>
<arg name='location' declared_type='CGFloat*' type64='^d' type='^f' index='1'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithColors:'>
<arg name='colorArray' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithColors:atLocations:colorSpace:'>
<arg name='colorArray' declared_type='NSArray*' type='@' index='0'/>
<arg name='locations' declared_type='CGFloat*' type64='^d' const='true' type='^f' index='1'/>
<arg name='colorSpace' declared_type='NSColorSpace*' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method variadic='true' sentinel='0' selector='initWithColorsAndLocations:'>
<arg name='firstColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithStartingColor:endingColor:'>
<arg name='startingColor' declared_type='NSColor*' type='@' index='0'/>
<arg name='endingColor' declared_type='NSColor*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='interpolatedColorAtLocation:'>
<arg name='location' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='numberOfColorStops'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</class>
<class name='NSGraphicsContext'>
<method selector='CIContext'>
<retval declared_type='CIContext*' type='@'/>
</method>
<method selector='attributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='colorRenderingIntent'>
<retval declared_type='NSColorRenderingIntent' type64='q' type='i'/>
</method>
<method selector='compositingOperation'>
<retval declared_type='NSCompositingOperation' type64='Q' type='I'/>
</method>
<method selector='currentContext' class_method='true'>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='currentContextDrawingToScreen' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='flushGraphics'>
<retval declared_type='void' type='v'/>
</method>
<method selector='graphicsContextWithAttributes:' class_method='true'>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='graphicsContextWithBitmapImageRep:' class_method='true'>
<arg name='bitmapRep' declared_type='NSBitmapImageRep*' type='@' index='0'/>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='graphicsContextWithGraphicsPort:flipped:' class_method='true'>
<arg name='graphicsPort' declared_type='void*' type='^v' index='0'/>
<arg name='initialFlippedState' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='graphicsContextWithWindow:' class_method='true'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='graphicsPort'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='imageInterpolation'>
<retval declared_type='NSImageInterpolation' type64='Q' type='I'/>
</method>
<method selector='isDrawingToScreen'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFlipped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='patternPhase'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='restoreGraphicsState' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='restoreGraphicsState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveGraphicsState' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveGraphicsState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColorRenderingIntent:'>
<arg name='renderingIntent' declared_type='NSColorRenderingIntent' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompositingOperation:'>
<arg name='operation' declared_type='NSCompositingOperation' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCurrentContext:' class_method='true'>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGraphicsState:' class_method='true'>
<arg name='gState' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageInterpolation:'>
<arg name='interpolation' declared_type='NSImageInterpolation' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPatternPhase:'>
<arg name='phase' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldAntialias:'>
<arg name='antialias' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldAntialias'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSHelpManager'>
<method selector='contextHelpForObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='findString:inBook:'>
<arg name='query' declared_type='NSString*' type='@' index='0'/>
<arg name='book' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isContextHelpModeActive' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='openHelpAnchor:inBook:'>
<arg name='anchor' declared_type='NSString*' type='@' index='0'/>
<arg name='book' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='registerBooksInBundle:'>
<arg name='bundle' declared_type='NSBundle*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='removeContextHelpForObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContextHelp:forObject:'>
<arg name='attrString' declared_type='NSAttributedString*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContextHelpModeActive:' class_method='true'>
<arg name='active' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedHelpManager' class_method='true'>
<retval declared_type='NSHelpManager*' type='@'/>
</method>
<method selector='showContextHelpForObject:locationHint:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<arg name='pt' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSImage'>
<method selector='CGImageForProposedRect:context:hints:'>
<arg name='proposedDestRect' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='referenceContext' declared_type='NSGraphicsContext*' type='@' index='1'/>
<arg name='hints' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='CGImageRef' type='^{CGImage=}'/>
</method>
<method selector='TIFFRepresentation'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='TIFFRepresentationUsingCompression:factor:'>
<arg name='comp' declared_type='NSTIFFCompression' type64='Q' type='I' index='0'/>
<arg name='aFloat' declared_type='float' type='f' index='1'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='accessibilityDescription'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='addRepresentation:'>
<arg name='imageRep' declared_type='NSImageRep*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addRepresentations:'>
<arg name='imageReps' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignmentRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='bestRepresentationForDevice:'>
<arg name='deviceDescription' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='NSImageRep*' type='@'/>
</method>
<method selector='bestRepresentationForRect:context:hints:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='referenceContext' declared_type='NSGraphicsContext*' type='@' index='1'/>
<arg name='hints' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='NSImageRep*' type='@'/>
</method>
<method selector='cacheDepthMatchesImageDepth'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cacheMode'>
<retval declared_type='NSImageCacheMode' type64='Q' type='I'/>
</method>
<method selector='canInitWithPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cancelIncrementalLoad'>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositeToPoint:fromRect:operation:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositeToPoint:fromRect:operation:fraction:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<arg name='delta' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositeToPoint:operation:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositeToPoint:operation:fraction:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='1'/>
<arg name='delta' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='dissolveToPoint:fraction:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dissolveToPoint:fromRect:fraction:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawAtPoint:fromRect:operation:fraction:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='fromRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<arg name='delta' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:fromRect:operation:fraction:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='fromRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<arg name='delta' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:fromRect:operation:fraction:respectFlipped:hints:'>
<arg name='dstSpacePortionRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='srcSpacePortionRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<arg name='requestedAlpha' declared_type='CGFloat' type64='d' type='f' index='3'/>
<arg name='respectContextIsFlipped' declared_type='BOOL' type='B' index='4'/>
<arg name='hints' declared_type='NSDictionary*' type='@' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawRepresentation:inRect:'>
<arg name='imageRep' declared_type='NSImageRep*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hitTestRect:withImageDestinationRect:context:hints:flipped:'>
<arg name='testRectDestSpace' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='imageRectDestSpace' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='2'/>
<arg name='hints' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='flipped' declared_type='BOOL' type='B' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='imageFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageNamed:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='imagePasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageUnfilteredFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageUnfilteredPasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageUnfilteredTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='initByReferencingFile:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initByReferencingURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCGImage:size:'>
<arg name='cgImage' declared_type='CGImageRef' type='^{CGImage=}' index='0'/>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentsOfFile:'>
<arg name='fileName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentsOfURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithDataIgnoringOrientation:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithIconRef:'>
<arg name='iconRef' declared_type='IconRef' type='^{OpaqueIconRef=}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPasteboard:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithSize:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isCachedSeparately'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isDataRetained'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFlipped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTemplate'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isValid'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lockFocus'>
<retval declared_type='void' type='v'/>
</method>
<method selector='lockFocusFlipped:'>
<arg name='flipped' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='lockFocusOnRepresentation:'>
<arg name='imageRepresentation' declared_type='NSImageRep*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='matchesOnMultipleResolution'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='prefersColorMatch'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='recache'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeRepresentation:'>
<arg name='imageRep' declared_type='NSImageRep*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='representations'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='scalesWhenResized'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAccessibilityDescription:'>
<arg name='description' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlignmentRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='aColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCacheDepthMatchesImageDepth:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCacheMode:'>
<arg name='mode' declared_type='NSImageCacheMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCachedSeparately:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataRetained:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFlipped:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMatchesOnMultipleResolution:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setName:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setPrefersColorMatch:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScalesWhenResized:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSize:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTemplate:'>
<arg name='isTemplate' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesEPSOnResolutionMismatch:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='size'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='unlockFocus'>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesEPSOnResolutionMismatch'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSImageCell'>
<method selector='imageAlignment'>
<retval declared_type='NSImageAlignment' type64='Q' type='I'/>
</method>
<method selector='imageFrameStyle'>
<retval declared_type='NSImageFrameStyle' type64='Q' type='I'/>
</method>
<method selector='imageScaling'>
<retval declared_type='NSImageScaling' type64='Q' type='I'/>
</method>
<method selector='setImageAlignment:'>
<arg name='newAlign' declared_type='NSImageAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageFrameStyle:'>
<arg name='newStyle' declared_type='NSImageFrameStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageScaling:'>
<arg name='newScaling' declared_type='NSImageScaling' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSImageRep'>
<method selector='CGImageForProposedRect:context:hints:'>
<arg name='proposedDestRect' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='1'/>
<arg name='hints' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='CGImageRef' type='^{CGImage=}'/>
</method>
<method selector='bitsPerSample'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='canInitWithData:' class_method='true'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canInitWithPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='colorSpaceName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='draw'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawInRect:fromRect:operation:fraction:respectFlipped:hints:'>
<arg name='dstSpacePortionRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='srcSpacePortionRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='op' declared_type='NSCompositingOperation' type64='Q' type='I' index='2'/>
<arg name='requestedAlpha' declared_type='CGFloat' type64='d' type='f' index='3'/>
<arg name='respectContextIsFlipped' declared_type='BOOL' type='B' index='4'/>
<arg name='hints' declared_type='NSDictionary*' type='@' index='5'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasAlpha'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='imageFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imagePasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageRepClassForData:' class_method='true'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='Class' type='#'/>
</method>
<method selector='imageRepClassForFileType:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='Class' type='#'/>
</method>
<method selector='imageRepClassForPasteboardType:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='Class' type='#'/>
</method>
<method selector='imageRepClassForType:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='Class' type='#'/>
</method>
<method selector='imageRepWithContentsOfFile:' class_method='true'>
<arg name='filename' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='imageRepWithContentsOfURL:' class_method='true'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='imageRepWithPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='imageRepsWithContentsOfFile:' class_method='true'>
<arg name='filename' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageRepsWithContentsOfURL:' class_method='true'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageRepsWithPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageUnfilteredFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageUnfilteredPasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageUnfilteredTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='isOpaque'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pixelsHigh'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='pixelsWide'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='registerImageRepClass:' class_method='true'>
<arg name='imageRepClass' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='registeredImageRepClasses' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='setAlpha:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBitsPerSample:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColorSpaceName:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpaque:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPixelsHigh:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPixelsWide:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSize:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='size'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='unregisterImageRepClass:' class_method='true'>
<arg name='imageRepClass' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSImageView'>
<method selector='allowsCutCopyPaste'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='animates'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='imageAlignment'>
<retval declared_type='NSImageAlignment' type64='Q' type='I'/>
</method>
<method selector='imageFrameStyle'>
<retval declared_type='NSImageFrameStyle' type64='Q' type='I'/>
</method>
<method selector='imageScaling'>
<retval declared_type='NSImageScaling' type64='Q' type='I'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAllowsCutCopyPaste:'>
<arg name='allow' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnimates:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='yn' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='newImage' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageAlignment:'>
<arg name='newAlign' declared_type='NSImageAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageFrameStyle:'>
<arg name='newStyle' declared_type='NSImageFrameStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageScaling:'>
<arg name='newScaling' declared_type='NSImageScaling' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSInputManager'>
<method selector='currentInputManager' class_method='true'>
<retval declared_type='NSInputManager*' type='@'/>
</method>
<method selector='cycleToNextInputLanguage:' class_method='true'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cycleToNextInputServerInLanguage:' class_method='true'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='handleMouseEvent:'>
<arg name='theMouseEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='initWithName:host:'>
<arg name='inputServerName' declared_type='NSString*' type='@' index='0'/>
<arg name='hostName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSInputManager*' type='@'/>
</method>
<method selector='language'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='localizedInputManagerName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='markedTextAbandoned:'>
<arg name='cli' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='markedTextSelectionChanged:client:'>
<arg name='newSel' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='cli' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='server'>
<retval declared_type='NSInputServer*' type='@'/>
</method>
<method selector='wantsToDelayTextChangeNotifications'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsToHandleMouseEvents'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsToInterpretAllKeystrokes'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSInputServer'>
<method selector='initWithDelegate:name:'>
<arg name='aDelegate' declared_type='id' type='@' index='0'/>
<arg name='name' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSLayoutConstraint'>
<method selector='constant'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:' class_method='true'>
<arg name='view1' declared_type='id' type='@' index='0'/>
<arg name='attr1' declared_type='NSLayoutAttribute' type64='q' type='i' index='1'/>
<arg name='relation' declared_type='NSLayoutRelation' type64='q' type='i' index='2'/>
<arg name='view2' declared_type='id' type='@' index='3'/>
<arg name='attr2' declared_type='NSLayoutAttribute' type64='q' type='i' index='4'/>
<arg name='multiplier' declared_type='CGFloat' type64='d' type='f' index='5'/>
<arg name='c' declared_type='CGFloat' type64='d' type='f' index='6'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='constraintsWithVisualFormat:options:metrics:views:' class_method='true'>
<arg name='format' declared_type='NSString*' type='@' index='0'/>
<arg name='opts' declared_type='NSLayoutFormatOptions' type64='Q' type='I' index='1'/>
<arg name='metrics' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='views' declared_type='NSDictionary*' type='@' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='firstAttribute'>
<retval declared_type='NSLayoutAttribute' type64='q' type='i'/>
</method>
<method selector='firstItem'>
<retval declared_type='id' type='@'/>
</method>
<method selector='multiplier'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='priority'>
<retval declared_type='NSLayoutPriority' type='f'/>
</method>
<method selector='relation'>
<retval declared_type='NSLayoutRelation' type64='q' type='i'/>
</method>
<method selector='secondAttribute'>
<retval declared_type='NSLayoutAttribute' type64='q' type='i'/>
</method>
<method selector='secondItem'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setConstant:'>
<arg name='constant' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPriority:'>
<arg name='priority' declared_type='NSLayoutPriority' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldBeArchived:'>
<arg name='shouldBeArchived' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldBeArchived'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSLayoutManager'>
<method selector='addTemporaryAttribute:value:forCharacterRange:'>
<arg name='attrName' declared_type='NSString*' type='@' index='0'/>
<arg name='value' declared_type='id' type='@' index='1'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addTemporaryAttributes:forCharacterRange:'>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='0'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addTextContainer:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowsNonContiguousLayout'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='attachmentSizeForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='attributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='backgroundLayoutEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='boundingRectForGlyphRange:inTextContainer:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='boundsRectForTextBlock:atIndex:effectiveRange:'>
<arg name='block' declared_type='NSTextBlock*' type='@' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='boundsRectForTextBlock:glyphRange:'>
<arg name='block' declared_type='NSTextBlock*' type='@' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='characterIndexForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<arg name='partialFraction' declared_type='CGFloat*' type64='^d' type='^f' index='2'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='characterRangeForGlyphRange:actualGlyphRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='defaultAttachmentScaling'>
<retval declared_type='NSImageScaling' type64='Q' type='I'/>
</method>
<method selector='defaultBaselineOffsetForFont:'>
<arg name='theFont' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='defaultLineHeightForFont:'>
<arg name='theFont' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='deleteGlyphsInRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawBackgroundForGlyphRange:atPoint:'>
<arg name='glyphsToShow' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='origin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawGlyphsForGlyphRange:atPoint:'>
<arg name='glyphsToShow' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='origin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='strikethroughVal' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='baselineOffset' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='lineRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='3'/>
<arg name='lineGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='4'/>
<arg name='containerOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='underlineVal' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='baselineOffset' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='lineRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='3'/>
<arg name='lineGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='4'/>
<arg name='containerOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawsOutsideLineFragmentForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='ensureGlyphsForCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ensureGlyphsForGlyphRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ensureLayoutForBoundingRect:inTextContainer:'>
<arg name='bounds' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ensureLayoutForCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ensureLayoutForGlyphRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ensureLayoutForTextContainer:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='extraLineFragmentRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='extraLineFragmentTextContainer'>
<retval declared_type='NSTextContainer*' type='@'/>
</method>
<method selector='extraLineFragmentUsedRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='fillBackgroundRectArray:count:forCharacterRange:color:'>
<arg name='rectArray' declared_type='NSRectArray' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='rectCount' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='color' declared_type='NSColor*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='firstTextView'>
<retval declared_type='NSTextView*' type='@'/>
</method>
<method selector='firstUnlaidCharacterIndex'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='firstUnlaidGlyphIndex'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='fractionOfDistanceThroughGlyphForPoint:inTextContainer:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='getFirstUnlaidCharacterIndex:glyphIndex:'>
<arg name='charIndex' declared_type='NSUInteger*' type64='^Q' type='^I' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger*' type64='^Q' type='^I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getGlyphs:range:'>
<arg name='glyphArray' declared_type='NSGlyph*' type='^I' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='glyphBuffer' declared_type='NSGlyph*' type='^I' index='1'/>
<arg name='charIndexBuffer' declared_type='NSUInteger*' type64='^Q' type='^I' index='2'/>
<arg name='inscribeBuffer' declared_type='NSGlyphInscription*' type64='^Q' type='^I' index='3'/>
<arg name='elasticBuffer' declared_type='BOOL*' type='^B' index='4'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='glyphBuffer' declared_type='NSGlyph*' type='^I' index='1'/>
<arg name='charIndexBuffer' declared_type='NSUInteger*' type64='^Q' type='^I' index='2'/>
<arg name='inscribeBuffer' declared_type='NSGlyphInscription*' type64='^Q' type='^I' index='3'/>
<arg name='elasticBuffer' declared_type='BOOL*' type='^B' index='4'/>
<arg name='bidiLevelBuffer' declared_type='unsigned char*' type='*' index='5'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='aFlag' declared_type='BOOL' type='B' index='1'/>
<arg name='dFlag' declared_type='BOOL' type='B' index='2'/>
<arg name='positions' declared_type='CGFloat*' type64='^d' type='^f' index='3'/>
<arg name='charIndexes' declared_type='NSUInteger*' type64='^Q' type='^I' index='4'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='glyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSGlyph' type='I'/>
</method>
<method selector='glyphAtIndex:isValidIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='isValidIndex' declared_type='BOOL*' type='^B' index='1'/>
<retval declared_type='NSGlyph' type='I'/>
</method>
<method selector='glyphGenerator'>
<retval declared_type='NSGlyphGenerator*' type='@'/>
</method>
<method selector='glyphIndexForCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='glyphIndexForPoint:inTextContainer:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<arg name='partialFraction' declared_type='CGFloat*' type64='^d' type='^f' index='2'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='glyphRangeForBoundingRect:inTextContainer:'>
<arg name='bounds' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:'>
<arg name='bounds' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='glyphRangeForCharacterRange:actualCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='glyphRangeForTextContainer:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='hasNonContiguousLayout'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hyphenationFactor'>
<retval declared_type='float' type='f'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertGlyph:atGlyphIndex:characterIndex:'>
<arg name='glyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:'>
<arg name='glyphs' declared_type='NSGlyph*' const='true' type='^I' index='0'/>
<arg name='length' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertTextContainer:atIndex:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='intAttribute:forGlyphAtIndex:'>
<arg name='attributeTag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='invalidateDisplayForCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidateDisplayForGlyphRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='delta' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='actualCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidateGlyphsOnLayoutInvalidationForGlyphRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidateLayoutForCharacterRange:actualCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<arg name='actualCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isValidGlyphIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='layoutManagerOwnsFirstResponderInWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='layoutOptions'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='layoutRectForTextBlock:atIndex:effectiveRange:'>
<arg name='block' declared_type='NSTextBlock*' type='@' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='layoutRectForTextBlock:glyphRange:'>
<arg name='block' declared_type='NSTextBlock*' type='@' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='lineFragmentRectForGlyphAtIndex:effectiveRange:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='lineFragmentUsedRectForGlyphAtIndex:effectiveRange:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='locationForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='notShownAttributeForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='numberOfGlyphs'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='rangeOfNominallySpacedGlyphsContainingIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='selCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='2'/>
<arg name='rectCount' declared_type='NSUInteger*' type64='^Q' type='^I' index='3'/>
<retval declared_type='NSRectArray' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='selGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='2'/>
<arg name='rectCount' declared_type='NSUInteger*' type64='^Q' type='^I' index='3'/>
<retval declared_type='NSRectArray' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='removeTemporaryAttribute:forCharacterRange:'>
<arg name='attrName' declared_type='NSString*' type='@' index='0'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTextContainerAtIndex:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceGlyphAtIndex:withGlyph:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='newGlyph' declared_type='NSGlyph' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceTextStorage:'>
<arg name='newTextStorage' declared_type='NSTextStorage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='style' declared_type='NSParagraphStyle*' type='@' index='1'/>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='2'/>
<arg name='isEnabled' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='rulerMarkersForTextView:paragraphStyle:ruler:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='style' declared_type='NSParagraphStyle*' type='@' index='1'/>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='setAllowsNonContiguousLayout:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttachmentSize:forGlyphRange:'>
<arg name='attachmentSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundLayoutEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBoundsRect:forTextBlock:glyphRange:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='block' declared_type='NSTextBlock*' type='@' index='1'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCharacterIndex:forGlyphAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultAttachmentScaling:'>
<arg name='scaling' declared_type='NSImageScaling' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsOutsideLineFragment:forGlyphAtIndex:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setExtraLineFragmentRect:usedRect:textContainer:'>
<arg name='fragmentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='usedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGlyphGenerator:'>
<arg name='glyphGenerator' declared_type='NSGlyphGenerator*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHyphenationFactor:'>
<arg name='factor' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntAttribute:value:forGlyphAtIndex:'>
<arg name='attributeTag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='val' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayoutRect:forTextBlock:glyphRange:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='block' declared_type='NSTextBlock*' type='@' index='1'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineFragmentRect:forGlyphRange:usedRect:'>
<arg name='fragmentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='usedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocation:forStartOfGlyphRange:'>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocations:startingGlyphIndexes:count:forGlyphRange:'>
<arg name='locations' declared_type='NSPointArray' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='0'/>
<arg name='glyphIndexes' declared_type='NSUInteger*' type64='^Q' type='^I' index='1'/>
<arg name='count' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNotShownAttribute:forGlyphAtIndex:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsControlCharacters:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsInvisibleCharacters:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTemporaryAttributes:forCharacterRange:'>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='0'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextContainer:forGlyphRange:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextStorage:'>
<arg name='textStorage' declared_type='NSTextStorage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTypesetter:'>
<arg name='typesetter' declared_type='NSTypesetter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTypesetterBehavior:'>
<arg name='theBehavior' declared_type='NSTypesetterBehavior' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFontLeading:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesScreenFonts:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showAttachmentCell:inRect:characterIndex:'>
<arg name='cell' declared_type='NSCell*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='attachmentIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showCGGlyphs:positions:count:font:matrix:attributes:inContext:'>
<arg name='glyphs' declared_type='CGGlyph*' const='true' type='^S' index='0'/>
<arg name='positions' declared_type='NSPoint*' type64='^{CGPoint=dd}' const='true' type='^{_NSPoint=ff}' index='1'/>
<arg name='glyphCount' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='font' declared_type='NSFont*' type='@' index='3'/>
<arg name='textMatrix' declared_type='NSAffineTransform*' type='@' index='4'/>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='5'/>
<arg name='graphicsContext' declared_type='NSGraphicsContext*' type='@' index='6'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:'>
<arg name='glyphs' declared_type='char*' type='*' index='0'/>
<arg name='glyphLen' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<arg name='font' declared_type='NSFont*' type='@' index='4'/>
<arg name='color' declared_type='NSColor*' type='@' index='5'/>
<arg name='printingAdjustment' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='6'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsControlCharacters'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsInvisibleCharacters'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='strikethroughVal' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='lineRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='lineGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<arg name='containerOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='substituteFontForFont:'>
<arg name='originalFont' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='temporaryAttribute:atCharacterIndex:effectiveRange:'>
<arg name='attrName' declared_type='NSString*' type='@' index='0'/>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='range' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:'>
<arg name='attrName' declared_type='NSString*' type='@' index='0'/>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='range' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='2'/>
<arg name='rangeLimit' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='temporaryAttributesAtCharacterIndex:effectiveRange:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='range' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<arg name='rangeLimit' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='textContainerChangedGeometry:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textContainerChangedTextView:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textContainerForGlyphAtIndex:effectiveRange:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSTextContainer*' type='@'/>
</method>
<method selector='textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='effectiveGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSTextContainer*' type='@'/>
</method>
<method selector='textContainers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textStorage'>
<retval declared_type='NSTextStorage*' type='@'/>
</method>
<method selector='textStorage:edited:range:changeInLength:invalidatedRange:'>
<arg name='str' declared_type='NSTextStorage*' type='@' index='0'/>
<arg name='editedMask' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='newCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='delta' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='invalidatedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textViewForBeginningOfSelection'>
<retval declared_type='NSTextView*' type='@'/>
</method>
<method selector='typesetter'>
<retval declared_type='NSTypesetter*' type='@'/>
</method>
<method selector='typesetterBehavior'>
<retval declared_type='NSTypesetterBehavior' type64='q' type='i'/>
</method>
<method selector='underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='underlineVal' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='lineRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='lineGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<arg name='containerOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usedRectForTextContainer:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='usesFontLeading'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='usesScreenFonts'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSLevelIndicator'>
<method selector='criticalValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='maxValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='numberOfMajorTickMarks'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfTickMarks'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='rectOfTickMarkAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setCriticalValue:'>
<arg name='criticalValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxValue:'>
<arg name='maxValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinValue:'>
<arg name='minValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfMajorTickMarks:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfTickMarks:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTickMarkPosition:'>
<arg name='position' declared_type='NSTickMarkPosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWarningValue:'>
<arg name='warningValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tickMarkPosition'>
<retval declared_type='NSTickMarkPosition' type64='Q' type='I'/>
</method>
<method selector='tickMarkValueAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='warningValue'>
<retval declared_type='double' type='d'/>
</method>
</class>
<class name='NSLevelIndicatorCell'>
<method selector='criticalValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='initWithLevelIndicatorStyle:'>
<arg name='levelIndicatorStyle' declared_type='NSLevelIndicatorStyle' type64='Q' type='I' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='levelIndicatorStyle'>
<retval declared_type='NSLevelIndicatorStyle' type64='Q' type='I'/>
</method>
<method selector='maxValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='numberOfMajorTickMarks'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfTickMarks'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='rectOfTickMarkAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setCriticalValue:'>
<arg name='criticalValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLevelIndicatorStyle:'>
<arg name='levelIndicatorStyle' declared_type='NSLevelIndicatorStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxValue:'>
<arg name='maxValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinValue:'>
<arg name='minValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfMajorTickMarks:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfTickMarks:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTickMarkPosition:'>
<arg name='position' declared_type='NSTickMarkPosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWarningValue:'>
<arg name='warningValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tickMarkPosition'>
<retval declared_type='NSTickMarkPosition' type64='Q' type='I'/>
</method>
<method selector='tickMarkValueAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='warningValue'>
<retval declared_type='double' type='d'/>
</method>
</class>
<class name='NSMatrix'>
<method selector='acceptsFirstMouse:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='addColumn'>
<retval declared_type='void' type='v'/>
</method>
<method selector='addColumnWithCells:'>
<arg name='newCells' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addRow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='addRowWithCells:'>
<arg name='newCells' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowsEmptySelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autosizesCells'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='cellAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='cellBackgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='cellClass'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='cellFrameAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='cellSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='cellWithTag:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='cells'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='deselectAllCells'>
<retval declared_type='void' type='v'/>
</method>
<method selector='deselectSelectedCell'>
<retval declared_type='void' type='v'/>
</method>
<method selector='doubleAction'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='drawCellAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawsCellBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='getNumberOfRows:columns:'>
<arg name='rowCount' declared_type='NSInteger*' type64='^q' type='^i' index='0'/>
<arg name='colCount' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getRow:column:forPoint:'>
<arg name='row' declared_type='NSInteger*' type64='^q' type='^i' index='0'/>
<arg name='col' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='getRow:column:ofCell:'>
<arg name='row' declared_type='NSInteger*' type64='^q' type='^i' index='0'/>
<arg name='col' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<arg name='aCell' declared_type='NSCell*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='highlightCell:atRow:column:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithFrame:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aMode' declared_type='NSMatrixMode' type64='Q' type='I' index='1'/>
<arg name='factoryId' declared_type='Class' type='#' index='2'/>
<arg name='rowsHigh' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='colsWide' declared_type='NSInteger' type64='q' type='i' index='4'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFrame:mode:prototype:numberOfRows:numberOfColumns:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aMode' declared_type='NSMatrixMode' type64='Q' type='I' index='1'/>
<arg name='aCell' declared_type='NSCell*' type='@' index='2'/>
<arg name='rowsHigh' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='colsWide' declared_type='NSInteger' type64='q' type='i' index='4'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertColumn:withCells:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='newCells' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertRow:withCells:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='newCells' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='intercellSpacing'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='isAutoscroll'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectionByRect'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeCellAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSCell*' type='@'/>
</method>
<method selector='mode'>
<retval declared_type='NSMatrixMode' type64='Q' type='I'/>
</method>
<method selector='mouseDown:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseDownFlags'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfColumns'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfRows'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='performKeyEquivalent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='prototype'>
<retval declared_type='id' type='@'/>
</method>
<method selector='putCell:atRow:column:'>
<arg name='newCell' declared_type='NSCell*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeColumn:'>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='renewRows:columns:'>
<arg name='newRows' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='newCols' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resetCursorRects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollCellToVisibleAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectAll:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectCellAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectCellWithTag:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectText:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectTextAtRow:column:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='selectedCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='selectedCells'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='selectedRow'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='sendAction'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sendAction:to:forAllCells:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sendDoubleAction'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsEmptySelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoscroll:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutosizesCells:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCellBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCellClass:'>
<arg name='factoryId' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCellSize:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsCellBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntercellSpacing:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyCell:'>
<arg name='keyCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMode:'>
<arg name='aMode' declared_type='NSMatrixMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPrototype:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionByRect:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionFrom:to:anchor:highlight:'>
<arg name='startPos' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='endPos' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='anchorPos' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='lit' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setState:atRow:column:'>
<arg name='value' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTabKeyTraversesCells:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolTip:forCell:'>
<arg name='toolTipString' declared_type='NSString*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValidateSize:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeToCells'>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortUsingFunction:context:'>
<arg name='compare' function_pointer='true' declared_type='NSInteger (*)(id, id, void *)' type='^?' index='0'>
<arg declared_type='id' type='@'/>
<arg declared_type='id' type='@'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</arg>
<arg name='context' declared_type='void*' type='^v' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortUsingSelector:'>
<arg name='comparator' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tabKeyTraversesCells'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textDidBeginEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidEndEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textShouldBeginEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textShouldEndEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='toolTipForCell:'>
<arg name='cell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSMenu'>
<method selector='addItem:'>
<arg name='newItem' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addItemWithTitle:action:keyEquivalent:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<arg name='aSelector' declared_type='SEL' type=':' index='1'/>
<arg name='charCode' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='allowsContextMenuPlugIns'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='attachedMenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='autoenablesItems'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cancelTracking'>
<retval declared_type='void' type='v'/>
</method>
<method selector='cancelTrackingWithoutAnimation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='contextMenuRepresentation'>
<retval declared_type='id' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='font'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='helpRequested:'>
<arg name='eventPtr' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='highlightedItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='indexOfItem:'>
<arg name='index' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithRepresentedObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithSubmenu:'>
<arg name='submenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTag:'>
<arg name='aTag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTarget:andAction:'>
<arg name='target' declared_type='id' type='@' index='0'/>
<arg name='actionSelector' declared_type='SEL' type=':' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTitle:'>
<arg name='aTitle' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='initWithTitle:'>
<arg name='aTitle' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertItem:atIndex:'>
<arg name='newItem' declared_type='NSMenuItem*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertItemWithTitle:action:keyEquivalent:atIndex:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<arg name='aSelector' declared_type='SEL' type=':' index='1'/>
<arg name='charCode' declared_type='NSString*' type='@' index='2'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='isAttached'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTornOff'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='itemArray'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='itemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='itemChanged:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='itemWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='itemWithTitle:'>
<arg name='aTitle' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='locationForSubmenu:'>
<arg name='aSubmenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='menuBarHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='menuBarVisible' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='menuChangedMessagesEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='menuRepresentation'>
<retval declared_type='id' type='@'/>
</method>
<method selector='menuZone' class_method='true'>
<retval declared_type='NSZone*' type='^{_NSZone=}'/>
</method>
<method selector='minimumWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='numberOfItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='performActionForItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performKeyEquivalent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='popUpContextMenu:withEvent:forView:' class_method='true'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='popUpContextMenu:withEvent:forView:withFont:' class_method='true'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<arg name='font' declared_type='NSFont*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='popUpMenuPositioningItem:atLocation:inView:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='propertiesToUpdate'>
<retval declared_type='NSMenuProperties' type64='Q' type='I'/>
</method>
<method selector='removeAllItems'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItem:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsContextMenuPlugIns:'>
<arg name='allows' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoenablesItems:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContextMenuRepresentation:'>
<arg name='menuRep' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:'>
<arg name='font' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenuBarVisible:' class_method='true'>
<arg name='visible' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenuChangedMessagesEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenuRepresentation:'>
<arg name='menuRep' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenuZone:' class_method='true'>
<arg name='aZone' declared_type='NSZone*' type='^{_NSZone=}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinimumWidth:'>
<arg name='width' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsStateColumn:'>
<arg name='showsState' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSubmenu:forItem:'>
<arg name='aMenu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='anItem' declared_type='NSMenuItem*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSupermenu:'>
<arg name='supermenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTearOffMenuRepresentation:'>
<arg name='menuRep' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsStateColumn'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='size'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='submenuAction:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='supermenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='tearOffMenuRepresentation'>
<retval declared_type='id' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='update'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSMenuItem'>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='attributedTitle'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='hasSubmenu'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='indentationLevel'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='initWithTitle:action:keyEquivalent:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<arg name='aSelector' declared_type='SEL' type=':' index='1'/>
<arg name='charCode' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isAlternate'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHidden'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHiddenOrHasHiddenAncestor'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHighlighted'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSeparatorItem'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyEquivalent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='keyEquivalentModifierMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='menu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='mixedStateImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='mnemonic'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='mnemonicLocation'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='offStateImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='onStateImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='parentItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='representedObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='separatorItem' class_method='true'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='setAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternate:'>
<arg name='isAlternate' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedTitle:'>
<arg name='string' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHidden:'>
<arg name='hidden' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='menuImage' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIndentationLevel:'>
<arg name='indentationLevel' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalent:'>
<arg name='aKeyEquivalent' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyEquivalentModifierMask:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMixedStateImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMnemonicLocation:'>
<arg name='location' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOffStateImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOnStateImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRepresentedObject:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setState:'>
<arg name='state' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSubmenu:'>
<arg name='submenu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTag:'>
<arg name='anInt' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolTip:'>
<arg name='toolTip' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesUserKeyEquivalents:' class_method='true'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='state'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='submenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='toolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='userKeyEquivalent'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='usesUserKeyEquivalents' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='view'>
<retval declared_type='NSView*' type='@'/>
</method>
</class>
<class name='NSMenuItemCell'>
<method selector='calcSize'>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawBorderAndBackgroundWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawImageWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawKeyEquivalentWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawSeparatorItemWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawStateImageWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawTitleWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='imageWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='keyEquivalentRectForBounds:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='keyEquivalentWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='menuItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='menuView'>
<retval declared_type='NSMenuView*' type='@'/>
</method>
<method selector='needsDisplay'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='needsSizing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setMenuItem:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenuView:'>
<arg name='menuView' declared_type='NSMenuView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplay:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsSizing:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stateImageRectForBounds:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='stateImageWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='titleRectForBounds:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='titleWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSMovie'>
<method selector='QTMovie'>
<retval declared_type='void*' type64='@' type='^v' declared_type64='QTMovie*'/>
</method>
<method selector='URL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='canInitWithPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithMovie:'>
<arg name='movie' declared_type='void*' type64='@' type='^v' index='0' declared_type64='QTMovie*'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPasteboard:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithURL:byReference:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='byRef' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='movieUnfilteredFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='movieUnfilteredPasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSMutableAttributedString'>
<method selector='applyFontTraits:range:'>
<arg name='traitMask' declared_type='NSFontTraitMask' type64='Q' type='I' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fixAttachmentAttributeInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fixAttributesInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fixFontAttributeInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fixParagraphStyleAttributeInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='readFromData:options:documentAttributes:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readFromData:options:documentAttributes:error:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='opts' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readFromURL:options:documentAttributes:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readFromURL:options:documentAttributes:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='opts' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='dict' declared_type='NSDictionary**' type='^@' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAlignment:range:'>
<arg name='alignment' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBaseWritingDirection:range:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subscriptRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='superscriptRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscriptRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateAttachmentsFromPath:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSMutableFontCollection'>
<method selector='addQueryForDescriptors:'>
<arg name='descriptors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeQueryForDescriptors:'>
<arg name='descriptors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setExclusionDescriptors:'>
<arg name='descriptors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setQueryDescriptors:'>
<arg name='descriptors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSMutableParagraphStyle'>
<method selector='addTabStop:'>
<arg name='anObject' declared_type='NSTextTab*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTabStop:'>
<arg name='anObject' declared_type='NSTextTab*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlignment:'>
<arg name='alignment' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBaseWritingDirection:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultTabInterval:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFirstLineHeadIndent:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHeadIndent:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHeaderLevel:'>
<arg name='level' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHyphenationFactor:'>
<arg name='aFactor' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineBreakMode:'>
<arg name='mode' declared_type='NSLineBreakMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineHeightMultiple:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineSpacing:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaximumLineHeight:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinimumLineHeight:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParagraphSpacing:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParagraphSpacingBefore:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParagraphStyle:'>
<arg name='obj' declared_type='NSParagraphStyle*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTabStops:'>
<arg name='array' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTailIndent:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextBlocks:'>
<arg name='array' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextLists:'>
<arg name='array' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTighteningFactorForTruncation:'>
<arg name='aFactor' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSNib'>
<method selector='initWithContentsOfURL:'>
<arg name='nibFileURL' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithNibNamed:bundle:'>
<arg name='nibName' declared_type='NSString*' type='@' index='0'/>
<arg name='bundle' declared_type='NSBundle*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='instantiateNibWithExternalNameTable:'>
<arg name='externalNameTable' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='instantiateNibWithOwner:topLevelObjects:'>
<arg name='owner' declared_type='id' type='@' index='0'/>
<arg name='topLevelObjects' declared_type='NSArray**' type='^@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSNibConnector'>
<method selector='destination'>
<retval declared_type='id' type='@'/>
</method>
<method selector='establishConnection'>
<retval declared_type='void' type='v'/>
</method>
<method selector='label'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='replaceObject:withObject:'>
<arg name='oldObject' declared_type='id' type='@' index='0'/>
<arg name='newObject' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDestination:'>
<arg name='destination' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabel:'>
<arg name='label' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSource:'>
<arg name='source' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='source'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSNibControlConnector'>
<method selector='establishConnection'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSNibOutletConnector'>
<method selector='establishConnection'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSObject'>
<method selector='accessibilityActionDescription:'>
<arg name='action' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='accessibilityActionNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='accessibilityArrayAttributeCount:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='accessibilityArrayAttributeValues:index:maxCount:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='maxCount' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='accessibilityAttributeNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='accessibilityAttributeValue:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='accessibilityAttributeValue:forParameter:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<arg name='parameter' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='accessibilityFocusedUIElement'>
<retval declared_type='id' type='@'/>
</method>
<method selector='accessibilityHitTest:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='accessibilityIndexOfChild:'>
<arg name='child' declared_type='id' type='@' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='accessibilityIsAttributeSettable:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='accessibilityIsIgnored'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='accessibilityParameterizedAttributeNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='accessibilityPerformAction:'>
<arg name='action' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='accessibilitySetOverrideValue:forAttribute:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<arg name='attribute' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='accessibilitySetValue:forAttribute:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<arg name='attribute' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='activeConversationChanged:toNewConversation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='newConversation' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='activeConversationWillChange:fromOldConversation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='oldConversation' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alertShowHelp:'>
<arg name='alert' declared_type='NSAlert*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsMultipleSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='alphaControlAddedOrRemoved:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='animatesToDestination'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='animation:didReachProgressMark:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<arg name='progress' declared_type='NSAnimationProgress' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='animation:valueForProgress:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<arg name='progress' declared_type='NSAnimationProgress' type='f' index='1'/>
<retval declared_type='float' type='f'/>
</method>
<method selector='animationDidEnd:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='animationDidStop:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='animationForKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='animationShouldStart:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='animations'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='animator'>
<retval declared_type='id' type='@'/>
</method>
<method selector='application:delegateHandlesKey:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='key' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='application:didDecodeRestorableState:'>
<arg name='app' declared_type='NSApplication*' type='@' index='0'/>
<arg name='coder' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='application:didFailToRegisterForRemoteNotificationsWithError:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='error' declared_type='NSError*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='application:didReceiveRemoteNotification:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='userInfo' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='application:didRegisterForRemoteNotificationsWithDeviceToken:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='deviceToken' declared_type='NSData*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='application:openFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='application:openFileWithoutUI:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='application:openFiles:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filenames' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='application:openTempFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='application:printFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='application:printFiles:withSettings:showPrintPanels:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='fileNames' declared_type='NSArray*' type='@' index='1'/>
<arg name='printSettings' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='showPrintPanels' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSApplicationPrintReply' type64='Q' type='I'/>
</method>
<method selector='application:willEncodeRestorableState:'>
<arg name='app' declared_type='NSApplication*' type='@' index='0'/>
<arg name='coder' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='application:willPresentError:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='error' declared_type='NSError*' type='@' index='1'/>
<retval declared_type='NSError*' type='@'/>
</method>
<method selector='applicationDidBecomeActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationDidChangeScreenParameters:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationDidFinishLaunching:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationDidHide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationDidResignActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationDidUnhide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationDidUpdate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationDockMenu:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='applicationOpenUntitledFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='applicationShouldHandleReopen:hasVisibleWindows:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='applicationShouldOpenUntitledFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='applicationShouldTerminate:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='NSApplicationTerminateReply' type64='Q' type='I'/>
</method>
<method selector='applicationShouldTerminateAfterLastWindowClosed:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='applicationWillBecomeActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationWillFinishLaunching:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationWillHide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationWillResignActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationWillTerminate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationWillUnhide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applicationWillUpdate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='attachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='attachment'>
<retval declared_type='NSTextAttachment*' type='@'/>
</method>
<method selector='attributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='attributedSubstringForProposedRange:actualRange:'>
<arg name='aRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='attributedSubstringFromRange:'>
<arg name='theRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='awakeFromNib'>
<retval declared_type='void' type='v'/>
</method>
<method selector='baselineDeltaForCharacterAtIndex:'>
<arg name='anIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='bind:toObject:withKeyPath:options:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<arg name='observable' declared_type='id' type='@' index='1'/>
<arg name='keyPath' declared_type='NSString*' type='@' index='2'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='browser:acceptDrop:atRow:column:dropOperation:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='dropOperation' declared_type='NSBrowserDropOperation' type64='Q' type='I' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:canDragRowsWithIndexes:inColumn:withEvent:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:child:ofItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='browser:createRowsForColumn:inMatrix:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='matrix' declared_type='NSMatrix*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='browser:didChangeLastColumn:toColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='oldLastColumn' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='4'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='browser:headerViewControllerForItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSViewController*' type='@'/>
</method>
<method selector='browser:heightOfRow:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='browser:isColumnValid:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:isLeafItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='1'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='startRow' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='endRow' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='searchString' declared_type='NSString*' type='@' index='4'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='browser:numberOfChildrenOfItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='browser:numberOfRowsInColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='browser:objectValueForItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='browser:previewViewControllerForLeafItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSViewController*' type='@'/>
</method>
<method selector='browser:selectCellWithString:inColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='title' declared_type='NSString*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:selectRow:inColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:selectionIndexesForProposedSelection:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='proposedSelectionIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='browser:setObjectValue:forItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='browser:shouldEditItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:shouldShowCellExpansionForRow:column:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:shouldSizeColumn:forUserResize:toWidth:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='forUserResize' declared_type='BOOL' type='B' index='2'/>
<arg name='suggestedWidth' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='browser:shouldTypeSelectForEvent:withCurrentSearchString:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='searchString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browser:sizeToFitWidthOfColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='browser:titleOfColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='browser:typeSelectStringForRow:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='browser:validateDrop:proposedRow:column:dropOperation:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger*' type64='^q' type='^i' index='2'/>
<arg name='column' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<arg name='dropOperation' declared_type='NSBrowserDropOperation*' type64='^Q' type='^I' index='4'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='browser:willDisplayCell:atRow:column:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='browser:writeRowsWithIndexes:inColumn:toPasteboard:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='browserColumnConfigurationDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='browserDidScroll:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='browserWillScroll:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='buttonToolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='canBeDisabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cellBaselineOffset'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:'>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='0'/>
<arg name='lineFrag' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='position' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='cellSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='changeColor:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeSpelling:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='characterIndexForPoint:'>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='collectionView:acceptDrop:index:dropOperation:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='dropOperation' declared_type='NSCollectionViewDropOperation' type64='q' type='i' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='collectionView:canDragItemsAtIndexes:withEvent:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='collectionView:draggingImageForItemsAtIndexes:withEvent:offset:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='3'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='collectionView:draggingSession:endedAtPoint:dragOperation:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='dropURL' declared_type='NSURL*' type='@' index='1'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='collectionView:pasteboardWriterForItemAtIndex:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='collectionView:updateDraggingItemsForDrag:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='collectionView:validateDrop:proposedIndex:dropOperation:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<arg name='proposedDropIndex' declared_type='NSInteger*' type64='^q' type='^i' index='2'/>
<arg name='proposedDropOperation' declared_type='NSCollectionViewDropOperation*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='collectionView:writeItemsAtIndexes:toPasteboard:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='comboBox:completedString:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='comboBox:indexOfItemWithStringValue:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='comboBox:objectValueForItemAtIndex:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='comboBoxCell:completedString:'>
<arg name='aComboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<arg name='uncompletedString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='comboBoxCell:indexOfItemWithStringValue:'>
<arg name='aComboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='comboBoxCell:objectValueForItemAtIndex:'>
<arg name='aComboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='comboBoxSelectionDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='comboBoxSelectionIsChanging:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='comboBoxWillDismiss:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='comboBoxWillPopUp:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='commitEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='commitEditingAndReturnError:'>
<arg name='error' declared_type='NSError**' type='^@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='commitEditingWithDelegate:didCommitSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didCommitSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='concludeDragOperation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='confinementRectForMenu:onScreen:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='screen' declared_type='NSScreen*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='contentView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='contentViewAtIndex:effectiveCharacterRange:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='outRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='control:didFailToFormatString:errorDescription:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<arg name='error' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='control:didFailToValidatePartialString:errorDescription:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<arg name='error' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='control:isValidObject:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='obj' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='control:textShouldBeginEditing:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='fieldEditor' declared_type='NSText*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='control:textShouldEndEditing:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='fieldEditor' declared_type='NSText*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='control:textView:completions:forPartialWordRange:indexOfSelectedItem:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='textView' declared_type='NSTextView*' type='@' index='1'/>
<arg name='words' declared_type='NSArray*' type='@' index='2'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<arg name='index' declared_type='NSInteger*' type64='^q' type='^i' index='4'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='control:textView:doCommandBySelector:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='textView' declared_type='NSTextView*' type='@' index='1'/>
<arg name='commandSelector' declared_type='SEL' type=':' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='controlTextDidBeginEditing:'>
<arg name='obj' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='controlTextDidChange:'>
<arg name='obj' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='controlTextDidEndEditing:'>
<arg name='obj' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='conversationIdentifier'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='currentMode'>
<retval declared_type='NSColorPanelMode' type64='q' type='i'/>
</method>
<method selector='customWindowsToEnterFullScreenForWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='customWindowsToExitFullScreenForWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='datePickerCell:validateProposedDateValue:timeInterval:'>
<arg name='aDatePickerCell' declared_type='NSDatePickerCell*' type='@' index='0'/>
<arg name='proposedDateValue' declared_type='NSDate**' type='^@' index='1'/>
<arg name='proposedTimeInterval' declared_type='NSTimeInterval*' type='^d' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='defaultAnimationForKey:' class_method='true'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='defaultPlaceholderForMarker:withBinding:' class_method='true'>
<arg name='marker' declared_type='id' type='@' index='0'/>
<arg name='binding' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='detachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='detachableWindowForPopover:'>
<arg name='popover' declared_type='NSPopover*' type='@' index='0'/>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='didReplaceCharacters'>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardEditing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='doCommandBySelector:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doCommandBySelector:client:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<arg name='sender' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dockMenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='draggedImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='draggedImage:beganAt:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggedImage:endedAt:deposited:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggedImage:endedAt:operation:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggedImage:movedTo:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggedImageLocation'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='draggingDestinationWindow'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='draggingEnded:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggingEntered:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='draggingExited:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggingFormation'>
<retval declared_type='NSDraggingFormation' type64='q' type='i'/>
</method>
<method selector='draggingLocation'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='draggingPasteboard'>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='draggingSequenceNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='draggingSession:endedAtPoint:operation:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggingSession:movedToPoint:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggingSession:sourceOperationMaskForDraggingContext:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='context' declared_type='NSDraggingContext' type64='q' type='i' index='1'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='draggingSession:willBeginAtPoint:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='draggingSource'>
<retval declared_type='id' type='@'/>
</method>
<method selector='draggingSourceOperationMask'>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='draggingSourceOperationMaskForLocal:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='draggingUpdated:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='drawCharactersInRange:forContentView:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWithFrame:inView:characterIndex:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWithFrame:inView:characterIndex:layoutManager:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawerDidClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawerDidOpen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawerShouldClose:'>
<arg name='sender' declared_type='NSDrawer*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawerShouldOpen:'>
<arg name='sender' declared_type='NSDrawer*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawerWillClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawerWillOpen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawerWillResizeContents:toSize:'>
<arg name='sender' declared_type='NSDrawer*' type='@' index='0'/>
<arg name='contentSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='drawsVerticallyForCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:'>
<arg name='enumOpts' declared_type='NSDraggingItemEnumerationOptions' type64='Q' type='I' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<arg name='classArray' declared_type='NSArray*' type='@' index='2'/>
<arg name='searchOptions' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='block' function_pointer='true' declared_type='void (^)(NSDraggingItem *, NSInteger, BOOL *)' type='@?' index='4'>
<arg declared_type='NSDraggingItem*' type='@'/>
<arg declared_type='NSInteger' type64='q' type='i'/>
<arg declared_type='BOOL*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='exposeBinding:' class_method='true'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='exposedBindings'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='findBarView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='findBarViewDidChangeHeight'>
<retval declared_type='void' type='v'/>
</method>
<method selector='firstRectForCharacterRange:'>
<arg name='theRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='firstRectForCharacterRange:actualRange:'>
<arg name='aRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='firstSelectedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='fontManager:willIncludeFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='fontName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='fractionOfDistanceThroughGlyphForPoint:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='hasMarkedText'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='highlight:withFrame:inView:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='identifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='ignoreModifierKeysForDraggingSession:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='ignoreModifierKeysWhileDragging'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='ignoreSpelling:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='image:didLoadPartOfRepresentation:withValidRows:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<arg name='rows' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='image:didLoadRepresentation:withStatus:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<arg name='status' declared_type='NSImageLoadStatus' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='image:didLoadRepresentationHeader:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='image:willLoadRepresentation:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='imageDidNotDraw:inRect:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='infoForBinding:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='initWithPasteboardPropertyList:ofType:'>
<arg name='propertyList' declared_type='id' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPickerMask:colorPanel:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='owningColorPanel' declared_type='NSColorPanel*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='inputClientBecomeActive:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='inputClientDisabled:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='inputClientEnabled:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='inputClientResignActive:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:'>
<arg name='glyphs' declared_type='NSGlyph*' const='true' type='^I' index='0'/>
<arg name='length' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertNewButtonImage:in:'>
<arg name='newButtonImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='buttonCell' declared_type='NSButtonCell*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertText:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertText:client:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='sender' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertText:replacementRange:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='replacementRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isExplicitlyIncluded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFindBarVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='key'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='keyPathsForValuesAffectingPreview'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method selector='layoutManager:didCompleteLayoutForTextContainer:atEnd:'>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='0'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='1'/>
<arg name='layoutFinishedFlag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:'>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='0'/>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='toScreen' declared_type='BOOL' type='B' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<arg name='effectiveCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='4'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='layoutManagerDidInvalidateLayout:'>
<arg name='sender' declared_type='NSLayoutManager*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutOptions'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='layoutOrientation'>
<retval declared_type='NSTextLayoutOrientation' type64='q' type='i'/>
</method>
<method selector='localizedKey'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='localizedSummaryItems'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='localizedTitlesForItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='markedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='markedTextAbandoned:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='markedTextSelectionChanged:client:'>
<arg name='newSel' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='sender' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='menu:updateItem:atIndex:shouldCancel:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='item' declared_type='NSMenuItem*' type='@' index='1'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='shouldCancel' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='menu:willHighlightItem:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='item' declared_type='NSMenuItem*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='menuDidClose:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='menuHasKeyEquivalent:forEvent:target:action:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='target' declared_type='id*' type='^@' index='2'/>
<arg name='action' declared_type='SEL*' type='^:' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='menuNeedsUpdate:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='menuWillOpen:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='minContentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='mouseDownOnCharacterIndex:atCoordinate:withModifier:client:'>
<arg name='theIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='theFlags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='sender' declared_type='id' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:'>
<arg name='theIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='theFlags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='sender' declared_type='id' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mouseUpOnCharacterIndex:atCoordinate:withModifier:client:'>
<arg name='theIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='theFlags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='sender' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='namesOfPromisedFilesDroppedAtDestination:'>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='numberOfItemsInComboBox:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfItemsInComboBoxCell:'>
<arg name='comboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfItemsInMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfRowsInTableView:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfValidItemsForDrop'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='objectDidBeginEditing:'>
<arg name='editor' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='objectDidEndEditing:'>
<arg name='editor' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='optionDescriptionsForBinding:'>
<arg name='aBinding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='outlineView:acceptDrop:item:childIndex:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:child:ofItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outlineView:dataCellForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='NSCell*' type='@'/>
</method>
<method selector='outlineView:didAddRowView:forRow:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:didClickTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:didDragTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:didRemoveRowView:forRow:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:draggingSession:endedAtPoint:operation:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:draggingSession:willBeginAtPoint:forItems:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='draggedItems' declared_type='NSArray*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:heightOfRowByItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='outlineView:isGroupItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:isItemExpandable:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:itemForPersistentObject:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outlineView:mouseDownInHeaderOfTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='1'/>
<arg name='items' declared_type='NSArray*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='outlineView:nextTypeSelectMatchFromItem:toItem:forString:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='startItem' declared_type='id' type='@' index='1'/>
<arg name='endItem' declared_type='id' type='@' index='2'/>
<arg name='searchString' declared_type='NSString*' type='@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outlineView:numberOfChildrenOfItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='outlineView:objectValueForTableColumn:byItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outlineView:pasteboardWriterForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outlineView:persistentObjectForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outlineView:rowViewForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSTableRowView*' type='@'/>
</method>
<method selector='outlineView:selectionIndexesForProposedSelection:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='proposedSelectionIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='outlineView:setObjectValue:forTableColumn:byItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:shouldCollapseItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldEditTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldExpandItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldReorderColumn:toColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='newColumnIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldSelectItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldSelectTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldShowCellExpansionForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldShowOutlineCellForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldTrackCell:forTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:shouldTypeSelectForEvent:withCurrentSearchString:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='searchString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineView:sizeToFitWidthOfColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='outlineView:sortDescriptorsDidChange:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='oldDescriptors' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='rect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='3'/>
<arg name='item' declared_type='id' type='@' index='4'/>
<arg name='mouseLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='5'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='outlineView:typeSelectStringForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='outlineView:updateDraggingItemsForDrag:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:validateDrop:proposedItem:proposedChildIndex:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='outlineView:viewForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='outlineView:willDisplayCell:forTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:willDisplayOutlineCell:forTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineView:writeItems:toPasteboard:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='items' declared_type='NSArray*' type='@' index='1'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='outlineViewColumnDidMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineViewColumnDidResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineViewItemDidCollapse:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineViewItemDidExpand:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineViewItemWillCollapse:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineViewItemWillExpand:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineViewSelectionDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineViewSelectionIsChanging:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='panel:compareFilename:with:caseSensitive:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='name1' declared_type='NSString*' type='@' index='1'/>
<arg name='name2' declared_type='NSString*' type='@' index='2'/>
<arg name='caseSensitive' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSComparisonResult' type64='q' type='i'/>
</method>
<method selector='panel:didChangeToDirectoryURL:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='url' declared_type='NSURL*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='panel:directoryDidChange:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='path' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='panel:isValidFilename:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='panel:shouldEnableURL:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='url' declared_type='NSURL*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='panel:shouldShowFilename:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='panel:userEnteredFilename:confirmed:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<arg name='okFlag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='panel:validateURL:error:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='url' declared_type='NSURL*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='panel:willExpand:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='expanding' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='panelSelectionDidChange:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteboard:item:provideDataForType:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='item' declared_type='NSPasteboardItem*' type='@' index='1'/>
<arg name='type' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteboard:provideDataForType:'>
<arg name='sender' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteboardChangedOwner:'>
<arg name='sender' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteboardFinishedWithDataProvider:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteboardPropertyListForType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='pathCell:willDisplayOpenPanel:'>
<arg name='pathCell' declared_type='NSPathCell*' type='@' index='0'/>
<arg name='openPanel' declared_type='NSOpenPanel*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pathCell:willPopUpMenu:'>
<arg name='pathCell' declared_type='NSPathCell*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pathControl:acceptDrop:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pathControl:shouldDragPathComponentCell:withPasteboard:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='pathComponentCell' declared_type='NSPathComponentCell*' type='@' index='1'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pathControl:validateDrop:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='pathControl:willDisplayOpenPanel:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='openPanel' declared_type='NSOpenPanel*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pathControl:willPopUpMenu:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performActionForItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performDragOperation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='popoverDidClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='popoverDidShow:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='popoverShouldClose:'>
<arg name='popover' declared_type='NSPopover*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='popoverWillClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='popoverWillShow:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='prepareForDragOperation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='provideNewButtonImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='provideNewView:'>
<arg name='initialRequest' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='readSelectionFromPasteboard:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readableTypesForPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='readingOptionsForType:pasteboard:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSPasteboardReadingOptions' type64='Q' type='I'/>
</method>
<method selector='rectsForCharacterRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='replaceCharactersInRange:withString:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='restoreWindowWithIdentifier:state:completionHandler:' class_method='true'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSWindow *, NSError *)' type='@?' index='2'>
<arg declared_type='NSWindow*' type='@'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='rootItemForBrowser:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='ruleEditor:child:forCriterion:withRowType:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='criterion' declared_type='id' type='@' index='2'/>
<arg name='rowType' declared_type='NSRuleEditorRowType' type64='Q' type='I' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='ruleEditor:displayValueForCriterion:inRow:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='criterion' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='ruleEditor:numberOfChildrenForCriterion:withRowType:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='criterion' declared_type='id' type='@' index='1'/>
<arg name='rowType' declared_type='NSRuleEditorRowType' type64='Q' type='I' index='2'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='criterion' declared_type='id' type='@' index='1'/>
<arg name='value' declared_type='id' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='ruleEditorRowsDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollRangeToVisible:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='searchForItemsWithSearchString:resultLimit:matchedItemHandler:'>
<arg name='searchString' declared_type='NSString*' type='@' index='0'/>
<arg name='resultLimit' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='handleMatchedItems' function_pointer='true' declared_type='void (^)(NSArray *)' type='@?' index='2'>
<arg declared_type='NSArray*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='selectedRanges'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectionShouldChangeInOutlineView:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectionShouldChangeInTableView:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAnimatesToDestination:'>
<arg name='animatesToDestination' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnimations:'>
<arg name='dict' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttachment:'>
<arg name='anObject' declared_type='NSTextAttachment*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColor:'>
<arg name='newColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultPlaceholder:forMarker:withBinding:' class_method='true'>
<arg name='placeholder' declared_type='id' type='@' index='0'/>
<arg name='marker' declared_type='id' type='@' index='1'/>
<arg name='binding' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDockTile:'>
<arg name='dockTile' declared_type='NSDockTile*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingFormation:'>
<arg name='draggingFormation' declared_type='NSDraggingFormation' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFindBarView:'>
<arg name='findBarView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFindBarVisible:'>
<arg name='findBarVisible' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIdentifier:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntAttribute:value:forGlyphAtIndex:'>
<arg name='attributeTag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='val' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocalizedKey:'>
<arg name='localizedKey' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMarkedText:selectedRange:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='selRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMarkedText:selectedRange:replacementRange:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='selectedRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='replacementRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMode:'>
<arg name='mode' declared_type='NSColorPanelMode' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfValidItemsForDrop:'>
<arg name='numberOfValidItemsForDrop' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedRanges:'>
<arg name='selectedRanges' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValue:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldReplaceCharactersInRanges:withStrings:'>
<arg name='ranges' declared_type='NSArray*' type='@' index='0'/>
<arg name='strings' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showAllHelpTopicsForSearchString:'>
<arg name='searchString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='slideDraggedImageTo:'>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sound:didFinishPlaying:'>
<arg name='sound' declared_type='NSSound*' type='@' index='0'/>
<arg name='aBool' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='speechRecognizer:didRecognizeCommand:'>
<arg name='sender' declared_type='NSSpeechRecognizer*' type='@' index='0'/>
<arg name='command' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='speechSynthesizer:didEncounterErrorAtIndex:ofString:message:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='string' declared_type='NSString*' type='@' index='2'/>
<arg name='message' declared_type='NSString*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='speechSynthesizer:didEncounterSyncMessage:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='message' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='speechSynthesizer:didFinishSpeaking:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='finishedSpeaking' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='speechSynthesizer:willSpeakPhoneme:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='phonemeOpcode' declared_type='short' type='s' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='speechSynthesizer:willSpeakWord:ofString:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='characterRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='string' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='splitView:additionalEffectiveRectOfDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='splitView:canCollapseSubview:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='subview' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='splitView:constrainMaxCoordinate:ofSubviewAt:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedMaximumPosition' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='splitView:constrainMinCoordinate:ofSubviewAt:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedMinimumPosition' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='splitView:constrainSplitPosition:ofSubviewAt:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedPosition' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedEffectiveRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='drawnRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='splitView:resizeSubviewsWithOldSize:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='oldSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='splitView:shouldAdjustSizeOfSubview:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='subview' declared_type='NSView*' type='@' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='splitView:shouldHideDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='splitViewDidResizeSubviews:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='splitViewWillResizeSubviews:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='string'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='stringAtIndex:effectiveRange:endsWithSearchBoundary:'>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='outRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<arg name='outFlag' declared_type='BOOL*' type='^B' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='stringLength'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='supportsMode:'>
<arg name='mode' declared_type='NSColorPanelMode' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tabView:didSelectTabViewItem:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tabView:shouldSelectTabViewItem:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tabView:willSelectTabViewItem:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tabViewDidChangeNumberOfTabViewItems:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:acceptDrop:row:dropOperation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='dropOperation' declared_type='NSTableViewDropOperation' type64='Q' type='I' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:dataCellForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSCell*' type='@'/>
</method>
<method selector='tableView:didAddRowView:forRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:didClickTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:didDragTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:didRemoveRowView:forRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:draggingSession:endedAtPoint:operation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:draggingSession:willBeginAtPoint:forRowIndexes:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:heightOfRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='tableView:isGroupRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:mouseDownInHeaderOfTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='1'/>
<arg name='indexSet' declared_type='NSIndexSet*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tableView:nextTypeSelectMatchFromRow:toRow:forString:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='startRow' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='endRow' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='searchString' declared_type='NSString*' type='@' index='3'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='tableView:objectValueForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='tableView:pasteboardWriterForRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='tableView:rowViewForRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSTableRowView*' type='@'/>
</method>
<method selector='tableView:selectionIndexesForProposedSelection:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='proposedSelectionIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='tableView:setObjectValue:forTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:shouldEditTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:shouldReorderColumn:toColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='newColumnIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:shouldSelectRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:shouldSelectTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:shouldShowCellExpansionForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:shouldTrackCell:forTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:shouldTypeSelectForEvent:withCurrentSearchString:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='searchString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:sizeToFitWidthOfColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='tableView:sortDescriptorsDidChange:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='oldDescriptors' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='rect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='3'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='mouseLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='5'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tableView:typeSelectStringForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tableView:updateDraggingItemsForDrag:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:validateDrop:proposedRow:proposedDropOperation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='dropOperation' declared_type='NSTableViewDropOperation' type64='Q' type='I' index='3'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='tableView:viewForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='tableView:willDisplayCell:forTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView:writeRows:toPasteboard:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rows' declared_type='NSArray*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableView:writeRowsWithIndexes:toPasteboard:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tableViewColumnDidMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableViewColumnDidResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableViewSelectionDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableViewSelectionIsChanging:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='terminate:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidBeginEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidEndEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textShouldBeginEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textShouldEndEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textStorageDidProcessEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textStorageWillProcessEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView:URLForContentsOfTextAttachment:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='textAttachment' declared_type='NSTextAttachment*' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='textView:clickedOnCell:inRect:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView:clickedOnCell:inRect:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView:clickedOnLink:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='link' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textView:clickedOnLink:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='link' declared_type='id' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textView:completions:forPartialWordRange:indexOfSelectedItem:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='words' declared_type='NSArray*' type='@' index='1'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='index' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textView:didCheckTextInRange:types:options:results:orthography:wordCount:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes' type='Q' index='2'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='results' declared_type='NSArray*' type='@' index='4'/>
<arg name='orthography' declared_type='NSOrthography*' type='@' index='5'/>
<arg name='wordCount' declared_type='NSInteger' type64='q' type='i' index='6'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textView:doCommandBySelector:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='commandSelector' declared_type='SEL' type=':' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textView:doubleClickedOnCell:inRect:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView:doubleClickedOnCell:inRect:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView:draggedCell:inRect:event:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView:draggedCell:inRect:event:atIndex:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView:menu:forEvent:atIndex:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='textView:shouldChangeTextInRange:replacementString:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='affectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='replacementString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textView:shouldChangeTextInRanges:replacementStrings:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='affectedRanges' declared_type='NSArray*' type='@' index='1'/>
<arg name='replacementStrings' declared_type='NSArray*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textView:shouldChangeTypingAttributes:toAttributes:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='oldTypingAttributes' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='newTypingAttributes' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='textView:shouldSetSpellingState:range:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='value' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='affectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='textView:willChangeSelectionFromCharacterRange:toCharacterRange:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='oldSelectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='newSelectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='oldSelectedCharRanges' declared_type='NSArray*' type='@' index='1'/>
<arg name='newSelectedCharRanges' declared_type='NSArray*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textView:willCheckTextInRange:options:types:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes*' type='^Q' index='3'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='textView:willDisplayToolTip:forCharacterAtIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='tooltip' declared_type='NSString*' type='@' index='1'/>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='textView:writablePasteboardTypesForCell:atIndex:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textView:writeCell:atIndex:toPasteboard:type:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='3'/>
<arg name='type' declared_type='NSString*' type='@' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textViewDidChangeSelection:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textViewDidChangeTypingAttributes:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='substring' declared_type='NSString*' type='@' index='1'/>
<arg name='tokenIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='selectedIndex' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tokenField:displayStringForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tokenField:editingStringForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tokenField:hasMenuForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tokenField:menuForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='tokenField:readFromPasteboard:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tokenField:representedObjectForEditingString:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='editingString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='tokenField:shouldAddObjects:atIndex:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='tokens' declared_type='NSArray*' type='@' index='1'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tokenField:styleForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSTokenStyle' type64='Q' type='I'/>
</method>
<method selector='tokenField:writeRepresentedObjects:toPasteboard:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='objects' declared_type='NSArray*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='substring' declared_type='NSString*' type='@' index='1'/>
<arg name='tokenIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='selectedIndex' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tokenFieldCell:displayStringForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tokenFieldCell:editingStringForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='tokenFieldCell:hasMenuForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tokenFieldCell:menuForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='tokenFieldCell:readFromPasteboard:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tokenFieldCell:representedObjectForEditingString:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='editingString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='tokenFieldCell:shouldAddObjects:atIndex:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='tokens' declared_type='NSArray*' type='@' index='1'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tokenFieldCell:styleForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSTokenStyle' type64='Q' type='I'/>
</method>
<method selector='tokenFieldCell:writeRepresentedObjects:toPasteboard:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='objects' declared_type='NSArray*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<arg name='itemIdentifier' declared_type='NSString*' type='@' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSToolbarItem*' type='@'/>
</method>
<method selector='toolbarAllowedItemIdentifiers:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='toolbarDefaultItemIdentifiers:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='toolbarDidRemoveItem:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toolbarSelectableItemIdentifiers:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='toolbarWillAddItem:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<arg name='flag' declared_type='BOOL' type='B' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='trackMouse:inRect:ofView:untilMouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='unbind:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='undoManagerForTextView:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<retval declared_type='NSUndoManager*' type='@'/>
</method>
<method selector='unmarkText'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateDraggingItemsForDrag:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='validAttributesForMarkedText'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='validModesForFontPanel:'>
<arg name='fontPanel' declared_type='NSFontPanel*' type='@' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='validateMenuItem:'>
<arg name='menuItem' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='validateToolbarItem:'>
<arg name='theItem' declared_type='NSToolbarItem*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='validateUserInterfaceItem:'>
<arg name='anItem' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='value'>
<retval declared_type='id' type='@'/>
</method>
<method selector='valueClassForBinding:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='Class' type='#'/>
</method>
<method selector='view:stringForToolTip:point:userData:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='tag' declared_type='NSToolTipTag' type64='q' type='i' index='1'/>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='data' declared_type='void*' type='^v' index='3'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='viewSizeChanged:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='visibleCharacterRanges'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='wantsPeriodicDraggingUpdates'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsToDelayTextChangeNotifications'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsToHandleMouseEvents'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsToInterpretAllKeystrokes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsToTrackMouse'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='window:didDecodeRestorableState:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='window:shouldDragDocumentWithEvent:from:withPasteboard:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='dragImageLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='window:shouldPopUpDocumentPathMenu:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='window:startCustomAnimationToEnterFullScreenWithDuration:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='duration' declared_type='NSTimeInterval' type='d' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='window:startCustomAnimationToExitFullScreenWithDuration:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='duration' declared_type='NSTimeInterval' type='d' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='window:willEncodeRestorableState:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='window:willPositionSheet:usingRect:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='sheet' declared_type='NSWindow*' type='@' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='window:willResizeForVersionBrowserWithMaxPreferredSize:maxAllowedSize:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='maxPreferredFrameSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<arg name='maxAllowedFrameSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='2'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='window:willUseFullScreenContentSize:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='proposedSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='window:willUseFullScreenPresentationOptions:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='proposedOptions' declared_type='NSApplicationPresentationOptions' type64='Q' type='I' index='1'/>
<retval declared_type='NSApplicationPresentationOptions' type64='Q' type='I'/>
</method>
<method selector='windowDidBecomeKey:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidBecomeMain:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidChangeScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidChangeScreenProfile:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidDeminiaturize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidEndLiveResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidEndSheet:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidEnterFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidEnterVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidExitFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidExitVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidExpose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidFailToEnterFullScreen:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidFailToExitFullScreen:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidMiniaturize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidResignKey:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidResignMain:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowDidUpdate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowLevel'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='windowShouldClose:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='windowShouldZoom:toFrame:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='newFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='windowWillBeginSheet:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillEnterFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillEnterVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillExitFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillExitVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillMiniaturize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillResize:toSize:'>
<arg name='sender' declared_type='NSWindow*' type='@' index='0'/>
<arg name='frameSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='windowWillReturnFieldEditor:toObject:'>
<arg name='sender' declared_type='NSWindow*' type='@' index='0'/>
<arg name='client' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='windowWillReturnUndoManager:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSUndoManager*' type='@'/>
</method>
<method selector='windowWillStartLiveResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowWillUseStandardFrame:defaultFrame:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='newFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='writableTypesForPasteboard:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='writeSelectionToPasteboard:types:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='types' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writingOptionsForType:pasteboard:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSPasteboardWritingOptions' type64='Q' type='I'/>
</method>
</class>
<class name='NSObjectController'>
<method selector='add:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='automaticallyPreparesContent'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canAdd'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canRemove'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='content'>
<retval declared_type='id' type='@'/>
</method>
<method selector='defaultFetchRequest'>
<retval declared_type='NSFetchRequest*' type='@'/>
</method>
<method selector='entityName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='fetch:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fetchPredicate'>
<retval declared_type='NSPredicate*' type='@'/>
</method>
<method selector='fetchWithRequest:merge:error:'>
<arg name='fetchRequest' declared_type='NSFetchRequest*' type='@' index='0'/>
<arg name='merge' declared_type='BOOL' type='B' index='1'/>
<arg name='error' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithContent:'>
<arg name='content' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='managedObjectContext'>
<retval declared_type='NSManagedObjectContext*' type='@'/>
</method>
<method selector='newObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='objectClass'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='prepareContent'>
<retval declared_type='void' type='v'/>
</method>
<method selector='remove:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObject:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedObjects'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selection'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAutomaticallyPreparesContent:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContent:'>
<arg name='content' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEntityName:'>
<arg name='entityName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFetchPredicate:'>
<arg name='predicate' declared_type='NSPredicate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setManagedObjectContext:'>
<arg name='managedObjectContext' declared_type='NSManagedObjectContext*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjectClass:'>
<arg name='objectClass' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesLazyFetching:'>
<arg name='enabled' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesLazyFetching'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='validateUserInterfaceItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSOpenGLContext'>
<method selector='CGLContextObj'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='clearCurrentContext' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='clearDrawable'>
<retval declared_type='void' type='v'/>
</method>
<method selector='copyAttributesFromContext:withMask:'>
<arg name='context' declared_type='NSOpenGLContext*' type='@' index='0'/>
<arg name='mask' declared_type='GLbitfield' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='createTexture:fromView:internalFormat:'>
<arg name='target' declared_type='GLenum' type='I' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<arg name='format' declared_type='GLenum' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='currentContext' class_method='true'>
<retval declared_type='NSOpenGLContext*' type='@'/>
</method>
<method selector='currentVirtualScreen'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='flushBuffer'>
<retval declared_type='void' type='v'/>
</method>
<method selector='getValues:forParameter:'>
<arg name='vals' declared_type='GLint*' type='^i' index='0'/>
<arg name='param' declared_type='NSOpenGLContextParameter' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithCGLContextObj:'>
<arg name='context' declared_type='void*' type='^v' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFormat:shareContext:'>
<arg name='format' declared_type='NSOpenGLPixelFormat*' type='@' index='0'/>
<arg name='share' declared_type='NSOpenGLContext*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='makeCurrentContext'>
<retval declared_type='void' type='v'/>
</method>
<method selector='pixelBuffer'>
<retval declared_type='NSOpenGLPixelBuffer*' type='@'/>
</method>
<method selector='pixelBufferCubeMapFace'>
<retval declared_type='GLenum' type='I'/>
</method>
<method selector='pixelBufferMipMapLevel'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='setCurrentVirtualScreen:'>
<arg name='screen' declared_type='GLint' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFullScreen'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOffScreen:width:height:rowbytes:'>
<arg name='baseaddr' declared_type='void*' type='^v' index='0'/>
<arg name='width' declared_type='GLsizei' type='i' index='1'/>
<arg name='height' declared_type='GLsizei' type='i' index='2'/>
<arg name='rowbytes' declared_type='GLint' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:'>
<arg name='pixelBuffer' declared_type='NSOpenGLPixelBuffer*' type='@' index='0'/>
<arg name='face' declared_type='GLenum' type='I' index='1'/>
<arg name='level' declared_type='GLint' type='i' index='2'/>
<arg name='screen' declared_type='GLint' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextureImageToPixelBuffer:colorBuffer:'>
<arg name='pixelBuffer' declared_type='NSOpenGLPixelBuffer*' type='@' index='0'/>
<arg name='source' declared_type='GLenum' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValues:forParameter:'>
<arg name='vals' declared_type='GLint*' const='true' type='^i' index='0'/>
<arg name='param' declared_type='NSOpenGLContextParameter' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='update'>
<retval declared_type='void' type='v'/>
</method>
<method selector='view'>
<retval declared_type='NSView*' type='@'/>
</method>
</class>
<class name='NSOpenGLLayer'>
<method selector='canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:'>
<arg name='context' declared_type='NSOpenGLContext*' type='@' index='0'/>
<arg name='pixelFormat' declared_type='NSOpenGLPixelFormat*' type='@' index='1'/>
<arg name='t' declared_type='CFTimeInterval' type='d' index='2'/>
<arg name='ts' declared_type='CVTimeStamp*' const='true' type='^{_CVTimeStamp=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:'>
<arg name='context' declared_type='NSOpenGLContext*' type='@' index='0'/>
<arg name='pixelFormat' declared_type='NSOpenGLPixelFormat*' type='@' index='1'/>
<arg name='t' declared_type='CFTimeInterval' type='d' index='2'/>
<arg name='ts' declared_type='CVTimeStamp*' const='true' type='^{_CVTimeStamp=IiqQdq{CVSMPTETime=ssIIIssss}QQ}' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='openGLContext'>
<retval declared_type='NSOpenGLContext*' type='@'/>
</method>
<method selector='openGLContextForPixelFormat:'>
<arg name='pixelFormat' declared_type='NSOpenGLPixelFormat*' type='@' index='0'/>
<retval declared_type='NSOpenGLContext*' type='@'/>
</method>
<method selector='openGLPixelFormat'>
<retval declared_type='NSOpenGLPixelFormat*' type='@'/>
</method>
<method selector='openGLPixelFormatForDisplayMask:'>
<arg name='mask' declared_type='uint32_t' type='I' index='0'/>
<retval declared_type='NSOpenGLPixelFormat*' type='@'/>
</method>
<method selector='setOpenGLContext:'>
<arg name='openGLContext' declared_type='NSOpenGLContext*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpenGLPixelFormat:'>
<arg name='openGLPixelFormat' declared_type='NSOpenGLPixelFormat*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='view'>
<retval declared_type='NSView*' type='@'/>
</method>
</class>
<class name='NSOpenGLPixelBuffer'>
<method selector='CGLPBufferObj'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='initWithCGLPBufferObj:'>
<arg name='pbuffer' declared_type='void*' type='^v' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:'>
<arg name='target' declared_type='GLenum' type='I' index='0'/>
<arg name='format' declared_type='GLenum' type='I' index='1'/>
<arg name='maxLevel' declared_type='GLint' type='i' index='2'/>
<arg name='pixelsWide' declared_type='GLsizei' type='i' index='3'/>
<arg name='pixelsHigh' declared_type='GLsizei' type='i' index='4'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='pixelsHigh'>
<retval declared_type='GLsizei' type='i'/>
</method>
<method selector='pixelsWide'>
<retval declared_type='GLsizei' type='i'/>
</method>
<method selector='textureInternalFormat'>
<retval declared_type='GLenum' type='I'/>
</method>
<method selector='textureMaxMipMapLevel'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='textureTarget'>
<retval declared_type='GLenum' type='I'/>
</method>
</class>
<class name='NSOpenGLPixelFormat'>
<method selector='CGLPixelFormatObj'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='attributes'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='getValues:forAttribute:forVirtualScreen:'>
<arg name='vals' declared_type='GLint*' type='^i' index='0'/>
<arg name='attrib' declared_type='NSOpenGLPixelFormatAttribute' type='I' index='1'/>
<arg name='screen' declared_type='GLint' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithAttributes:'>
<arg name='attribs' declared_type='NSOpenGLPixelFormatAttribute*' const='true' type='^I' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCGLPixelFormatObj:'>
<arg name='format' declared_type='void*' type='^v' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:'>
<arg name='attribs' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='numberOfVirtualScreens'>
<retval declared_type='GLint' type='i'/>
</method>
<method selector='setAttributes:'>
<arg name='attribs' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSOpenGLView'>
<method selector='clearGLContext'>
<retval declared_type='void' type='v'/>
</method>
<method selector='defaultPixelFormat' class_method='true'>
<retval declared_type='NSOpenGLPixelFormat*' type='@'/>
</method>
<method selector='initWithFrame:pixelFormat:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='format' declared_type='NSOpenGLPixelFormat*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='openGLContext'>
<retval declared_type='NSOpenGLContext*' type='@'/>
</method>
<method selector='pixelFormat'>
<retval declared_type='NSOpenGLPixelFormat*' type='@'/>
</method>
<method selector='prepareOpenGL'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reshape'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpenGLContext:'>
<arg name='context' declared_type='NSOpenGLContext*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPixelFormat:'>
<arg name='pixelFormat' declared_type='NSOpenGLPixelFormat*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='update'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSOpenPanel'>
<method selector='URLs'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='allowsMultipleSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='name' declared_type='NSString*' type='@' index='1'/>
<arg name='fileTypes' declared_type='NSArray*' type='@' index='2'/>
<arg name='delegate' declared_type='id' type='@' index='3'/>
<arg name='didEndSelector' declared_type='SEL' type=':' index='4'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='name' declared_type='NSString*' type='@' index='1'/>
<arg name='fileTypes' declared_type='NSArray*' type='@' index='2'/>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='3'/>
<arg name='delegate' declared_type='id' type='@' index='4'/>
<arg name='didEndSelector' declared_type='SEL' type=':' index='5'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='6'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='canChooseDirectories'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canChooseFiles'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='filenames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='openPanel' class_method='true'>
<retval declared_type='NSOpenPanel*' type='@'/>
</method>
<method selector='resolvesAliases'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='runModalForDirectory:file:types:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='name' declared_type='NSString*' type='@' index='1'/>
<arg name='fileTypes' declared_type='NSArray*' type='@' index='2'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runModalForTypes:'>
<arg name='fileTypes' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAllowsMultipleSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanChooseDirectories:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanChooseFiles:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setResolvesAliases:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSOutlineView'>
<method selector='autoresizesOutlineColumn'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autosaveExpandedItems'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='collapseItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='collapseItem:collapseChildren:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<arg name='collapseChildren' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dataSource'>
<retval declared_type='id' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='expandItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='expandItem:expandChildren:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<arg name='expandChildren' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='frameOfOutlineCellAtRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='indentationMarkerFollowsCell'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='indentationPerLevel'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='insertItemsAtIndexes:inParent:withAnimation:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='parent' declared_type='id' type='@' index='1'/>
<arg name='animationOptions' declared_type='NSTableViewAnimationOptions' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isExpandable:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isItemExpanded:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='itemAtRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='levelForItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='levelForRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='moveItemAtIndex:inParent:toIndex:inParent:'>
<arg name='fromIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='oldParent' declared_type='id' type='@' index='1'/>
<arg name='toIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='newParent' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outlineTableColumn'>
<retval declared_type='NSTableColumn*' type='@'/>
</method>
<method selector='parentForItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='reloadItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadItem:reloadChildren:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<arg name='reloadChildren' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemsAtIndexes:inParent:withAnimation:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='parent' declared_type='id' type='@' index='1'/>
<arg name='animationOptions' declared_type='NSTableViewAnimationOptions' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rowForItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAutoresizesOutlineColumn:'>
<arg name='resize' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutosaveExpandedItems:'>
<arg name='save' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataSource:'>
<arg name='aSource' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDropItem:dropChildIndex:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIndentationMarkerFollowsCell:'>
<arg name='drawInCell' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIndentationPerLevel:'>
<arg name='indentationPerLevel' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOutlineTableColumn:'>
<arg name='outlineTableColumn' declared_type='NSTableColumn*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldCollapseAutoExpandedItemsForDeposited:'>
<arg name='deposited' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSPDFImageRep'>
<method selector='PDFRepresentation'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='bounds'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='currentPage'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='imageRepWithData:' class_method='true'>
<arg name='pdfData' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:'>
<arg name='pdfData' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='pageCount'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setCurrentPage:'>
<arg name='page' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPICTImageRep'>
<method selector='PICTRepresentation'>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='boundingBox'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='imageRepWithData:' class_method='true'>
<arg name='pictData' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:'>
<arg name='pictData' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSPageLayout'>
<method selector='accessoryControllers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='addAccessoryController:'>
<arg name='accessoryController' declared_type='NSViewController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didEndSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pageLayout' class_method='true'>
<retval declared_type='NSPageLayout*' type='@'/>
</method>
<method selector='printInfo'>
<retval declared_type='NSPrintInfo*' type='@'/>
</method>
<method selector='readPrintInfo'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAccessoryController:'>
<arg name='accessoryController' declared_type='NSViewController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runModal'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runModalWithPrintInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAccessoryView:'>
<arg name='accessoryView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='writePrintInfo'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPanel'>
<method selector='becomesKeyOnlyIfNeeded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFloatingPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setBecomesKeyOnlyIfNeeded:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatingPanel:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWorksWhenModal:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='worksWhenModal'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSParagraphStyle'>
<method selector='alignment'>
<retval declared_type='NSTextAlignment' type64='Q' type='I'/>
</method>
<method selector='baseWritingDirection'>
<retval declared_type='NSWritingDirection' type64='q' type='i'/>
</method>
<method selector='defaultParagraphStyle' class_method='true'>
<retval declared_type='NSParagraphStyle*' type='@'/>
</method>
<method selector='defaultTabInterval'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='defaultWritingDirectionForLanguage:' class_method='true'>
<arg name='languageName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSWritingDirection' type64='q' type='i'/>
</method>
<method selector='firstLineHeadIndent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='headIndent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='headerLevel'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='hyphenationFactor'>
<retval declared_type='float' type='f'/>
</method>
<method selector='lineBreakMode'>
<retval declared_type='NSLineBreakMode' type64='Q' type='I'/>
</method>
<method selector='lineHeightMultiple'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='lineSpacing'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='maximumLineHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='minimumLineHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='paragraphSpacing'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='paragraphSpacingBefore'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='tabStops'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tailIndent'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='textBlocks'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textLists'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tighteningFactorForTruncation'>
<retval declared_type='float' type='f'/>
</method>
</class>
<class name='NSPasteboard'>
<method selector='addTypes:owner:'>
<arg name='newTypes' declared_type='NSArray*' type='@' index='0'/>
<arg name='newOwner' declared_type='id' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='availableTypeFromArray:'>
<arg name='types' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='canReadItemWithDataConformingToTypes:'>
<arg name='types' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canReadObjectForClasses:options:'>
<arg name='classArray' declared_type='NSArray*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='changeCount'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='clearContents'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='dataForType:'>
<arg name='dataType' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='declareTypes:owner:'>
<arg name='newTypes' declared_type='NSArray*' type='@' index='0'/>
<arg name='newOwner' declared_type='id' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='generalPasteboard' class_method='true'>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='indexOfPasteboardItem:'>
<arg name='pasteboardItem' declared_type='NSPasteboardItem*' type='@' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='pasteboardByFilteringData:ofType:' class_method='true'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='pasteboardByFilteringFile:' class_method='true'>
<arg name='filename' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='pasteboardByFilteringTypesInPasteboard:' class_method='true'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='pasteboardItems'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='pasteboardWithName:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='pasteboardWithUniqueName' class_method='true'>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method selector='propertyListForType:'>
<arg name='dataType' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='readFileContentsType:toFile:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='readFileWrapper'>
<retval declared_type='NSFileWrapper*' type='@'/>
</method>
<method selector='readObjectsForClasses:options:'>
<arg name='classArray' declared_type='NSArray*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='releaseGlobally'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setData:forType:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='dataType' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setPropertyList:forType:'>
<arg name='plist' declared_type='id' type='@' index='0'/>
<arg name='dataType' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setString:forType:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<arg name='dataType' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='stringForType:'>
<arg name='dataType' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='types'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='typesFilterableTo:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='writeFileContents:'>
<arg name='filename' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeFileWrapper:'>
<arg name='wrapper' declared_type='NSFileWrapper*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeObjects:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSPasteboardItem'>
<method selector='availableTypeFromArray:'>
<arg name='types' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='dataForType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='propertyListForType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setData:forType:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setDataProvider:forTypes:'>
<arg name='dataProvider' declared_type='id' type='@' index='0'/>
<arg name='types' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setPropertyList:forType:'>
<arg name='propertyList' declared_type='id' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setString:forType:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='stringForType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='types'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSPathCell'>
<method selector='URL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='allowedTypes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='clickedPathComponentCell'>
<retval declared_type='NSPathComponentCell*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='doubleAction'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='mouseEntered:withFrame:inView:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseExited:withFrame:inView:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pathComponentCellAtPoint:withFrame:inView:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='NSPathComponentCell*' type='@'/>
</method>
<method selector='pathComponentCellClass' class_method='true'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='pathComponentCells'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='pathStyle'>
<retval declared_type='NSPathStyle' type64='q' type='i'/>
</method>
<method selector='placeholderAttributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='placeholderString'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='rectOfPathComponentCell:withFrame:inView:'>
<arg name='cell' declared_type='NSPathComponentCell*' type='@' index='0'/>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='view' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setAllowedTypes:'>
<arg name='allowedTypes' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlSize:'>
<arg name='size' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleAction:'>
<arg name='action' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjectValue:'>
<arg name='obj' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPathComponentCells:'>
<arg name='cells' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPathStyle:'>
<arg name='style' declared_type='NSPathStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlaceholderAttributedString:'>
<arg name='string' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlaceholderString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPathComponentCell'>
<method selector='URL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='setImage:'>
<arg name='value' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPathControl'>
<method selector='URL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='clickedPathComponentCell'>
<retval declared_type='NSPathComponentCell*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='doubleAction'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='menu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='pathComponentCells'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='pathStyle'>
<retval declared_type='NSPathStyle' type64='q' type='i'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleAction:'>
<arg name='action' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingSourceOperationMask:forLocal:'>
<arg name='mask' declared_type='NSDragOperation' type64='Q' type='I' index='0'/>
<arg name='isLocal' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPathComponentCells:'>
<arg name='cells' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPathStyle:'>
<arg name='style' declared_type='NSPathStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPersistentDocument'>
<method selector='configurePersistentStoreCoordinatorForURL:ofType:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='fileType' declared_type='NSString*' type='@' index='1'/>
<arg name='error' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='fileType' declared_type='NSString*' type='@' index='1'/>
<arg name='configuration' declared_type='NSString*' type='@' index='2'/>
<arg name='storeOptions' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='error' declared_type='NSError**' type='^@' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='managedObjectContext'>
<retval declared_type='NSManagedObjectContext*' type='@'/>
</method>
<method selector='managedObjectModel'>
<retval declared_type='id' type='@'/>
</method>
<method selector='persistentStoreTypeForFileType:'>
<arg name='fileType' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='readFromURL:ofType:error:'>
<arg name='absoluteURL' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='error' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='revertToContentsOfURL:ofType:error:'>
<arg name='inAbsoluteURL' declared_type='NSURL*' type='@' index='0'/>
<arg name='inTypeName' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setManagedObjectContext:'>
<arg name='managedObjectContext' declared_type='NSManagedObjectContext*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='writeToURL:ofType:forSaveOperation:originalContentsURL:error:'>
<arg name='absoluteURL' declared_type='NSURL*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<arg name='saveOperation' declared_type='NSSaveOperationType' type64='Q' type='I' index='2'/>
<arg name='absoluteOriginalContentsURL' declared_type='NSURL*' type='@' index='3'/>
<arg name='error' declared_type='NSError**' type='^@' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSPopUpButton'>
<method selector='addItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addItemsWithTitles:'>
<arg name='itemTitles' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='autoenablesItems'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='indexOfItem:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithRepresentedObject:'>
<arg name='obj' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTarget:andAction:'>
<arg name='target' declared_type='id' type='@' index='0'/>
<arg name='actionSelector' declared_type='SEL' type=':' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfSelectedItem'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='initWithFrame:pullsDown:'>
<arg name='buttonFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertItemWithTitle:atIndex:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='itemArray'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='itemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='itemTitleAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='itemTitles'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='itemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='lastItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='menu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='numberOfItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='preferredEdge'>
<retval declared_type='NSRectEdge' type64='Q' type='i'/>
</method>
<method selector='pullsDown'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='removeAllItems'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItem:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='setAutoenablesItems:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreferredEdge:'>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPullsDown:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='synchronizeTitleAndSelectedItem'>
<retval declared_type='void' type='v'/>
</method>
<method selector='titleOfSelectedItem'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSPopUpButtonCell'>
<method selector='addItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addItemsWithTitles:'>
<arg name='itemTitles' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='altersStateOfSelectedItem'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='arrowPosition'>
<retval declared_type='NSPopUpArrowPosition' type64='Q' type='I'/>
</method>
<method selector='attachPopUpWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='autoenablesItems'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dismissPopUp'>
<retval declared_type='void' type='v'/>
</method>
<method selector='indexOfItem:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithRepresentedObject:'>
<arg name='obj' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTarget:andAction:'>
<arg name='target' declared_type='id' type='@' index='0'/>
<arg name='actionSelector' declared_type='SEL' type=':' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfSelectedItem'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='initTextCell:pullsDown:'>
<arg name='stringValue' declared_type='NSString*' type='@' index='0'/>
<arg name='pullDown' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertItemWithTitle:atIndex:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='itemArray'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='itemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='itemTitleAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='itemTitles'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='itemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='lastItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='menu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='numberOfItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='objectValue'>
<retval declared_type='id' type='@'/>
</method>
<method selector='performClickWithFrame:inView:'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preferredEdge'>
<retval declared_type='NSRectEdge' type64='Q' type='i'/>
</method>
<method selector='pullsDown'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='removeAllItems'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItem:'>
<arg name='item' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectItemWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectItemWithTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='setAltersStateOfSelectedItem:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setArrowPosition:'>
<arg name='position' declared_type='NSPopUpArrowPosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoenablesItems:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjectValue:'>
<arg name='obj' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreferredEdge:'>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPullsDown:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesItemFromMenu:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='synchronizeTitleAndSelectedItem'>
<retval declared_type='void' type='v'/>
</method>
<method selector='titleOfSelectedItem'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='usesItemFromMenu'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSPopover'>
<method selector='animates'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='appearance'>
<retval declared_type='NSPopoverAppearance' type64='q' type='i'/>
</method>
<method selector='behavior'>
<retval declared_type='NSPopoverBehavior' type64='q' type='i'/>
</method>
<method selector='close'>
<retval declared_type='void' type='v'/>
</method>
<method selector='contentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentViewController'>
<retval declared_type='NSViewController*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='isShown'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='performClose:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='positioningRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setAnimates:'>
<arg name='animates' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAppearance:'>
<arg name='appearance' declared_type='NSPopoverAppearance' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBehavior:'>
<arg name='behavior' declared_type='NSPopoverBehavior' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentSize:'>
<arg name='contentSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentViewController:'>
<arg name='contentViewController' declared_type='NSViewController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPositioningRect:'>
<arg name='positioningRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showRelativeToRect:ofView:preferredEdge:'>
<arg name='positioningRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='positioningView' declared_type='NSView*' type='@' index='1'/>
<arg name='preferredEdge' declared_type='NSRectEdge' type64='Q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPredicateEditor'>
<method selector='rowTemplates'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='setRowTemplates:'>
<arg name='rowTemplates' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPredicateEditorRowTemplate'>
<method selector='compoundTypes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='displayableSubpredicatesOfPredicate:'>
<arg name='predicate' declared_type='NSPredicate*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='initWithCompoundTypes:'>
<arg name='compoundTypes' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:'>
<arg name='leftExpressions' declared_type='NSArray*' type='@' index='0'/>
<arg name='attributeType' declared_type='NSAttributeType' type64='Q' type='I' index='1'/>
<arg name='modifier' declared_type='NSComparisonPredicateModifier' type64='Q' type='I' index='2'/>
<arg name='operators' declared_type='NSArray*' type='@' index='3'/>
<arg name='options' declared_type='NSUInteger' type64='Q' type='I' index='4'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithLeftExpressions:rightExpressions:modifier:operators:options:'>
<arg name='leftExpressions' declared_type='NSArray*' type='@' index='0'/>
<arg name='rightExpressions' declared_type='NSArray*' type='@' index='1'/>
<arg name='modifier' declared_type='NSComparisonPredicateModifier' type64='Q' type='I' index='2'/>
<arg name='operators' declared_type='NSArray*' type='@' index='3'/>
<arg name='options' declared_type='NSUInteger' type64='Q' type='I' index='4'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='leftExpressions'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='matchForPredicate:'>
<arg name='predicate' declared_type='NSPredicate*' type='@' index='0'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='modifier'>
<retval declared_type='NSComparisonPredicateModifier' type64='Q' type='I'/>
</method>
<method selector='operators'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='options'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='predicateWithSubpredicates:'>
<arg name='subpredicates' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSPredicate*' type='@'/>
</method>
<method selector='rightExpressionAttributeType'>
<retval declared_type='NSAttributeType' type64='Q' type='I'/>
</method>
<method selector='rightExpressions'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='setPredicate:'>
<arg name='predicate' declared_type='NSPredicate*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='templateViews'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='templatesWithAttributeKeyPaths:inEntityDescription:' class_method='true'>
<arg name='keyPaths' declared_type='NSArray*' type='@' index='0'/>
<arg name='entityDescription' declared_type='NSEntityDescription*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSPrintInfo'>
<method selector='PMPageFormat'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='PMPrintSession'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='PMPrintSettings'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='bottomMargin'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='defaultPrinter' class_method='true'>
<retval declared_type='NSPrinter*' type='@'/>
</method>
<method selector='dictionary'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='horizontalPagination'>
<retval declared_type='NSPrintingPaginationMode' type64='Q' type='I'/>
</method>
<method selector='imageablePageBounds'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='initWithDictionary:'>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isHorizontallyCentered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectionOnly'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isVerticallyCentered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='jobDisposition'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='leftMargin'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='localizedPaperName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='orientation'>
<retval declared_type='NSPrintingOrientation' type64='Q' type='I'/>
</method>
<method selector='paperName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='paperSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='printSettings'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='printer'>
<retval declared_type='NSPrinter*' type='@'/>
</method>
<method selector='rightMargin'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='scalingFactor'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='setBottomMargin:'>
<arg name='margin' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultPrinter:' class_method='true'>
<arg name='printer' declared_type='NSPrinter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontalPagination:'>
<arg name='mode' declared_type='NSPrintingPaginationMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontallyCentered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setJobDisposition:'>
<arg name='disposition' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLeftMargin:'>
<arg name='margin' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOrientation:'>
<arg name='orientation' declared_type='NSPrintingOrientation' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPaperName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPaperSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPrinter:'>
<arg name='printer' declared_type='NSPrinter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRightMargin:'>
<arg name='margin' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScalingFactor:'>
<arg name='scalingFactor' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionOnly:'>
<arg name='selectionOnly' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSharedPrintInfo:' class_method='true'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTopMargin:'>
<arg name='margin' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUpPrintOperationDefaultValues'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalPagination:'>
<arg name='mode' declared_type='NSPrintingPaginationMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticallyCentered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedPrintInfo' class_method='true'>
<retval declared_type='NSPrintInfo*' type='@'/>
</method>
<method selector='sizeForPaperName:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='topMargin'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='updateFromPMPageFormat'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateFromPMPrintSettings'>
<retval declared_type='void' type='v'/>
</method>
<method selector='verticalPagination'>
<retval declared_type='NSPrintingPaginationMode' type64='Q' type='I'/>
</method>
</class>
<class name='NSPrintOperation'>
<method selector='EPSOperationWithView:insideRect:toData:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='data' declared_type='NSMutableData*' type='@' index='2'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='EPSOperationWithView:insideRect:toData:printInfo:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='data' declared_type='NSMutableData*' type='@' index='2'/>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='3'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='EPSOperationWithView:insideRect:toPath:printInfo:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='path' declared_type='NSString*' type='@' index='2'/>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='3'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='PDFOperationWithView:insideRect:toData:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='data' declared_type='NSMutableData*' type='@' index='2'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='PDFOperationWithView:insideRect:toData:printInfo:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='data' declared_type='NSMutableData*' type='@' index='2'/>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='3'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='PDFOperationWithView:insideRect:toPath:printInfo:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='path' declared_type='NSString*' type='@' index='2'/>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='3'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='canSpawnSeparateThread'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cleanUpOperation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='context'>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='createContext'>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='currentOperation' class_method='true'>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='currentPage'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='deliverResult'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='destroyContext'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isCopyingOperation'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='jobStyleHint'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='jobTitle'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='pageOrder'>
<retval declared_type='NSPrintingPageOrder' type64='q' type='i'/>
</method>
<method selector='pageRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='preferredRenderingQuality'>
<retval declared_type='NSPrintRenderingQuality' type64='q' type='i'/>
</method>
<method selector='printInfo'>
<retval declared_type='NSPrintInfo*' type='@'/>
</method>
<method selector='printOperationWithView:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='printOperationWithView:printInfo:' class_method='true'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='1'/>
<retval declared_type='NSPrintOperation*' type='@'/>
</method>
<method selector='printPanel'>
<retval declared_type='NSPrintPanel*' type='@'/>
</method>
<method selector='runOperation'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='runOperationModalForWindow:delegate:didRunSelector:contextInfo:'>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='0'/>
<arg name='delegate' declared_type='id' type='@' index='1'/>
<arg name='didRunSelector' declared_type='SEL' type=':' index='2'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAccessoryView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanSpawnSeparateThread:'>
<arg name='canSpawnSeparateThread' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCurrentOperation:' class_method='true'>
<arg name='operation' declared_type='NSPrintOperation*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setJobStyleHint:'>
<arg name='hint' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setJobTitle:'>
<arg name='jobTitle' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPageOrder:'>
<arg name='pageOrder' declared_type='NSPrintingPageOrder' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPrintInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPrintPanel:'>
<arg name='panel' declared_type='NSPrintPanel*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowPanels:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsPrintPanel:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsProgressPanel:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showPanels'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsPrintPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsProgressPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='view'>
<retval declared_type='NSView*' type='@'/>
</method>
</class>
<class name='NSPrintPanel'>
<method selector='accessoryControllers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='addAccessoryController:'>
<arg name='accessoryController' declared_type='NSViewController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didEndSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='defaultButtonTitle'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='finalWritePrintInfo'>
<retval declared_type='void' type='v'/>
</method>
<method selector='helpAnchor'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='jobStyleHint'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='options'>
<retval declared_type='NSPrintPanelOptions' type64='q' type='i'/>
</method>
<method selector='printInfo'>
<retval declared_type='NSPrintInfo*' type='@'/>
</method>
<method selector='printPanel' class_method='true'>
<retval declared_type='NSPrintPanel*' type='@'/>
</method>
<method selector='removeAccessoryController:'>
<arg name='accessoryController' declared_type='NSViewController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runModal'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runModalWithPrintInfo:'>
<arg name='printInfo' declared_type='NSPrintInfo*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAccessoryView:'>
<arg name='accessoryView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultButtonTitle:'>
<arg name='defaultButtonTitle' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHelpAnchor:'>
<arg name='helpAnchor' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setJobStyleHint:'>
<arg name='hint' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOptions:'>
<arg name='options' declared_type='NSPrintPanelOptions' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateFromPrintInfo'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSPrinter'>
<method selector='acceptsBinary'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='booleanForKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='deviceDescription'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='domain'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='floatForKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='float' type='f'/>
</method>
<method selector='host'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='imageRectForPaper:'>
<arg name='paperName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='intForKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='int' type='i'/>
</method>
<method selector='isColor'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFontAvailable:'>
<arg name='faceName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isOutputStackInReverseOrder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='languageLevel'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='note'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='pageSizeForPaper:'>
<arg name='paperName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='printerNames' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='printerTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='printerWithName:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSPrinter*' type='@'/>
</method>
<method selector='printerWithName:domain:includeUnavailable:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<arg name='domain' declared_type='NSString*' type='@' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSPrinter*' type='@'/>
</method>
<method selector='printerWithType:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSPrinter*' type='@'/>
</method>
<method selector='rectForKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='sizeForKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='statusForTable:'>
<arg name='tableName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSPrinterTableStatus' type64='Q' type='I'/>
</method>
<method selector='stringForKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='stringListForKey:inTable:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<arg name='table' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='type'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSProgressIndicator'>
<method selector='animate:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='animationDelay'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='controlSize'>
<retval declared_type='NSControlSize' type64='Q' type='I'/>
</method>
<method selector='controlTint'>
<retval declared_type='NSControlTint' type64='Q' type='I'/>
</method>
<method selector='doubleValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='incrementBy:'>
<arg name='delta' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isBezeled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isDisplayedWhenStopped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isIndeterminate'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='maxValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='setAnimationDelay:'>
<arg name='delay' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezeled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlSize:'>
<arg name='size' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlTint:'>
<arg name='tint' declared_type='NSControlTint' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayedWhenStopped:'>
<arg name='isDisplayed' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleValue:'>
<arg name='doubleValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIndeterminate:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxValue:'>
<arg name='newMaximum' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinValue:'>
<arg name='newMinimum' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStyle:'>
<arg name='style' declared_type='NSProgressIndicatorStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesThreadedAnimation:'>
<arg name='threadedAnimation' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='startAnimation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopAnimation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='style'>
<retval declared_type='NSProgressIndicatorStyle' type64='Q' type='I'/>
</method>
<method selector='usesThreadedAnimation'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSResponder'>
<method selector='acceptsFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='becomeFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='beginGestureWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cancelOperation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='capitalizeWord:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='centerSelectionInVisibleArea:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeCaseOfLetter:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='complete:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cursorUpdate:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteBackward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteBackwardByDecomposingPreviousCharacter:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteForward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteToBeginningOfLine:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteToBeginningOfParagraph:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteToEndOfLine:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteToEndOfParagraph:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteToMark:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteWordBackward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deleteWordForward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doCommandBySelector:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='encodeRestorableStateWithCoder:'>
<arg name='coder' declared_type='NSCoder*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='endGestureWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='flagsChanged:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='flushBufferedKeyEvents'>
<retval declared_type='void' type='v'/>
</method>
<method selector='helpRequested:'>
<arg name='eventPtr' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='indent:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertBacktab:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertContainerBreak:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertDoubleQuoteIgnoringSubstitution:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertLineBreak:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertNewline:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertNewlineIgnoringFieldEditor:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertParagraphSeparator:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertSingleQuoteIgnoringSubstitution:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertTab:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertTabIgnoringFieldEditor:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertText:'>
<arg name='insertString' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='interfaceStyle'>
<retval declared_type='NSInterfaceStyle' type64='Q' type='I'/>
</method>
<method selector='interpretKeyEvents:'>
<arg name='eventArray' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidateRestorableState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='keyDown:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='keyUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='lowercaseWord:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='magnifyWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeBaseWritingDirectionLeftToRight:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeBaseWritingDirectionNatural:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeBaseWritingDirectionRightToLeft:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeTextWritingDirectionLeftToRight:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeTextWritingDirectionNatural:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeTextWritingDirectionRightToLeft:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='menu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='mouseDown:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseDragged:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseEntered:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseExited:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseMoved:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveBackward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveBackwardAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveDown:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveDownAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveForward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveForwardAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveLeft:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveLeftAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveParagraphBackwardAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveParagraphForwardAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveRight:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveRightAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToBeginningOfDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToBeginningOfDocumentAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToBeginningOfLine:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToBeginningOfLineAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToBeginningOfParagraph:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToBeginningOfParagraphAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToEndOfDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToEndOfDocumentAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToEndOfLine:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToEndOfLineAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToEndOfParagraph:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToEndOfParagraphAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToLeftEndOfLine:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToLeftEndOfLineAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToRightEndOfLine:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveToRightEndOfLineAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveUp:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveUpAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordBackward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordBackwardAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordForward:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordForwardAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordLeft:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordLeftAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordRight:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveWordRightAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='nextResponder'>
<retval declared_type='NSResponder*' type='@'/>
</method>
<method selector='noResponderFor:'>
<arg name='eventSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='otherMouseDown:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='otherMouseDragged:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='otherMouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pageDown:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pageDownAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pageUp:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pageUpAndModifySelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performKeyEquivalent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='performMnemonic:'>
<arg name='theString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='performTextFinderAction:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='presentError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='presentError:modalForWindow:delegate:didPresentSelector:contextInfo:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<arg name='window' declared_type='NSWindow*' type='@' index='1'/>
<arg name='delegate' declared_type='id' type='@' index='2'/>
<arg name='didPresentSelector' declared_type='SEL' type=':' index='3'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resignFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='restorableStateKeyPaths' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='restoreStateWithCoder:'>
<arg name='coder' declared_type='NSCoder*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rightMouseDown:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rightMouseDragged:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rightMouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotateWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollLineDown:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollLineUp:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollPageDown:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollPageUp:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollToBeginningOfDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollToEndOfDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollWheel:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectAll:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectLine:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectParagraph:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectToMark:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectWord:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInterfaceStyle:'>
<arg name='interfaceStyle' declared_type='NSInterfaceStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMark:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNextResponder:'>
<arg name='aResponder' declared_type='NSResponder*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldBeTreatedAsInkEvent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showContextHelp:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='supplementalTargetForAction:sender:'>
<arg name='action' declared_type='SEL' type=':' index='0'/>
<arg name='sender' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='swapWithMark:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='swipeWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tabletPoint:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tabletProximity:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchesBeganWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchesCancelledWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchesEndedWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='touchesMovedWithEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='transpose:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='transposeWords:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tryToPerform:with:'>
<arg name='anAction' declared_type='SEL' type=':' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='undoManager'>
<retval declared_type='NSUndoManager*' type='@'/>
</method>
<method selector='uppercaseWord:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='validRequestorForSendType:returnType:'>
<arg name='sendType' declared_type='NSString*' type='@' index='0'/>
<arg name='returnType' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='validateProposedFirstResponder:forEvent:'>
<arg name='responder' declared_type='NSResponder*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsForwardedScrollEventsForAxis:'>
<arg name='axis' declared_type='NSEventGestureAxis' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsScrollEventsForSwipeTrackingOnAxis:'>
<arg name='axis' declared_type='NSEventGestureAxis' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='willPresentError:'>
<arg name='error' declared_type='NSError*' type='@' index='0'/>
<retval declared_type='NSError*' type='@'/>
</method>
<method selector='yank:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSRuleEditor'>
<method selector='addRow:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='canRemoveAllRows'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='criteriaForRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='criteriaKeyPath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='displayValuesForRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='displayValuesKeyPath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='formattingDictionary'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='formattingStringsFilename'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='insertRowAtIndex:withType:asSubrowOfRow:animate:'>
<arg name='rowIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='rowType' declared_type='NSRuleEditorRowType' type64='Q' type='I' index='1'/>
<arg name='parentRow' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='shouldAnimate' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='nestingMode'>
<retval declared_type='NSRuleEditorNestingMode' type64='Q' type='I'/>
</method>
<method selector='numberOfRows'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='parentRowForRow:'>
<arg name='rowIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='predicate'>
<retval declared_type='NSPredicate*' type='@'/>
</method>
<method selector='predicateForRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSPredicate*' type='@'/>
</method>
<method selector='reloadCriteria'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadPredicate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeRowAtIndex:'>
<arg name='rowIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeRowsAtIndexes:includeSubrows:'>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='includeSubrows' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rowClass'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='rowForDisplayValue:'>
<arg name='displayValue' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='rowHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='rowTypeForRow:'>
<arg name='rowIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRuleEditorRowType' type64='Q' type='I'/>
</method>
<method selector='rowTypeKeyPath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='selectRowIndexes:byExtendingSelection:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='extend' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedRowIndexes'>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='setCanRemoveAllRows:'>
<arg name='val' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCriteria:andDisplayValues:forRowAtIndex:'>
<arg name='criteria' declared_type='NSArray*' type='@' index='0'/>
<arg name='values' declared_type='NSArray*' type='@' index='1'/>
<arg name='rowIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCriteriaKeyPath:'>
<arg name='keyPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayValuesKeyPath:'>
<arg name='keyPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='editable' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFormattingDictionary:'>
<arg name='dictionary' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFormattingStringsFilename:'>
<arg name='stringsFilename' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNestingMode:'>
<arg name='mode' declared_type='NSRuleEditorNestingMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowClass:'>
<arg name='rowClass' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowHeight:'>
<arg name='height' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowTypeKeyPath:'>
<arg name='keyPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSubrowsKeyPath:'>
<arg name='keyPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subrowIndexesForRow:'>
<arg name='rowIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='subrowsKeyPath'>
<retval declared_type='NSString*' type='@'/>
</method>
</class>
<class name='NSRulerMarker'>
<method selector='drawRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='imageOrigin'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='imageRectInRuler'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='initWithRulerView:markerLocation:image:imageOrigin:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='location' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='image' declared_type='NSImage*' type='@' index='2'/>
<arg name='imageOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isDragging'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMovable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRemovable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='markerLocation'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='representedObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='ruler'>
<retval declared_type='NSRulerView*' type='@'/>
</method>
<method selector='setImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageOrigin:'>
<arg name='imageOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMarkerLocation:'>
<arg name='location' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMovable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRemovable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRepresentedObject:'>
<arg name='representedObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='thicknessRequiredInRuler'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='trackMouse:adding:'>
<arg name='mouseDownEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='isAdding' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSRulerView'>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='addMarker:'>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='baselineLocation'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='clientView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='drawHashMarksAndLabelsInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawMarkersInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithScrollView:orientation:'>
<arg name='scrollView' declared_type='NSScrollView*' type='@' index='0'/>
<arg name='orientation' declared_type='NSRulerOrientation' type64='Q' type='I' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='invalidateHashMarks'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isFlipped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='markers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='measurementUnits'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='moveRulerlineFromLocation:toLocation:'>
<arg name='oldLocation' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='newLocation' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orientation'>
<retval declared_type='NSRulerOrientation' type64='Q' type='I'/>
</method>
<method selector='originOffset'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:' class_method='true'>
<arg name='unitName' declared_type='NSString*' type='@' index='0'/>
<arg name='abbreviation' declared_type='NSString*' type='@' index='1'/>
<arg name='conversionFactor' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='stepUpCycle' declared_type='NSArray*' type='@' index='3'/>
<arg name='stepDownCycle' declared_type='NSArray*' type='@' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeMarker:'>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='requiredThickness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='reservedThicknessForAccessoryView'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='reservedThicknessForMarkers'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='ruleThickness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='scrollView'>
<retval declared_type='NSScrollView*' type='@'/>
</method>
<method selector='setAccessoryView:'>
<arg name='accessory' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setClientView:'>
<arg name='client' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMarkers:'>
<arg name='markers' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMeasurementUnits:'>
<arg name='unitName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOrientation:'>
<arg name='orientation' declared_type='NSRulerOrientation' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOriginOffset:'>
<arg name='offset' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReservedThicknessForAccessoryView:'>
<arg name='thickness' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReservedThicknessForMarkers:'>
<arg name='thickness' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRuleThickness:'>
<arg name='thickness' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollView:'>
<arg name='scrollView' declared_type='NSScrollView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='trackMarker:withMouseEvent:'>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSRunningApplication'>
<method selector='activateWithOptions:'>
<arg name='options' declared_type='NSApplicationActivationOptions' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='activationPolicy'>
<retval declared_type='NSApplicationActivationPolicy' type64='q' type='i'/>
</method>
<method selector='bundleIdentifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='bundleURL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='currentApplication' class_method='true'>
<retval declared_type='NSRunningApplication*' type='@'/>
</method>
<method selector='executableArchitecture'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='executableURL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='forceTerminate'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hide'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='icon'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='isActive'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFinishedLaunching'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHidden'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTerminated'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='launchDate'>
<retval declared_type='NSDate*' type='@'/>
</method>
<method selector='localizedName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='ownsMenuBar'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='processIdentifier'>
<retval declared_type='pid_t' type='i'/>
</method>
<method selector='runningApplicationWithProcessIdentifier:' class_method='true'>
<arg name='pid' declared_type='pid_t' type='i' index='0'/>
<retval declared_type='NSRunningApplication*' type='@'/>
</method>
<method selector='runningApplicationsWithBundleIdentifier:' class_method='true'>
<arg name='bundleIdentifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='terminate'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='terminateAutomaticallyTerminableApplications' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unhide'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSSavePanel'>
<method selector='URL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='allowedFileTypes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='allowsOtherFileTypes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='name' declared_type='NSString*' type='@' index='1'/>
<arg name='docWindow' declared_type='NSWindow*' type='@' index='2'/>
<arg name='delegate' declared_type='id' type='@' index='3'/>
<arg name='didEndSelector' declared_type='SEL' type=':' index='4'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginSheetModalForWindow:completionHandler:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='handler' function_pointer='true' declared_type='void (^)(NSInteger)' type='@?' index='1'>
<arg declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginWithCompletionHandler:'>
<arg name='handler' function_pointer='true' declared_type='void (^)(NSInteger)' type='@?' index='0'>
<arg declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='canCreateDirectories'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canSelectHiddenExtension'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cancel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='directory'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='directoryURL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='filename'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='isExpanded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isExtensionHidden'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='message'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='nameFieldLabel'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='nameFieldStringValue'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='ok:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='prompt'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='requiredFileType'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='runModal'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='runModalForDirectory:file:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='name' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='savePanel' class_method='true'>
<retval declared_type='NSSavePanel*' type='@'/>
</method>
<method selector='selectText:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAccessoryView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowedFileTypes:'>
<arg name='types' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsOtherFileTypes:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanCreateDirectories:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanSelectHiddenExtension:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDirectory:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDirectoryURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setExtensionHidden:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMessage:'>
<arg name='message' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNameFieldLabel:'>
<arg name='label' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNameFieldStringValue:'>
<arg name='value' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPrompt:'>
<arg name='prompt' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRequiredFileType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsHiddenFiles:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTreatsFilePackagesAsDirectories:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsHiddenFiles'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='treatsFilePackagesAsDirectories'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='validateVisibleColumns'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSScreen'>
<method selector='backingAlignedRect:options:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='options' declared_type='NSAlignmentOptions' type='Q' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='backingScaleFactor'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='colorSpace'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='convertRectFromBacking:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectToBacking:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='deepestScreen' class_method='true'>
<retval declared_type='NSScreen*' type='@'/>
</method>
<method selector='depth'>
<retval declared_type='NSWindowDepth' type='i'/>
</method>
<method selector='deviceDescription'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='frame'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='mainScreen' class_method='true'>
<retval declared_type='NSScreen*' type='@'/>
</method>
<method selector='screens' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='supportedWindowDepths'>
<retval declared_type='NSWindowDepth*' const='true' type='^i'/>
</method>
<method selector='userSpaceScaleFactor'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='visibleFrame'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
</class>
<class name='NSScrollView'>
<method selector='autohidesScrollers'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='borderType'>
<retval declared_type='NSBorderType' type64='Q' type='I'/>
</method>
<method selector='contentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:' class_method='true'>
<arg name='fSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='hFlag' declared_type='BOOL' type='B' index='1'/>
<arg name='vFlag' declared_type='BOOL' type='B' index='2'/>
<arg name='aType' declared_type='NSBorderType' type64='Q' type='I' index='3'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentSizeForFrameSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:' class_method='true'>
<arg name='fSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='horizontalScrollerClass' declared_type='Class' type='#' index='1'/>
<arg name='verticalScrollerClass' declared_type='Class' type='#' index='2'/>
<arg name='aType' declared_type='NSBorderType' type64='Q' type='I' index='3'/>
<arg name='controlSize' declared_type='NSControlSize' type64='Q' type='I' index='4'/>
<arg name='scrollerStyle' declared_type='NSScrollerStyle' type64='q' type='i' index='5'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentView'>
<retval declared_type='NSClipView*' type='@'/>
</method>
<method selector='documentCursor'>
<retval declared_type='NSCursor*' type='@'/>
</method>
<method selector='documentView'>
<retval declared_type='id' type='@'/>
</method>
<method selector='documentVisibleRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='findBarPosition'>
<retval declared_type='NSScrollViewFindBarPosition' type64='q' type='i'/>
</method>
<method selector='flashScrollers'>
<retval declared_type='void' type='v'/>
</method>
<method selector='frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:' class_method='true'>
<arg name='cSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='hFlag' declared_type='BOOL' type='B' index='1'/>
<arg name='vFlag' declared_type='BOOL' type='B' index='2'/>
<arg name='aType' declared_type='NSBorderType' type64='Q' type='I' index='3'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='frameSizeForContentSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:' class_method='true'>
<arg name='cSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='horizontalScrollerClass' declared_type='Class' type='#' index='1'/>
<arg name='verticalScrollerClass' declared_type='Class' type='#' index='2'/>
<arg name='aType' declared_type='NSBorderType' type64='Q' type='I' index='3'/>
<arg name='controlSize' declared_type='NSControlSize' type64='Q' type='I' index='4'/>
<arg name='scrollerStyle' declared_type='NSScrollerStyle' type64='q' type='i' index='5'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='hasHorizontalRuler'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasHorizontalScroller'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasVerticalRuler'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasVerticalScroller'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='horizontalLineScroll'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='horizontalPageScroll'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='horizontalRulerView'>
<retval declared_type='NSRulerView*' type='@'/>
</method>
<method selector='horizontalScrollElasticity'>
<retval declared_type='NSScrollElasticity' type64='q' type='i'/>
</method>
<method selector='horizontalScroller'>
<retval declared_type='NSScroller*' type='@'/>
</method>
<method selector='lineScroll'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='pageScroll'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='reflectScrolledClipView:'>
<arg name='cView' declared_type='NSClipView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerViewClass' class_method='true'>
<retval declared_type='Class' type='#'/>
</method>
<method selector='rulersVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='scrollWheel:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollerKnobStyle'>
<retval declared_type='NSScrollerKnobStyle' type64='q' type='i'/>
</method>
<method selector='scrollerStyle'>
<retval declared_type='NSScrollerStyle' type64='q' type='i'/>
</method>
<method selector='scrollsDynamically'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAutohidesScrollers:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBorderType:'>
<arg name='aType' declared_type='NSBorderType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentView:'>
<arg name='contentView' declared_type='NSClipView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDocumentCursor:'>
<arg name='anObj' declared_type='NSCursor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDocumentView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFindBarPosition:'>
<arg name='position' declared_type='NSScrollViewFindBarPosition' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasHorizontalRuler:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasHorizontalScroller:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasVerticalRuler:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHasVerticalScroller:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontalLineScroll:'>
<arg name='value' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontalPageScroll:'>
<arg name='value' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontalRulerView:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontalScrollElasticity:'>
<arg name='elasticity' declared_type='NSScrollElasticity' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontalScroller:'>
<arg name='anObject' declared_type='NSScroller*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineScroll:'>
<arg name='value' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPageScroll:'>
<arg name='value' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRulerViewClass:' class_method='true'>
<arg name='rulerViewClass' declared_type='Class' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRulersVisible:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollerKnobStyle:'>
<arg name='newScrollerKnobStyle' declared_type='NSScrollerKnobStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollerStyle:'>
<arg name='newScrollerStyle' declared_type='NSScrollerStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollsDynamically:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesPredominantAxisScrolling:'>
<arg name='predominantAxisScrolling' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalLineScroll:'>
<arg name='value' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalPageScroll:'>
<arg name='value' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalRulerView:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalScrollElasticity:'>
<arg name='elasticity' declared_type='NSScrollElasticity' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalScroller:'>
<arg name='anObject' declared_type='NSScroller*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tile'>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesPredominantAxisScrolling'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='verticalLineScroll'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='verticalPageScroll'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='verticalRulerView'>
<retval declared_type='NSRulerView*' type='@'/>
</method>
<method selector='verticalScrollElasticity'>
<retval declared_type='NSScrollElasticity' type64='q' type='i'/>
</method>
<method selector='verticalScroller'>
<retval declared_type='NSScroller*' type='@'/>
</method>
</class>
<class name='NSScroller'>
<method selector='arrowsPosition'>
<retval declared_type='NSScrollArrowPosition' type64='Q' type='I'/>
</method>
<method selector='checkSpaceForParts'>
<retval declared_type='void' type='v'/>
</method>
<method selector='controlSize'>
<retval declared_type='NSControlSize' type64='Q' type='I'/>
</method>
<method selector='controlTint'>
<retval declared_type='NSControlTint' type64='Q' type='I'/>
</method>
<method selector='drawArrow:highlight:'>
<arg name='whichArrow' declared_type='NSScrollerArrow' type64='Q' type='I' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawKnob'>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawKnobSlotInRect:highlight:'>
<arg name='slotRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawParts'>
<retval declared_type='void' type='v'/>
</method>
<method selector='highlight:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hitPart'>
<retval declared_type='NSScrollerPart' type64='Q' type='I'/>
</method>
<method selector='isCompatibleWithOverlayScrollers' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='knobProportion'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='knobStyle'>
<retval declared_type='NSScrollerKnobStyle' type64='q' type='i'/>
</method>
<method selector='preferredScrollerStyle' class_method='true'>
<retval declared_type='NSScrollerStyle' type64='q' type='i'/>
</method>
<method selector='rectForPart:'>
<arg name='partCode' declared_type='NSScrollerPart' type64='Q' type='I' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='scrollerStyle'>
<retval declared_type='NSScrollerStyle' type64='q' type='i'/>
</method>
<method selector='scrollerWidth' class_method='true'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='scrollerWidthForControlSize:' class_method='true'>
<arg name='controlSize' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='scrollerWidthForControlSize:scrollerStyle:' class_method='true'>
<arg name='controlSize' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<arg name='scrollerStyle' declared_type='NSScrollerStyle' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='setArrowsPosition:'>
<arg name='where' declared_type='NSScrollArrowPosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlSize:'>
<arg name='controlSize' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlTint:'>
<arg name='controlTint' declared_type='NSControlTint' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatValue:knobProportion:'>
<arg name='aFloat' declared_type='float' type='f' index='0'/>
<arg name='proportion' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKnobProportion:'>
<arg name='proportion' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKnobStyle:'>
<arg name='newKnobStyle' declared_type='NSScrollerKnobStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollerStyle:'>
<arg name='newScrollerStyle' declared_type='NSScrollerStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='testPart:'>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSScrollerPart' type64='Q' type='I'/>
</method>
<method selector='trackKnob:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='trackScrollButtons:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usableParts'>
<retval declared_type='NSUsableScrollerParts' type64='Q' type='I'/>
</method>
</class>
<class name='NSSearchField'>
<method selector='recentSearches'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='recentsAutosaveName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setRecentSearches:'>
<arg name='searches' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRecentsAutosaveName:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSSearchFieldCell'>
<method selector='cancelButtonCell'>
<retval declared_type='NSButtonCell*' type='@'/>
</method>
<method selector='cancelButtonRectForBounds:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='maximumRecents'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='recentSearches'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='recentsAutosaveName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='resetCancelButtonCell'>
<retval declared_type='void' type='v'/>
</method>
<method selector='resetSearchButtonCell'>
<retval declared_type='void' type='v'/>
</method>
<method selector='searchButtonCell'>
<retval declared_type='NSButtonCell*' type='@'/>
</method>
<method selector='searchButtonRectForBounds:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='searchMenuTemplate'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='searchTextRectForBounds:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='sendsSearchStringImmediately'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sendsWholeSearchString'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setCancelButtonCell:'>
<arg name='cell' declared_type='NSButtonCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaximumRecents:'>
<arg name='maxRecents' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRecentSearches:'>
<arg name='searches' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRecentsAutosaveName:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSearchButtonCell:'>
<arg name='cell' declared_type='NSButtonCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSearchMenuTemplate:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSendsSearchStringImmediately:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSendsWholeSearchString:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSSecureTextFieldCell'>
<method selector='echosBullets'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setEchosBullets:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSSegmentedCell'>
<method selector='drawSegment:inFrame:withView:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='imageForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='imageScalingForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSImageScaling' type64='Q' type='I'/>
</method>
<method selector='interiorBackgroundStyleForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSBackgroundStyle' type64='q' type='i'/>
</method>
<method selector='isEnabledForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectedForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='labelForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='makeNextSegmentKey'>
<retval declared_type='void' type='v'/>
</method>
<method selector='makePreviousSegmentKey'>
<retval declared_type='void' type='v'/>
</method>
<method selector='menuForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='segmentCount'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='segmentStyle'>
<retval declared_type='NSSegmentStyle' type64='q' type='i'/>
</method>
<method selector='selectSegmentWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectedSegment'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setEnabled:forSegment:'>
<arg name='enabled' declared_type='BOOL' type='B' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:forSegment:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageScaling:forSegment:'>
<arg name='scaling' declared_type='NSImageScaling' type64='Q' type='I' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabel:forSegment:'>
<arg name='label' declared_type='NSString*' type='@' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:forSegment:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSegmentCount:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSegmentStyle:'>
<arg name='segmentStyle' declared_type='NSSegmentStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelected:forSegment:'>
<arg name='selected' declared_type='BOOL' type='B' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedSegment:'>
<arg name='selectedSegment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTag:forSegment:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolTip:forSegment:'>
<arg name='toolTip' declared_type='NSString*' type='@' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTrackingMode:'>
<arg name='trackingMode' declared_type='NSSegmentSwitchTracking' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidth:forSegment:'>
<arg name='width' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tagForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='toolTipForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='trackingMode'>
<retval declared_type='NSSegmentSwitchTracking' type64='Q' type='I'/>
</method>
<method selector='widthForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSSegmentedControl'>
<method selector='imageForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='imageScalingForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSImageScaling' type64='Q' type='I'/>
</method>
<method selector='isEnabledForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectedForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='labelForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='menuForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='segmentCount'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='segmentStyle'>
<retval declared_type='NSSegmentStyle' type64='q' type='i'/>
</method>
<method selector='selectSegmentWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectedSegment'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setEnabled:forSegment:'>
<arg name='enabled' declared_type='BOOL' type='B' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:forSegment:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageScaling:forSegment:'>
<arg name='scaling' declared_type='NSImageScaling' type64='Q' type='I' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabel:forSegment:'>
<arg name='label' declared_type='NSString*' type='@' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:forSegment:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSegmentCount:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSegmentStyle:'>
<arg name='segmentStyle' declared_type='NSSegmentStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelected:forSegment:'>
<arg name='selected' declared_type='BOOL' type='B' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedSegment:'>
<arg name='selectedSegment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidth:forSegment:'>
<arg name='width' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='widthForSegment:'>
<arg name='segment' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSShadow'>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='set'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadowBlurRadius:'>
<arg name='val' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadowColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadowOffset:'>
<arg name='offset' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shadowBlurRadius'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='shadowColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='shadowOffset'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
</class>
<class name='NSSlider'>
<method selector='acceptsFirstMouse:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsTickMarkValuesOnly'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='altIncrementValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='closestTickMarkValueToValue:'>
<arg name='value' declared_type='double' type='d' index='0'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='indexOfTickMarkAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='isVertical'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='knobThickness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='maxValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='numberOfTickMarks'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='rectOfTickMarkAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setAllowsTickMarkValuesOnly:'>
<arg name='yorn' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAltIncrementValue:'>
<arg name='incValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='backgroundImage' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKnobThickness:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxValue:'>
<arg name='aDouble' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinValue:'>
<arg name='aDouble' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfTickMarks:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTickMarkPosition:'>
<arg name='position' declared_type='NSTickMarkPosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleCell:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleColor:'>
<arg name='newColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tickMarkPosition'>
<retval declared_type='NSTickMarkPosition' type64='Q' type='I'/>
</method>
<method selector='tickMarkValueAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='titleColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='titleFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
</class>
<class name='NSSliderCell'>
<method selector='allowsTickMarkValuesOnly'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='altIncrementValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='closestTickMarkValueToValue:'>
<arg name='value' declared_type='double' type='d' index='0'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='drawBarInside:flipped:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='flipped' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawKnob'>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawKnob:'>
<arg name='knobRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='indexOfTickMarkAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='isVertical'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='knobRectFlipped:'>
<arg name='flipped' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='knobThickness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='maxValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='numberOfTickMarks'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='prefersTrackingUntilMouseUp' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rectOfTickMarkAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setAllowsTickMarkValuesOnly:'>
<arg name='yorn' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAltIncrementValue:'>
<arg name='incValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKnobThickness:'>
<arg name='aFloat' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxValue:'>
<arg name='aDouble' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinValue:'>
<arg name='aDouble' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfTickMarks:'>
<arg name='count' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSliderType:'>
<arg name='sliderType' declared_type='NSSliderType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTickMarkPosition:'>
<arg name='position' declared_type='NSTickMarkPosition' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleCell:'>
<arg name='aCell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleColor:'>
<arg name='newColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleFont:'>
<arg name='fontObj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sliderType'>
<retval declared_type='NSSliderType' type64='Q' type='I'/>
</method>
<method selector='tickMarkPosition'>
<retval declared_type='NSTickMarkPosition' type64='Q' type='I'/>
</method>
<method selector='tickMarkValueAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='double' type='d'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='titleCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='titleColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='titleFont'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='trackRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
</class>
<class name='NSSound'>
<method selector='canInitWithPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='channelMapping'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='currentTime'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='duration'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='initWithContentsOfFile:byReference:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='byRef' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentsOfURL:byReference:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='byRef' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithData:'>
<arg name='data' declared_type='NSData*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithPasteboard:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isPlaying'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loops'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='name'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='pause'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='play'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='playbackDeviceIdentifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='resume'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setChannelMapping:'>
<arg name='channelMapping' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCurrentTime:'>
<arg name='seconds' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='aDelegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLoops:'>
<arg name='val' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setName:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setPlaybackDeviceIdentifier:'>
<arg name='deviceUID' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVolume:'>
<arg name='volume' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='soundNamed:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='soundUnfilteredFileTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='soundUnfilteredPasteboardTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='soundUnfilteredTypes' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='stop'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='volume'>
<retval declared_type='float' type='f'/>
</method>
<method selector='writeToPasteboard:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSSpeechRecognizer'>
<method selector='blocksOtherRecognizers'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='commands'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='displayedCommandsTitle'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='listensInForegroundOnly'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setBlocksOtherRecognizers:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCommands:'>
<arg name='commands' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayedCommandsTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setListensInForegroundOnly:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startListening'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopListening'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSSpeechSynthesizer'>
<method selector='addSpeechDictionary:'>
<arg name='speechDictionary' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='attributesForVoice:' class_method='true'>
<arg name='voice' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='availableVoices' class_method='true'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='continueSpeaking'>
<retval declared_type='void' type='v'/>
</method>
<method selector='defaultVoice' class_method='true'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithVoice:'>
<arg name='voice' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isAnyApplicationSpeaking' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSpeaking'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='objectForProperty:error:'>
<arg name='property' declared_type='NSString*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='pauseSpeakingAtBoundary:'>
<arg name='boundary' declared_type='NSSpeechBoundary' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='phonemesFromText:'>
<arg name='text' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='rate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObject:forProperty:error:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<arg name='property' declared_type='NSString*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setRate:'>
<arg name='rate' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFeedbackWindow:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVoice:'>
<arg name='voice' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setVolume:'>
<arg name='volume' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startSpeakingString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='startSpeakingString:toURL:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<arg name='url' declared_type='NSURL*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='stopSpeaking'>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopSpeakingAtBoundary:'>
<arg name='boundary' declared_type='NSSpeechBoundary' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesFeedbackWindow'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='voice'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='volume'>
<retval declared_type='float' type='f'/>
</method>
</class>
<class name='NSSpellChecker'>
<method selector='accessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='automaticallyIdentifiesLanguages'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='availableLanguages'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:'>
<arg name='stringToCheck' declared_type='NSString*' type='@' index='0'/>
<arg name='startingOffset' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='language' declared_type='NSString*' type='@' index='2'/>
<arg name='wrapFlag' declared_type='BOOL' type='B' index='3'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='details' declared_type='NSArray**' type='^@' index='5'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='checkSpellingOfString:startingAt:'>
<arg name='stringToCheck' declared_type='NSString*' type='@' index='0'/>
<arg name='startingOffset' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:'>
<arg name='stringToCheck' declared_type='NSString*' type='@' index='0'/>
<arg name='startingOffset' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='language' declared_type='NSString*' type='@' index='2'/>
<arg name='wrapFlag' declared_type='BOOL' type='B' index='3'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='wordCount' declared_type='NSInteger*' type64='^q' type='^i' index='5'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:'>
<arg name='stringToCheck' declared_type='NSString*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes' type='Q' index='2'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='orthography' declared_type='NSOrthography**' type='^@' index='5'/>
<arg name='wordCount' declared_type='NSInteger*' type64='^q' type='^i' index='6'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='closeSpellDocumentWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<arg name='language' declared_type='NSString*' type='@' index='2'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='correctionForWordRange:inString:language:inSpellDocumentWithTag:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<arg name='language' declared_type='NSString*' type='@' index='2'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='countWordsInString:language:'>
<arg name='stringToCount' declared_type='NSString*' type='@' index='0'/>
<arg name='language' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='dismissCorrectionIndicatorForView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='forgetWord:'>
<arg name='word' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='guessesForWord:'>
<arg name='word' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='guessesForWordRange:inString:language:inSpellDocumentWithTag:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<arg name='language' declared_type='NSString*' type='@' index='2'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='hasLearnedWord:'>
<arg name='word' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='ignoreWord:inSpellDocumentWithTag:'>
<arg name='wordToIgnore' declared_type='NSString*' type='@' index='0'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='ignoredWordsInSpellDocumentWithTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='isAutomaticSpellingCorrectionEnabled' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isAutomaticTextReplacementEnabled' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='language'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='learnWord:'>
<arg name='word' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='menuForResult:string:options:atLocation:inView:'>
<arg name='result' declared_type='NSTextCheckingResult*' type='@' index='0'/>
<arg name='checkedString' declared_type='NSString*' type='@' index='1'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<arg name='view' declared_type='NSView*' type='@' index='4'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='recordResponse:toCorrection:forWord:language:inSpellDocumentWithTag:'>
<arg name='response' declared_type='NSCorrectionResponse' type64='q' type='i' index='0'/>
<arg name='correction' declared_type='NSString*' type='@' index='1'/>
<arg name='word' declared_type='NSString*' type='@' index='2'/>
<arg name='language' declared_type='NSString*' type='@' index='3'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:'>
<arg name='stringToCheck' declared_type='NSString*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes' type='Q' index='2'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSInteger, NSArray *, NSOrthography *, NSInteger)' type='@?' index='5'>
<arg declared_type='NSInteger' type64='q' type='i'/>
<arg declared_type='NSArray*' type='@'/>
<arg declared_type='NSOrthography*' type='@'/>
<arg declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAccessoryView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticallyIdentifiesLanguages:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIgnoredWords:inSpellDocumentWithTag:'>
<arg name='words' declared_type='NSArray*' type='@' index='0'/>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLanguage:'>
<arg name='language' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setSubstitutionsPanelAccessoryViewController:'>
<arg name='accessoryController' declared_type='NSViewController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWordFieldStringValue:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedSpellChecker' class_method='true'>
<retval declared_type='NSSpellChecker*' type='@'/>
</method>
<method selector='sharedSpellCheckerExists' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showCorrectionIndicatorOfType:primaryString:alternativeStrings:forStringInRect:view:completionHandler:'>
<arg name='type' declared_type='NSCorrectionIndicatorType' type64='q' type='i' index='0'/>
<arg name='primaryString' declared_type='NSString*' type='@' index='1'/>
<arg name='alternativeStrings' declared_type='NSArray*' type='@' index='2'/>
<arg name='rectOfTypedString' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='3'/>
<arg name='view' declared_type='NSView*' type='@' index='4'/>
<arg name='completionBlock' function_pointer='true' declared_type='void (^)(NSString *)' type='@?' index='5'>
<arg declared_type='NSString*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='spellingPanel'>
<retval declared_type='NSPanel*' type='@'/>
</method>
<method selector='substitutionsPanel'>
<retval declared_type='NSPanel*' type='@'/>
</method>
<method selector='substitutionsPanelAccessoryViewController'>
<retval declared_type='NSViewController*' type='@'/>
</method>
<method selector='uniqueSpellDocumentTag' class_method='true'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='unlearnWord:'>
<arg name='word' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updatePanels'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateSpellingPanelWithGrammarString:detail:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<arg name='detail' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateSpellingPanelWithMisspelledWord:'>
<arg name='word' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='userPreferredLanguages'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='userQuotesArrayForLanguage:'>
<arg name='language' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='userReplacementsDictionary'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
</class>
<class name='NSSplitView'>
<method selector='adjustSubviews'>
<retval declared_type='void' type='v'/>
</method>
<method selector='autosaveName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='dividerColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='dividerStyle'>
<retval declared_type='NSSplitViewDividerStyle' type64='q' type='i'/>
</method>
<method selector='dividerThickness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='drawDividerInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isPaneSplitter'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSubviewCollapsed:'>
<arg name='subview' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isVertical'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='maxPossiblePositionOfDividerAtIndex:'>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='minPossiblePositionOfDividerAtIndex:'>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='setAutosaveName:'>
<arg name='autosaveName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDividerStyle:'>
<arg name='dividerStyle' declared_type='NSSplitViewDividerStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsPaneSplitter:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPosition:ofDividerAtIndex:'>
<arg name='position' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVertical:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSStatusBar'>
<method selector='isVertical'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='removeStatusItem:'>
<arg name='item' declared_type='NSStatusItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='statusItemWithLength:'>
<arg name='length' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='NSStatusItem*' type='@'/>
</method>
<method selector='systemStatusBar' class_method='true'>
<retval declared_type='NSStatusBar*' type='@'/>
</method>
<method selector='thickness'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSStatusItem'>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='alternateImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='attributedTitle'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='doubleAction'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='drawStatusBarBackgroundInRect:withHighlight:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='highlight' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='highlightMode'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='length'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='menu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='popUpStatusItemMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sendActionOn:'>
<arg name='mask' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setAction:'>
<arg name='action' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlternateImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedTitle:'>
<arg name='title' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleAction:'>
<arg name='action' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='enabled' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHighlightMode:'>
<arg name='highlightMode' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLength:'>
<arg name='length' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='target' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolTip:'>
<arg name='toolTip' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='statusBar'>
<retval declared_type='NSStatusBar*' type='@'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='toolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='view'>
<retval declared_type='NSView*' type='@'/>
</method>
</class>
<class name='NSStepper'>
<method selector='autorepeat'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='increment'>
<retval declared_type='double' type='d'/>
</method>
<method selector='maxValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='setAutorepeat:'>
<arg name='autorepeat' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncrement:'>
<arg name='increment' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxValue:'>
<arg name='maxValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinValue:'>
<arg name='minValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValueWraps:'>
<arg name='valueWraps' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='valueWraps'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSStepperCell'>
<method selector='autorepeat'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='increment'>
<retval declared_type='double' type='d'/>
</method>
<method selector='maxValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='minValue'>
<retval declared_type='double' type='d'/>
</method>
<method selector='setAutorepeat:'>
<arg name='autorepeat' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncrement:'>
<arg name='increment' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxValue:'>
<arg name='maxValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinValue:'>
<arg name='minValue' declared_type='double' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValueWraps:'>
<arg name='valueWraps' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='valueWraps'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSString'>
<method selector='boundingRectWithSize:options:attributes:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='options' declared_type='NSStringDrawingOptions' type64='q' type='i' index='1'/>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='drawAtPoint:withAttributes:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawInRect:withAttributes:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawWithRect:options:attributes:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='options' declared_type='NSStringDrawingOptions' type64='q' type='i' index='1'/>
<arg name='attributes' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeWithAttributes:'>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
</class>
<class name='NSTabView'>
<method selector='addTabViewItem:'>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowsTruncatedLabels'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='contentRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='controlSize'>
<retval declared_type='NSControlSize' type64='Q' type='I'/>
</method>
<method selector='controlTint'>
<retval declared_type='NSControlTint' type64='Q' type='I'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='font'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='indexOfTabViewItem:'>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='indexOfTabViewItemWithIdentifier:'>
<arg name='identifier' declared_type='id' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='insertTabViewItem:atIndex:'>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='minimumSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='numberOfTabViewItems'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='removeTabViewItem:'>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectFirstTabViewItem:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectLastTabViewItem:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectNextTabViewItem:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectPreviousTabViewItem:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectTabViewItem:'>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectTabViewItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectTabViewItemWithIdentifier:'>
<arg name='identifier' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedTabViewItem'>
<retval declared_type='NSTabViewItem*' type='@'/>
</method>
<method selector='setAllowsTruncatedLabels:'>
<arg name='allowTruncatedLabels' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlSize:'>
<arg name='controlSize' declared_type='NSControlSize' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setControlTint:'>
<arg name='controlTint' declared_type='NSControlTint' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:'>
<arg name='font' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTabViewType:'>
<arg name='tabViewType' declared_type='NSTabViewType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tabViewItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSTabViewItem*' type='@'/>
</method>
<method selector='tabViewItemAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSTabViewItem*' type='@'/>
</method>
<method selector='tabViewItems'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tabViewType'>
<retval declared_type='NSTabViewType' type64='Q' type='I'/>
</method>
<method selector='takeSelectedTabViewItemFromSender:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSTabViewItem'>
<method selector='color'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='drawLabel:inRect:'>
<arg name='shouldTruncateLabel' declared_type='BOOL' type='B' index='0'/>
<arg name='labelRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='identifier'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithIdentifier:'>
<arg name='identifier' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initialFirstResponder'>
<retval declared_type='id' type='@'/>
</method>
<method selector='label'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIdentifier:'>
<arg name='identifier' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInitialFirstResponder:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabel:'>
<arg name='label' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolTip:'>
<arg name='toolTip' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeOfLabel:'>
<arg name='computeMin' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='tabState'>
<retval declared_type='NSTabState' type64='Q' type='I'/>
</method>
<method selector='tabView'>
<retval declared_type='NSTabView*' type='@'/>
</method>
<method selector='toolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='view'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSTableCellView'>
<method selector='backgroundStyle'>
<retval declared_type='NSBackgroundStyle' type64='q' type='i'/>
</method>
<method selector='draggingImageComponents'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='imageView'>
<retval declared_type='NSImageView*' type='@'/>
</method>
<method selector='objectValue'>
<retval declared_type='id' type='@'/>
</method>
<method selector='rowSizeStyle'>
<retval declared_type='NSTableViewRowSizeStyle' type64='q' type='i'/>
</method>
<method selector='setBackgroundStyle:'>
<arg name='backgroundStyle' declared_type='NSBackgroundStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImageView:'>
<arg name='imageView' declared_type='NSImageView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setObjectValue:'>
<arg name='objectValue' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowSizeStyle:'>
<arg name='rowSizeStyle' declared_type='NSTableViewRowSizeStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextField:'>
<arg name='textField' declared_type='NSTextField*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textField'>
<retval declared_type='NSTextField*' type='@'/>
</method>
</class>
<class name='NSTableColumn'>
<method selector='dataCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='dataCellForRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='headerCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='headerToolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='identifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='initWithIdentifier:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHidden'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isResizable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='maxWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='minWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='resizingMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='setDataCell:'>
<arg name='cell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHeaderCell:'>
<arg name='cell' declared_type='NSCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHeaderToolTip:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHidden:'>
<arg name='hidden' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIdentifier:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxWidth:'>
<arg name='maxWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinWidth:'>
<arg name='minWidth' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setResizable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setResizingMask:'>
<arg name='resizingMask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSortDescriptorPrototype:'>
<arg name='sortDescriptor' declared_type='NSSortDescriptor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTableView:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidth:'>
<arg name='width' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortDescriptorPrototype'>
<retval declared_type='NSSortDescriptor*' type='@'/>
</method>
<method selector='tableView'>
<retval declared_type='NSTableView*' type='@'/>
</method>
<method selector='width'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
</class>
<class name='NSTableHeaderCell'>
<method selector='drawSortIndicatorWithFrame:inView:ascending:priority:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='ascending' declared_type='BOOL' type='B' index='2'/>
<arg name='priority' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortIndicatorRectForBounds:'>
<arg name='theRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
</class>
<class name='NSTableHeaderView'>
<method selector='columnAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='draggedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='draggedDistance'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='headerRectOfColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='resizedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='setTableView:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tableView'>
<retval declared_type='NSTableView*' type='@'/>
</method>
</class>
<class name='NSTableRowView'>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='draggingDestinationFeedbackStyle'>
<retval declared_type='NSTableViewDraggingDestinationFeedbackStyle' type64='q' type='i'/>
</method>
<method selector='drawBackgroundInRect:'>
<arg name='dirtyRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawDraggingDestinationFeedbackInRect:'>
<arg name='dirtyRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawSelectionInRect:'>
<arg name='dirtyRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawSeparatorInRect:'>
<arg name='dirtyRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='indentationForDropOperation'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='interiorBackgroundStyle'>
<retval declared_type='NSBackgroundStyle' type64='q' type='i'/>
</method>
<method selector='isEmphasized'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFloating'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isGroupRowStyle'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelected'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isTargetForDropOperation'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='numberOfColumns'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='selectionHighlightStyle'>
<retval declared_type='NSTableViewSelectionHighlightStyle' type64='q' type='i'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='backgroundColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingDestinationFeedbackStyle:'>
<arg name='draggingDestinationFeedbackStyle' declared_type='NSTableViewDraggingDestinationFeedbackStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEmphasized:'>
<arg name='emphasized' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloating:'>
<arg name='floating' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGroupRowStyle:'>
<arg name='groupRowStyle' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIndentationForDropOperation:'>
<arg name='indentationForDropOperation' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelected:'>
<arg name='selected' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionHighlightStyle:'>
<arg name='selectionHighlightStyle' declared_type='NSTableViewSelectionHighlightStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTargetForDropOperation:'>
<arg name='targetForDropOperation' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewAtColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSTableView'>
<method selector='addTableColumn:'>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowsColumnReordering'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsColumnResizing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsColumnSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsEmptySelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsMultipleSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsTypeSelect'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autoresizesAllColumnsToFit'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autosaveName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='autosaveTableColumns'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='beginUpdates'>
<retval declared_type='void' type='v'/>
</method>
<method selector='canDragRowsWithIndexes:atPoint:'>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='mouseDownPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='clickedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='clickedRow'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='columnAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='columnAutoresizingStyle'>
<retval declared_type='NSTableViewColumnAutoresizingStyle' type64='Q' type='I'/>
</method>
<method selector='columnForView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='columnIndexesInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='columnWithIdentifier:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='columnsInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='cornerView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='dataSource'>
<retval declared_type='id' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='deselectAll:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deselectColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='deselectRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='doubleAction'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='dragImageForRows:event:dragImageOffset:'>
<arg name='dragRows' declared_type='NSArray*' type='@' index='0'/>
<arg name='dragEvent' declared_type='NSEvent*' type='@' index='1'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='2'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='dragImageForRowsWithIndexes:tableColumns:event:offset:'>
<arg name='dragRows' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='tableColumns' declared_type='NSArray*' type='@' index='1'/>
<arg name='dragEvent' declared_type='NSEvent*' type='@' index='2'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='3'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='draggingDestinationFeedbackStyle'>
<retval declared_type='NSTableViewDraggingDestinationFeedbackStyle' type64='q' type='i'/>
</method>
<method selector='drawBackgroundInClipRect:'>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawGridInClipRect:'>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawRow:clipRect:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawsGrid'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='editColumn:row:withEvent:select:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='2'/>
<arg name='select' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='editedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='editedRow'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='effectiveRowSizeStyle'>
<retval declared_type='NSTableViewRowSizeStyle' type64='q' type='i'/>
</method>
<method selector='endUpdates'>
<retval declared_type='void' type='v'/>
</method>
<method selector='enumerateAvailableRowViewsUsingBlock:'>
<arg name='handler' function_pointer='true' declared_type='void (^)(NSTableRowView *, NSInteger)' type='@?' index='0'>
<arg declared_type='NSTableRowView*' type='@'/>
<arg declared_type='NSInteger' type64='q' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='floatsGroupRows'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='focusedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='frameOfCellAtColumn:row:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='gridColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='gridStyleMask'>
<retval declared_type='NSTableViewGridLineStyle' type64='Q' type='I'/>
</method>
<method selector='headerView'>
<retval declared_type='NSTableHeaderView*' type='@'/>
</method>
<method selector='highlightSelectionInClipRect:'>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='highlightedTableColumn'>
<retval declared_type='NSTableColumn*' type='@'/>
</method>
<method selector='indicatorImageInTableColumn:'>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='0'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='insertRowsAtIndexes:withAnimation:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='animationOptions' declared_type='NSTableViewAnimationOptions' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='intercellSpacing'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='isColumnSelected:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRowSelected:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='makeViewWithIdentifier:owner:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<arg name='owner' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='moveColumn:toColumn:'>
<arg name='oldIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='newIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveRowAtIndex:toIndex:'>
<arg name='oldIndex' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='newIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='noteHeightOfRowsWithIndexesChanged:'>
<arg name='indexSet' declared_type='NSIndexSet*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='noteNumberOfRowsChanged'>
<retval declared_type='void' type='v'/>
</method>
<method selector='numberOfColumns'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfRows'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfSelectedColumns'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='numberOfSelectedRows'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='performClickOnCellAtColumn:row:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preparedCellAtColumn:row:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSCell*' type='@'/>
</method>
<method selector='rectOfColumn:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='rectOfRow:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='reloadData'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reloadDataForRowIndexes:columnIndexes:'>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='columnIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeRowsAtIndexes:withAnimation:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='animationOptions' declared_type='NSTableViewAnimationOptions' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTableColumn:'>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rowAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='rowForView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='rowHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='rowSizeStyle'>
<retval declared_type='NSTableViewRowSizeStyle' type64='q' type='i'/>
</method>
<method selector='rowViewAtRow:makeIfNecessary:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='makeIfNecessary' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rowsInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='scrollColumnToVisible:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollRowToVisible:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectAll:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectColumn:byExtendingSelection:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='extend' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectColumnIndexes:byExtendingSelection:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='extend' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectRow:byExtendingSelection:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='extend' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectRowIndexes:byExtendingSelection:'>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='0'/>
<arg name='extend' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='selectedColumnEnumerator'>
<retval declared_type='NSEnumerator*' type='@'/>
</method>
<method selector='selectedColumnIndexes'>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='selectedRow'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='selectedRowEnumerator'>
<retval declared_type='NSEnumerator*' type='@'/>
</method>
<method selector='selectedRowIndexes'>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method selector='selectionHighlightStyle'>
<retval declared_type='NSTableViewSelectionHighlightStyle' type64='q' type='i'/>
</method>
<method selector='setAllowsColumnReordering:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsColumnResizing:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsColumnSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsEmptySelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsMultipleSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsTypeSelect:'>
<arg name='value' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoresizesAllColumnsToFit:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutosaveName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutosaveTableColumns:'>
<arg name='save' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColumnAutoresizingStyle:'>
<arg name='style' declared_type='NSTableViewColumnAutoresizingStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCornerView:'>
<arg name='cornerView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDataSource:'>
<arg name='aSource' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDoubleAction:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingDestinationFeedbackStyle:'>
<arg name='style' declared_type='NSTableViewDraggingDestinationFeedbackStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggingSourceOperationMask:forLocal:'>
<arg name='mask' declared_type='NSDragOperation' type64='Q' type='I' index='0'/>
<arg name='isLocal' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsGrid:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDropRow:dropOperation:'>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='dropOperation' declared_type='NSTableViewDropOperation' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFloatsGroupRows:'>
<arg name='value' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFocusedColumn:'>
<arg name='focusedColumn' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGridColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGridStyleMask:'>
<arg name='gridStyle' declared_type='NSTableViewGridLineStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHeaderView:'>
<arg name='headerView' declared_type='NSTableHeaderView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHighlightedTableColumn:'>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIndicatorImage:inTableColumn:'>
<arg name='anImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIntercellSpacing:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowHeight:'>
<arg name='rowHeight' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRowSizeStyle:'>
<arg name='rowSizeStyle' declared_type='NSTableViewRowSizeStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionHighlightStyle:'>
<arg name='selectionHighlightStyle' declared_type='NSTableViewSelectionHighlightStyle' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSortDescriptors:'>
<arg name='array' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesAlternatingRowBackgroundColors:'>
<arg name='useAlternatingRowColors' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalMotionCanBeginDrag:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldFocusCell:atColumn:row:'>
<arg name='cell' declared_type='NSCell*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sizeLastColumnToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortDescriptors'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='tableColumnWithIdentifier:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSTableColumn*' type='@'/>
</method>
<method selector='tableColumns'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textDidBeginEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidEndEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textShouldBeginEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textShouldEndEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='tile'>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesAlternatingRowBackgroundColors'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='verticalMotionCanBeginDrag'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='viewAtColumn:row:makeIfNecessary:'>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='makeIfNecessary' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSText'>
<method selector='RTFDFromRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='RTFFromRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='alignCenter:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignLeft:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignRight:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='alignment'>
<retval declared_type='NSTextAlignment' type64='Q' type='I'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='baseWritingDirection'>
<retval declared_type='NSWritingDirection' type64='q' type='i'/>
</method>
<method selector='changeFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='checkSpelling:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='copy:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='copyFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='copyRuler:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cut:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='delete:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='font'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='importsGraphics'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFieldEditor'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHorizontallyResizable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRichText'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRulerVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isVerticallyResizable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='maxSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='minSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='paste:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteRuler:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='readRTFDFromFile:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='replaceCharactersInRange:withRTF:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='rtfData' declared_type='NSData*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceCharactersInRange:withRTFD:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='rtfdData' declared_type='NSData*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceCharactersInRange:withString:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='aString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollRangeToVisible:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectAll:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='setAlignment:'>
<arg name='mode' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBaseWritingDirection:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFieldEditor:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:'>
<arg name='obj' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:range:'>
<arg name='font' declared_type='NSFont*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHorizontallyResizable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImportsGraphics:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxSize:'>
<arg name='newMaxSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinSize:'>
<arg name='newMinSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRichText:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextColor:range:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFontPanel:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticallyResizable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showGuessPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sizeToFit'>
<retval declared_type='void' type='v'/>
</method>
<method selector='string'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='subscript:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='superscript:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='toggleRuler:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='underline:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unscript:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesFontPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeRTFDToFile:atomically:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSTextAttachment'>
<method selector='attachmentCell'>
<retval declared_type='id' type='@'/>
</method>
<method selector='fileWrapper'>
<retval declared_type='NSFileWrapper*' type='@'/>
</method>
<method selector='initWithFileWrapper:'>
<arg name='fileWrapper' declared_type='NSFileWrapper*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setAttachmentCell:'>
<arg name='cell' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFileWrapper:'>
<arg name='fileWrapper' declared_type='NSFileWrapper*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSTextBlock'>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='borderColorForEdge:'>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='0'/>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='boundsRectForContentRect:inRect:textContainer:characterRange:'>
<arg name='contentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='2'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='contentWidth'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='contentWidthValueType'>
<retval declared_type='NSTextBlockValueType' type64='Q' type='I'/>
</method>
<method selector='drawBackgroundWithFrame:inView:characterRange:layoutManager:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='rectForLayoutAtPoint:inRect:textContainer:characterRange:'>
<arg name='startingPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='2'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBorderColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBorderColor:forEdge:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentWidth:type:'>
<arg name='val' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='type' declared_type='NSTextBlockValueType' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValue:type:forDimension:'>
<arg name='val' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='type' declared_type='NSTextBlockValueType' type64='Q' type='I' index='1'/>
<arg name='dimension' declared_type='NSTextBlockDimension' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVerticalAlignment:'>
<arg name='alignment' declared_type='NSTextBlockVerticalAlignment' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidth:type:forLayer:'>
<arg name='val' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='type' declared_type='NSTextBlockValueType' type64='Q' type='I' index='1'/>
<arg name='layer' declared_type='NSTextBlockLayer' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidth:type:forLayer:edge:'>
<arg name='val' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='type' declared_type='NSTextBlockValueType' type64='Q' type='I' index='1'/>
<arg name='layer' declared_type='NSTextBlockLayer' type64='q' type='i' index='2'/>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='valueForDimension:'>
<arg name='dimension' declared_type='NSTextBlockDimension' type64='Q' type='I' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='valueTypeForDimension:'>
<arg name='dimension' declared_type='NSTextBlockDimension' type64='Q' type='I' index='0'/>
<retval declared_type='NSTextBlockValueType' type64='Q' type='I'/>
</method>
<method selector='verticalAlignment'>
<retval declared_type='NSTextBlockVerticalAlignment' type64='Q' type='I'/>
</method>
<method selector='widthForLayer:edge:'>
<arg name='layer' declared_type='NSTextBlockLayer' type64='q' type='i' index='0'/>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='widthValueTypeForLayer:edge:'>
<arg name='layer' declared_type='NSTextBlockLayer' type64='q' type='i' index='0'/>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='1'/>
<retval declared_type='NSTextBlockValueType' type64='Q' type='I'/>
</method>
</class>
<class name='NSTextContainer'>
<method selector='containerSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='containsPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='heightTracksTextView'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithContainerSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isSimpleRectangularTextContainer'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='layoutManager'>
<retval declared_type='NSLayoutManager*' type='@'/>
</method>
<method selector='lineFragmentPadding'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:'>
<arg name='proposedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='sweepDirection' declared_type='NSLineSweepDirection' type64='Q' type='I' index='1'/>
<arg name='movementDirection' declared_type='NSLineMovementDirection' type64='Q' type='I' index='2'/>
<arg name='remainingRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='3'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='replaceLayoutManager:'>
<arg name='newLayoutManager' declared_type='NSLayoutManager*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContainerSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHeightTracksTextView:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayoutManager:'>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineFragmentPadding:'>
<arg name='pad' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextView:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWidthTracksTextView:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textView'>
<retval declared_type='NSTextView*' type='@'/>
</method>
<method selector='widthTracksTextView'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSTextField'>
<method selector='acceptsFirstResponder'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsEditingTextAttributes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='bezelStyle'>
<retval declared_type='NSTextFieldBezelStyle' type64='Q' type='I'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='importsGraphics'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isBezeled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isBordered'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectText:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsEditingTextAttributes:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezelStyle:'>
<arg name='style' declared_type='NSTextFieldBezelStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezeled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBordered:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImportsGraphics:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithMnemonic:'>
<arg name='stringWithAmpersand' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='textDidBeginEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textDidEndEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textShouldBeginEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textShouldEndEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSTextFieldCell'>
<method selector='allowedInputSourceLocales'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='bezelStyle'>
<retval declared_type='NSTextFieldBezelStyle' type64='Q' type='I'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='placeholderAttributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='placeholderString'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setAllowedInputSourceLocales:'>
<arg name='localeIdentifiers' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBezelStyle:'>
<arg name='style' declared_type='NSTextFieldBezelStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlaceholderAttributedString:'>
<arg name='string' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPlaceholderString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUpFieldEditorAttributes:'>
<arg name='textObj' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='NSText*' type='@'/>
</method>
<method selector='setWantsNotificationForMarkedText:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
</class>
<class name='NSTextFinder'>
<method selector='cancelFindIndicator'>
<retval declared_type='void' type='v'/>
</method>
<method selector='client'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawIncrementalMatchHighlightInRect:' class_method='true'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='findBarContainer'>
<retval declared_type='id' type='@'/>
</method>
<method selector='findIndicatorNeedsUpdate'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='incrementalMatchRanges'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='incrementalSearchingShouldDimContentView'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='init'>
<retval declared_type='id' type='@'/>
</method>
<method selector='isIncrementalSearchingEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='noteClientStringWillChange'>
<retval declared_type='void' type='v'/>
</method>
<method selector='performAction:'>
<arg name='op' declared_type='NSTextFinderAction' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setClient:'>
<arg name='client' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFindBarContainer:'>
<arg name='findBarContainer' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFindIndicatorNeedsUpdate:'>
<arg name='findIndicatorNeedsUpdate' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncrementalSearchingEnabled:'>
<arg name='incrementalSearchingEnabled' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncrementalSearchingShouldDimContentView:'>
<arg name='incrementalSearchingShouldDimContentView' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='validateAction:'>
<arg name='op' declared_type='NSTextFinderAction' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSTextInputContext'>
<method selector='acceptsGlyphInfo'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='activate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowedInputSourceLocales'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='client'>
<retval declared_type='id' type='@'/>
</method>
<method selector='currentInputContext' class_method='true'>
<retval declared_type='NSTextInputContext*' type='@'/>
</method>
<method selector='deactivate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardMarkedText'>
<retval declared_type='void' type='v'/>
</method>
<method selector='handleEvent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithClient:'>
<arg name='theClient' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='invalidateCharacterCoordinates'>
<retval declared_type='void' type='v'/>
</method>
<method selector='keyboardInputSources'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='localizedNameForInputSource:' class_method='true'>
<arg name='inputSourceIdentifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='selectedKeyboardInputSource'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setAcceptsGlyphInfo:'>
<arg name='acceptsGlyphInfo' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowedInputSourceLocales:'>
<arg name='allowedInputSourceLocales' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedKeyboardInputSource:'>
<arg name='selectedKeyboardInputSource' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSTextList'>
<method selector='initWithMarkerFormat:options:'>
<arg name='format' declared_type='NSString*' type='@' index='0'/>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='listOptions'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='markerForItemNumber:'>
<arg name='itemNum' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='markerFormat'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setStartingItemNumber:'>
<arg name='itemNum' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startingItemNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</class>
<class name='NSTextStorage'>
<method selector='addLayoutManager:'>
<arg name='obj' declared_type='NSLayoutManager*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='attributeRuns'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='changeInLength'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='characters'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='edited:range:changeInLength:'>
<arg name='editedMask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='delta' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='editedMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='editedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='ensureAttributesAreFixedInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fixesAttributesLazily'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='font'>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='foregroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='invalidateAttributesInRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutManagers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='paragraphs'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='processEditing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeLayoutManager:'>
<arg name='obj' declared_type='NSLayoutManager*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributeRuns:'>
<arg name='attributeRuns' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCharacters:'>
<arg name='characters' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFont:'>
<arg name='font' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setForegroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParagraphs:'>
<arg name='paragraphs' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWords:'>
<arg name='words' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='words'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSTextTab'>
<method selector='alignment'>
<retval declared_type='NSTextAlignment' type64='Q' type='I'/>
</method>
<method selector='initWithTextAlignment:location:options:'>
<arg name='alignment' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<arg name='loc' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithType:location:'>
<arg name='type' declared_type='NSTextTabType' type64='Q' type='I' index='0'/>
<arg name='loc' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='location'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='options'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='tabStopType'>
<retval declared_type='NSTextTabType' type64='Q' type='I'/>
</method>
</class>
<class name='NSTextTable'>
<method selector='boundsRectForBlock:contentRect:inRect:textContainer:characterRange:'>
<arg name='block' declared_type='NSTextTableBlock*' type='@' index='0'/>
<arg name='contentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='3'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='4'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='collapsesBorders'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:'>
<arg name='block' declared_type='NSTextTableBlock*' type='@' index='0'/>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hidesEmptyCells'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='layoutAlgorithm'>
<retval declared_type='NSTextTableLayoutAlgorithm' type64='Q' type='I'/>
</method>
<method selector='numberOfColumns'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:'>
<arg name='block' declared_type='NSTextTableBlock*' type='@' index='0'/>
<arg name='startingPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='3'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='4'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='setCollapsesBorders:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHidesEmptyCells:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayoutAlgorithm:'>
<arg name='algorithm' declared_type='NSTextTableLayoutAlgorithm' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfColumns:'>
<arg name='numCols' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSTextTableBlock'>
<method selector='columnSpan'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='initWithTable:startingRow:rowSpan:startingColumn:columnSpan:'>
<arg name='table' declared_type='NSTextTable*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='rowSpan' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='col' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='colSpan' declared_type='NSInteger' type64='q' type='i' index='4'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='rowSpan'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='startingColumn'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='startingRow'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='table'>
<retval declared_type='NSTextTable*' type='@'/>
</method>
</class>
<class name='NSTextView'>
<method selector='acceptableDragTypes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='acceptsGlyphInfo'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='alignJustified:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowedInputSourceLocales'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='allowsDocumentBackgroundColorChange'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsImageEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsUndo'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='breakUndoCoalescing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeAttributes:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeColor:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeDocumentBackgroundColor:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='changeLayoutOrientation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='characterIndexForInsertionAtPoint:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='checkTextInDocument:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='checkTextInRange:types:options:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes' type='Q' index='1'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='checkTextInSelection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='cleanUpAfterDragOperation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='clickedOnLink:atIndex:'>
<arg name='link' declared_type='id' type='@' index='0'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='complete:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='completionsForPartialWordRange:indexOfSelectedItem:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='index' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='defaultParagraphStyle'>
<retval declared_type='NSParagraphStyle*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='didChangeText'>
<retval declared_type='void' type='v'/>
</method>
<method selector='displaysLinkToolTips'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dragImageForSelectionWithEvent:origin:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='origin' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='1'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='dragOperationForDraggingInfo:type:'>
<arg name='dragInfo' declared_type='id' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method selector='dragSelectionWithEvent:offset:slideBack:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='mouseOffset' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<arg name='slideBack' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawInsertionPointInRect:color:turnedOn:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='color' declared_type='NSColor*' type='@' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawViewBackgroundInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='enabledTextCheckingTypes'>
<retval declared_type='NSTextCheckingTypes' type='Q'/>
</method>
<method selector='handleTextCheckingResults:forRange:types:options:orthography:wordCount:'>
<arg name='results' declared_type='NSArray*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes' type='Q' index='2'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='orthography' declared_type='NSOrthography*' type='@' index='4'/>
<arg name='wordCount' declared_type='NSInteger' type64='q' type='i' index='5'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='importsGraphics'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithFrame:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFrame:textContainer:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='container' declared_type='NSTextContainer*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertCompletion:forPartialWordRange:movement:isFinal:'>
<arg name='word' declared_type='NSString*' type='@' index='0'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='movement' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertText:'>
<arg name='insertString' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertionPointColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='invalidateTextContainerOrigin'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isAutomaticDashSubstitutionEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isAutomaticDataDetectionEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isAutomaticLinkDetectionEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isAutomaticQuoteSubstitutionEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isAutomaticSpellingCorrectionEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isAutomaticTextReplacementEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isCoalescingUndo'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isContinuousSpellCheckingEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFieldEditor'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isGrammarCheckingEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isIncrementalSearchingEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRichText'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRulerVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelectable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='layoutManager'>
<retval declared_type='NSLayoutManager*' type='@'/>
</method>
<method selector='linkTextAttributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='loosenKerning:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='lowerBaseline:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='markedTextAttributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='orderFrontLinkPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontListPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontSpacingPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontSubstitutionsPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontTablePanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outline:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteAsPlainText:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pasteAsRichText:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performFindPanelAction:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preferredPasteboardTypeFromArray:restrictedToTypesFromArray:'>
<arg name='availableTypes' declared_type='NSArray*' type='@' index='0'/>
<arg name='allowedTypes' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='quickLookPreviewableItemsInRanges:'>
<arg name='ranges' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='raiseBaseline:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rangeForUserCharacterAttributeChange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rangeForUserCompletion'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rangeForUserParagraphAttributeChange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rangeForUserTextChange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='rangesForUserCharacterAttributeChange'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='rangesForUserParagraphAttributeChange'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='rangesForUserTextChange'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='readSelectionFromPasteboard:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readSelectionFromPasteboard:type:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='readablePasteboardTypes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='registerForServices' class_method='true'>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceTextContainer:'>
<arg name='newContainer' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:didAddMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:didMoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:didRemoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:handleMouseDown:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:shouldAddMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rulerView:shouldMoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rulerView:shouldRemoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rulerView:willAddMarker:atLocation:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<arg name='location' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='rulerView:willMoveMarker:toLocation:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<arg name='location' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='selectedRanges'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectedTextAttributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='selectionAffinity'>
<retval declared_type='NSSelectionAffinity' type64='Q' type='I'/>
</method>
<method selector='selectionGranularity'>
<retval declared_type='NSSelectionGranularity' type64='Q' type='I'/>
</method>
<method selector='selectionRangeForProposedRange:granularity:'>
<arg name='proposedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='granularity' declared_type='NSSelectionGranularity' type64='Q' type='I' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='setAcceptsGlyphInfo:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlignment:range:'>
<arg name='alignment' declared_type='NSTextAlignment' type64='Q' type='I' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowedInputSourceLocales:'>
<arg name='localeIdentifiers' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsDocumentBackgroundColorChange:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsImageEditing:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsUndo:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticDashSubstitutionEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticDataDetectionEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticLinkDetectionEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticQuoteSubstitutionEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticSpellingCorrectionEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutomaticTextReplacementEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBaseWritingDirection:range:'>
<arg name='writingDirection' declared_type='NSWritingDirection' type64='q' type='i' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setConstrainedFrameSize:'>
<arg name='desiredSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContinuousSpellCheckingEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultParagraphStyle:'>
<arg name='paragraphStyle' declared_type='NSParagraphStyle*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplaysLinkToolTips:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEditable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabledTextCheckingTypes:'>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes' type='Q' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFieldEditor:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGrammarCheckingEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImportsGraphics:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIncrementalSearchingEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInsertionPointColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayoutOrientation:'>
<arg name='theOrientation' declared_type='NSTextLayoutOrientation' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLinkTextAttributes:'>
<arg name='attributeDictionary' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMarkedTextAttributes:'>
<arg name='attributeDictionary' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplayInRect:avoidAdditionalLayout:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRichText:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRulerVisible:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedRange:affinity:stillSelecting:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='affinity' declared_type='NSSelectionAffinity' type64='Q' type='I' index='1'/>
<arg name='stillSelectingFlag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedRanges:'>
<arg name='ranges' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedRanges:affinity:stillSelecting:'>
<arg name='ranges' declared_type='NSArray*' type='@' index='0'/>
<arg name='affinity' declared_type='NSSelectionAffinity' type64='Q' type='I' index='1'/>
<arg name='stillSelectingFlag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedTextAttributes:'>
<arg name='attributeDictionary' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionGranularity:'>
<arg name='granularity' declared_type='NSSelectionGranularity' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSmartInsertDeleteEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSpellingState:range:'>
<arg name='value' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextContainer:'>
<arg name='container' declared_type='NSTextContainer*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTextContainerInset:'>
<arg name='inset' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTypingAttributes:'>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFindBar:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFindPanel:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFontPanel:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesInspectorBar:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesRuler:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldChangeTextInRange:replacementString:'>
<arg name='affectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='replacementString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldChangeTextInRanges:replacementStrings:'>
<arg name='affectedRanges' declared_type='NSArray*' type='@' index='0'/>
<arg name='replacementStrings' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldDrawInsertionPoint'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showFindIndicatorForRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='smartDeleteRangeForProposedRange:'>
<arg name='proposedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='smartInsertAfterStringForString:replacingRange:'>
<arg name='pasteString' declared_type='NSString*' type='@' index='0'/>
<arg name='charRangeToReplace' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='smartInsertBeforeStringForString:replacingRange:'>
<arg name='pasteString' declared_type='NSString*' type='@' index='0'/>
<arg name='charRangeToReplace' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='smartInsertDeleteEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='smartInsertForString:replacingRange:beforeString:afterString:'>
<arg name='pasteString' declared_type='NSString*' type='@' index='0'/>
<arg name='charRangeToReplace' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='beforeString' declared_type='NSString**' type='^@' index='2'/>
<arg name='afterString' declared_type='NSString**' type='^@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='spellCheckerDocumentTag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='startSpeaking:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopSpeaking:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textContainer'>
<retval declared_type='NSTextContainer*' type='@'/>
</method>
<method selector='textContainerInset'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='textContainerOrigin'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='textStorage'>
<retval declared_type='NSTextStorage*' type='@'/>
</method>
<method selector='tightenKerning:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleAutomaticDashSubstitution:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleAutomaticDataDetection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleAutomaticLinkDetection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleAutomaticQuoteSubstitution:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleAutomaticSpellingCorrection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleAutomaticTextReplacement:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleBaseWritingDirection:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleContinuousSpellChecking:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleGrammarChecking:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleQuickLookPreviewPanel:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleSmartInsertDelete:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleTraditionalCharacterShape:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='turnOffKerning:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='turnOffLigatures:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='typingAttributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='updateDragTypeRegistration'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateFontPanel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateInsertionPointStateAndRestartTimer:'>
<arg name='restartFlag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateQuickLookPreviewPanel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateRuler'>
<retval declared_type='void' type='v'/>
</method>
<method selector='useAllLigatures:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='useStandardKerning:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='useStandardLigatures:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='usesFindBar'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='usesFindPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='usesFontPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='usesInspectorBar'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='usesRuler'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='validRequestorForSendType:returnType:'>
<arg name='sendType' declared_type='NSString*' type='@' index='0'/>
<arg name='returnType' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='writablePasteboardTypes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='writeSelectionToPasteboard:type:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='writeSelectionToPasteboard:types:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='types' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='NSTokenField'>
<method selector='completionDelay'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='defaultCompletionDelay' class_method='true'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='defaultTokenizingCharacterSet' class_method='true'>
<retval declared_type='NSCharacterSet*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setCompletionDelay:'>
<arg name='delay' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTokenStyle:'>
<arg name='style' declared_type='NSTokenStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTokenizingCharacterSet:'>
<arg name='characterSet' declared_type='NSCharacterSet*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tokenStyle'>
<retval declared_type='NSTokenStyle' type64='Q' type='I'/>
</method>
<method selector='tokenizingCharacterSet'>
<retval declared_type='NSCharacterSet*' type='@'/>
</method>
</class>
<class name='NSTokenFieldCell'>
<method selector='completionDelay'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='defaultCompletionDelay' class_method='true'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='defaultTokenizingCharacterSet' class_method='true'>
<retval declared_type='NSCharacterSet*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setCompletionDelay:'>
<arg name='delay' declared_type='NSTimeInterval' type='d' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTokenStyle:'>
<arg name='style' declared_type='NSTokenStyle' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTokenizingCharacterSet:'>
<arg name='characterSet' declared_type='NSCharacterSet*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tokenStyle'>
<retval declared_type='NSTokenStyle' type64='Q' type='I'/>
</method>
<method selector='tokenizingCharacterSet'>
<retval declared_type='NSCharacterSet*' type='@'/>
</method>
</class>
<class name='NSToolbar'>
<method selector='allowsUserCustomization'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autosavesConfiguration'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='configurationDictionary'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='customizationPaletteIsRunning'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='displayMode'>
<retval declared_type='NSToolbarDisplayMode' type64='Q' type='I'/>
</method>
<method selector='fullScreenAccessoryView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='fullScreenAccessoryViewMaxHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='fullScreenAccessoryViewMinHeight'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='identifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='initWithIdentifier:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='insertItemWithItemIdentifier:atIndex:'>
<arg name='itemIdentifier' declared_type='NSString*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='items'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='removeItemAtIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='runCustomizationPalette:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedItemIdentifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setAllowsUserCustomization:'>
<arg name='allowCustomization' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutosavesConfiguration:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setConfigurationFromDictionary:'>
<arg name='configDict' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayMode:'>
<arg name='displayMode' declared_type='NSToolbarDisplayMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFullScreenAccessoryView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFullScreenAccessoryViewMaxHeight:'>
<arg name='maxHeight' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFullScreenAccessoryViewMinHeight:'>
<arg name='minHeight' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedItemIdentifier:'>
<arg name='itemIdentifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsBaselineSeparator:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSizeMode:'>
<arg name='sizeMode' declared_type='NSToolbarSizeMode' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisible:'>
<arg name='shown' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsBaselineSeparator'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sizeMode'>
<retval declared_type='NSToolbarSizeMode' type64='Q' type='I'/>
</method>
<method selector='validateVisibleItems'>
<retval declared_type='void' type='v'/>
</method>
<method selector='visibleItems'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSToolbarItem'>
<method selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method selector='allowsDuplicatesInToolbar'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autovalidates'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='image'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='initWithItemIdentifier:'>
<arg name='itemIdentifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='itemIdentifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='label'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='maxSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='menuFormRepresentation'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='minSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='paletteLabel'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='setAction:'>
<arg name='action' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutovalidates:'>
<arg name='resistance' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg name='enabled' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLabel:'>
<arg name='label' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMenuFormRepresentation:'>
<arg name='menuItem' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPaletteLabel:'>
<arg name='paletteLabel' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTag:'>
<arg name='tag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTarget:'>
<arg name='target' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolTip:'>
<arg name='toolTip' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisibilityPriority:'>
<arg name='visibilityPriority' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='target'>
<retval declared_type='id' type='@'/>
</method>
<method selector='toolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='toolbar'>
<retval declared_type='NSToolbar*' type='@'/>
</method>
<method selector='validate'>
<retval declared_type='void' type='v'/>
</method>
<method selector='view'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='visibilityPriority'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</class>
<class name='NSToolbarItemGroup'>
<method selector='setSubitems:'>
<arg name='subitems' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subitems'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSTouch'>
<method selector='device'>
<retval declared_type='id' type='@'/>
</method>
<method selector='deviceSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='identity'>
<retval declared_type='id' type='@'/>
</method>
<method selector='isResting'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='normalizedPosition'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='phase'>
<retval declared_type='NSTouchPhase' type64='Q' type='I'/>
</method>
</class>
<class name='NSTrackingArea'>
<method selector='initWithRect:options:owner:userInfo:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='options' declared_type='NSTrackingAreaOptions' type64='Q' type='I' index='1'/>
<arg name='owner' declared_type='id' type='@' index='2'/>
<arg name='userInfo' declared_type='NSDictionary*' type='@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='options'>
<retval declared_type='NSTrackingAreaOptions' type64='Q' type='I'/>
</method>
<method selector='owner'>
<retval declared_type='id' type='@'/>
</method>
<method selector='rect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='userInfo'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
</class>
<class name='NSTreeController'>
<method selector='add:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addChild:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSelectionIndexPaths:'>
<arg name='indexPaths' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='alwaysUsesMultipleValuesMarker'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='arrangedObjects'>
<retval declared_type='id' type='@'/>
</method>
<method selector='avoidsEmptySelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canAddChild'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canInsert'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canInsertChild'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='childrenKeyPath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='childrenKeyPathForNode:'>
<arg name='node' declared_type='NSTreeNode*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='content'>
<retval declared_type='id' type='@'/>
</method>
<method selector='countKeyPath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='countKeyPathForNode:'>
<arg name='node' declared_type='NSTreeNode*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='insert:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertChild:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertObject:atArrangedObjectIndexPath:'>
<arg name='object' declared_type='id' type='@' index='0'/>
<arg name='indexPath' declared_type='NSIndexPath*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertObjects:atArrangedObjectIndexPaths:'>
<arg name='objects' declared_type='NSArray*' type='@' index='0'/>
<arg name='indexPaths' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='leafKeyPath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='leafKeyPathForNode:'>
<arg name='node' declared_type='NSTreeNode*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='moveNode:toIndexPath:'>
<arg name='node' declared_type='NSTreeNode*' type='@' index='0'/>
<arg name='indexPath' declared_type='NSIndexPath*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='moveNodes:toIndexPath:'>
<arg name='nodes' declared_type='NSArray*' type='@' index='0'/>
<arg name='startingIndexPath' declared_type='NSIndexPath*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preservesSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rearrangeObjects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='remove:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObjectAtArrangedObjectIndexPath:'>
<arg name='indexPath' declared_type='NSIndexPath*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeObjectsAtArrangedObjectIndexPaths:'>
<arg name='indexPaths' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeSelectionIndexPaths:'>
<arg name='indexPaths' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='selectedNodes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectedObjects'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectionIndexPath'>
<retval declared_type='NSIndexPath*' type='@'/>
</method>
<method selector='selectionIndexPaths'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectsInsertedObjects'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAlwaysUsesMultipleValuesMarker:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAvoidsEmptySelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setChildrenKeyPath:'>
<arg name='keyPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContent:'>
<arg name='content' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCountKeyPath:'>
<arg name='keyPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLeafKeyPath:'>
<arg name='keyPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreservesSelection:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectionIndexPath:'>
<arg name='indexPath' declared_type='NSIndexPath*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setSelectionIndexPaths:'>
<arg name='indexPaths' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setSelectsInsertedObjects:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSortDescriptors:'>
<arg name='sortDescriptors' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortDescriptors'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSTreeNode'>
<method selector='childNodes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='descendantNodeAtIndexPath:'>
<arg name='indexPath' declared_type='NSIndexPath*' type='@' index='0'/>
<retval declared_type='NSTreeNode*' type='@'/>
</method>
<method selector='indexPath'>
<retval declared_type='NSIndexPath*' type='@'/>
</method>
<method selector='initWithRepresentedObject:'>
<arg name='modelObject' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isLeaf'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mutableChildNodes'>
<retval declared_type='NSMutableArray*' type='@'/>
</method>
<method selector='parentNode'>
<retval declared_type='NSTreeNode*' type='@'/>
</method>
<method selector='representedObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='sortWithSortDescriptors:recursively:'>
<arg name='sortDescriptors' declared_type='NSArray*' type='@' index='0'/>
<arg name='recursively' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='treeNodeWithRepresentedObject:' class_method='true'>
<arg name='modelObject' declared_type='id' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSTypesetter'>
<method selector='actionForControlCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSTypesetterControlCharacterAction' type64='Q' type='I'/>
</method>
<method selector='attributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='attributesForExtraLineFragment'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='baselineOffsetInLayoutManager:glyphIndex:'>
<arg name='layoutMgr' declared_type='NSLayoutManager*' type='@' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='beginLineWithGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginParagraph'>
<retval declared_type='void' type='v'/>
</method>
<method selector='bidiProcessingEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='1'/>
<arg name='proposedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='glyphPosition' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='4'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='characterRangeForGlyphRange:actualGlyphRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualGlyphRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='currentParagraphStyle'>
<retval declared_type='NSParagraphStyle*' type='@'/>
</method>
<method selector='currentTextContainer'>
<retval declared_type='NSTextContainer*' type='@'/>
</method>
<method selector='defaultTypesetterBehavior' class_method='true'>
<retval declared_type='NSTypesetterBehavior' type64='q' type='i'/>
</method>
<method selector='deleteGlyphsInRange:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='endLineWithGlyphRange:'>
<arg name='lineGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='endParagraph'>
<retval declared_type='void' type='v'/>
</method>
<method selector='getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:'>
<arg name='glyphsRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='glyphBuffer' declared_type='NSGlyph*' type='^I' index='1'/>
<arg name='charIndexBuffer' declared_type='NSUInteger*' type64='^Q' type='^I' index='2'/>
<arg name='inscribeBuffer' declared_type='NSGlyphInscription*' type64='^Q' type='^I' index='3'/>
<arg name='elasticBuffer' declared_type='BOOL*' type='^B' index='4'/>
<arg name='bidiLevelBuffer' declared_type='unsigned char*' type='*' index='5'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:'>
<arg name='lineFragmentRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='lineFragmentUsedRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='paragraphSeparatorGlyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='lineOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:'>
<arg name='lineFragmentRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='lineFragmentUsedRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='remainingRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='startingGlyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<arg name='proposedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='4'/>
<arg name='lineSpacing' declared_type='CGFloat' type64='d' type='f' index='5'/>
<arg name='paragraphSpacingBefore' declared_type='CGFloat' type64='d' type='f' index='6'/>
<arg name='paragraphSpacingAfter' declared_type='CGFloat' type64='d' type='f' index='7'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='glyphRangeForCharacterRange:actualCharacterRange:'>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='hyphenCharacterForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='UTF32Char' type64='I' type='L'/>
</method>
<method selector='hyphenationFactor'>
<retval declared_type='float' type='f'/>
</method>
<method selector='hyphenationFactorForGlyphAtIndex:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='float' type='f'/>
</method>
<method selector='insertGlyph:atGlyphIndex:characterIndex:'>
<arg name='glyph' declared_type='NSGlyph' type='I' index='0'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:'>
<arg name='characterRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='1'/>
<arg name='maxNumLines' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:'>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='0'/>
<arg name='startGlyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='maxNumLines' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='nextGlyph' declared_type='NSUInteger*' type64='^Q' type='^I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutManager'>
<retval declared_type='NSLayoutManager*' type='@'/>
</method>
<method selector='layoutParagraphAtPoint:'>
<arg name='lineFragmentOrigin' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='lineFragmentPadding'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='paragraphCharacterRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='paragraphGlyphRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='paragraphSeparatorCharacterRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='paragraphSeparatorGlyphRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method selector='paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:'>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:' class_method='true'>
<arg name='layoutMgr' declared_type='NSLayoutManager*' type='@' index='0'/>
<arg name='nominallySpacedGlyphsRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='packedGlyphs' declared_type='unsigned char*' const='true' type='*' index='2'/>
<arg name='packedGlyphsCount' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='setAttachmentSize:forGlyphRange:'>
<arg name='attachmentSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAttributedString:'>
<arg name='attrString' declared_type='NSAttributedString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBidiLevels:forGlyphRange:'>
<arg name='levels' declared_type='uint8_t*' const='true' type='*' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBidiProcessingEnabled:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsOutsideLineFragment:forGlyphRange:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHardInvalidation:forGlyphRange:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHyphenationFactor:'>
<arg name='factor' declared_type='float' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineFragmentPadding:'>
<arg name='padding' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:'>
<arg name='fragmentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='usedRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='baselineOffset' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLocation:withAdvancements:forStartOfGlyphRange:'>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='advancements' declared_type='CGFloat*' type64='^d' const='true' type='^f' index='1'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNotShownAttribute:forGlyphRange:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParagraphGlyphRange:separatorGlyphRange:'>
<arg name='paragraphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='paragraphSeparatorRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTypesetterBehavior:'>
<arg name='behavior' declared_type='NSTypesetterBehavior' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUsesFontLeading:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedSystemTypesetter' class_method='true'>
<retval declared_type='id' type='@'/>
</method>
<method selector='sharedSystemTypesetterForBehavior:' class_method='true'>
<arg name='theBehavior' declared_type='NSTypesetterBehavior' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='shouldBreakLineByHyphenatingBeforeCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldBreakLineByWordBeforeCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='substituteFontForFont:'>
<arg name='originalFont' declared_type='NSFont*' type='@' index='0'/>
<retval declared_type='NSFont*' type='@'/>
</method>
<method selector='substituteGlyphsInRange:withGlyphs:'>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='glyphs' declared_type='NSGlyph*' type='^I' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='textContainers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textTabForGlyphLocation:writingDirection:maxLocation:'>
<arg name='glyphLocation' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='direction' declared_type='NSWritingDirection' type64='q' type='i' index='1'/>
<arg name='maxLocation' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='NSTextTab*' type='@'/>
</method>
<method selector='typesetterBehavior'>
<retval declared_type='NSTypesetterBehavior' type64='q' type='i'/>
</method>
<method selector='usesFontLeading'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:'>
<arg name='lineRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='glyphRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='usedRect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='baselineOffset' declared_type='CGFloat*' type64='^d' type='^f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSURL'>
<method selector='URLFromPasteboard:' class_method='true'>
<arg name='pasteBoard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='writeToPasteboard:'>
<arg name='pasteBoard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSUserDefaultsController'>
<method selector='appliesImmediately'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='defaults'>
<retval declared_type='NSUserDefaults*' type='@'/>
</method>
<method selector='hasUnappliedChanges'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithDefaults:initialValues:'>
<arg name='defaults' declared_type='NSUserDefaults*' type='@' index='0'/>
<arg name='initialValues' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initialValues'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='revert:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='revertToInitialValues:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='save:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAppliesImmediately:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInitialValues:'>
<arg name='initialValues' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharedUserDefaultsController' class_method='true'>
<retval declared_type='id' type='@'/>
</method>
<method selector='values'>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='NSView'>
<method selector='acceptsFirstMouse:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='acceptsTouchEvents'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='addConstraint:'>
<arg name='constraint' declared_type='NSLayoutConstraint*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addConstraints:'>
<arg name='constraints' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addCursorRect:cursor:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='anObj' declared_type='NSCursor*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSubview:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addSubview:positioned:relativeTo:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<arg name='place' declared_type='NSWindowOrderingMode' type64='q' type='i' index='1'/>
<arg name='otherView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addToolTipRect:owner:userData:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<arg name='data' declared_type='void*' type='^v' index='2'/>
<retval declared_type='NSToolTipTag' type64='q' type='i'/>
</method>
<method selector='addTrackingArea:'>
<arg name='trackingArea' declared_type='NSTrackingArea*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addTrackingRect:owner:userData:assumeInside:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<arg name='data' declared_type='void*' type='^v' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSTrackingRectTag' type64='q' type='i'/>
</method>
<method selector='adjustPageHeightNew:top:bottom:limit:'>
<arg name='newBottom' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<arg name='oldTop' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='oldBottom' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='bottomLimit' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='adjustPageWidthNew:left:right:limit:'>
<arg name='newRight' declared_type='CGFloat*' type64='^d' type='^f' index='0'/>
<arg name='oldLeft' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='oldRight' declared_type='CGFloat' type64='d' type='f' index='2'/>
<arg name='rightLimit' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='adjustScroll:'>
<arg name='newVisible' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='alignmentRectForFrame:'>
<arg name='frame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='alignmentRectInsets'>
<retval declared_type='NSEdgeInsets' type64='{_NSEdgeInsets=dddd}' type='{_NSEdgeInsets=ffff}'/>
</method>
<method selector='allocateGState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='alphaValue'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='ancestorSharedWithView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='autoresizesSubviews'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autoresizingMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='autoscroll:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundFilters'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='backingAlignedRect:options:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='options' declared_type='NSAlignmentOptions' type='Q' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='baselineOffsetFromBottom'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='beginDocument'>
<retval declared_type='void' type='v'/>
</method>
<method selector='beginDraggingSessionWithItems:event:source:'>
<arg name='items' declared_type='NSArray*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='source' declared_type='id' type='@' index='2'/>
<retval declared_type='NSDraggingSession*' type='@'/>
</method>
<method selector='beginPageInRect:atPlacement:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='location' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='bitmapImageRepForCachingDisplayInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSBitmapImageRep*' type='@'/>
</method>
<method selector='bounds'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='boundsRotation'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='cacheDisplayInRect:toBitmapImageRep:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='bitmapImageRep' declared_type='NSBitmapImageRep*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='canBecomeKeyView'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canDraw'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canDrawConcurrently'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='centerScanRect:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='compositingFilter'>
<retval declared_type='CIFilter*' type='@'/>
</method>
<method selector='constraints'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='constraintsAffectingLayoutForOrientation:'>
<arg name='orientation' declared_type='NSLayoutConstraintOrientation' type64='q' type='i' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='contentCompressionResistancePriorityForOrientation:'>
<arg name='orientation' declared_type='NSLayoutConstraintOrientation' type64='q' type='i' index='0'/>
<retval declared_type='NSLayoutPriority' type='f'/>
</method>
<method selector='contentFilters'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='contentHuggingPriorityForOrientation:'>
<arg name='orientation' declared_type='NSLayoutConstraintOrientation' type64='q' type='i' index='0'/>
<retval declared_type='NSLayoutPriority' type='f'/>
</method>
<method selector='convertPoint:fromView:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='aView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertPoint:toView:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='aView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertPointFromBacking:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertPointFromBase:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertPointFromLayer:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertPointToBacking:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertPointToBase:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertPointToLayer:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertRect:fromView:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRect:toView:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectFromBacking:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectFromBase:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectFromLayer:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectToBacking:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectToBase:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectToLayer:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertSize:fromView:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='aView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='convertSize:toView:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<arg name='aView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='convertSizeFromBacking:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='convertSizeFromBase:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='convertSizeFromLayer:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='convertSizeToBacking:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='convertSizeToBase:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='convertSizeToLayer:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='dataWithEPSInsideRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='dataWithPDFInsideRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='defaultFocusRingType' class_method='true'>
<retval declared_type='NSFocusRingType' type64='Q' type='I'/>
</method>
<method selector='defaultMenu' class_method='true'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='didAddSubview:'>
<arg name='subview' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardCursorRects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='display'>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayIfNeededIgnoringOpacity'>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayIfNeededInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayIfNeededInRectIgnoringOpacity:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayRectIgnoringOpacity:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayRectIgnoringOpacity:inContext:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dragFile:fromRect:slideBack:event:'>
<arg name='filename' declared_type='NSString*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='aFlag' declared_type='BOOL' type='B' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dragImage:at:offset:event:pasteboard:source:slideBack:'>
<arg name='anImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='viewLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='initialOffset' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='4'/>
<arg name='sourceObj' declared_type='id' type='@' index='5'/>
<arg name='slideFlag' declared_type='BOOL' type='B' index='6'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='dragPromisedFilesOfTypes:fromRect:source:slideBack:event:'>
<arg name='typeArray' declared_type='NSArray*' type='@' index='0'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='sourceObject' declared_type='id' type='@' index='2'/>
<arg name='aFlag' declared_type='BOOL' type='B' index='3'/>
<arg name='event' declared_type='NSEvent*' type='@' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawFocusRingMask'>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawPageBorderWithSize:'>
<arg name='borderSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawRect:'>
<arg name='dirtyRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawSheetBorderWithSize:'>
<arg name='borderSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='enclosingMenuItem'>
<retval declared_type='NSMenuItem*' type='@'/>
</method>
<method selector='enclosingScrollView'>
<retval declared_type='NSScrollView*' type='@'/>
</method>
<method selector='endDocument'>
<retval declared_type='void' type='v'/>
</method>
<method selector='endPage'>
<retval declared_type='void' type='v'/>
</method>
<method selector='enterFullScreenMode:withOptions:'>
<arg name='screen' declared_type='NSScreen*' type='@' index='0'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='exerciseAmbiguityInLayout'>
<retval declared_type='void' type='v'/>
</method>
<method selector='exitFullScreenModeWithOptions:'>
<arg name='options' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fittingSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='focusRingMaskBounds'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='focusRingType'>
<retval declared_type='NSFocusRingType' type64='Q' type='I'/>
</method>
<method selector='focusView' class_method='true'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='frame'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='frameCenterRotation'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='frameForAlignmentRect:'>
<arg name='alignmentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='frameRotation'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='gState'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='getRectsBeingDrawn:count:'>
<arg name='rects' declared_type='NSRect**' type64='^^{CGRect}' const='true' type='^^{_NSRect}' index='0'/>
<arg name='count' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='getRectsExposedDuringLiveResize:count:'>
<arg name='exposedRects' declared_type='NSRect*' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='count' declared_type='NSInteger*' type64='^q' type='^i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='hasAmbiguousLayout'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='heightAdjustLimit'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='hitTest:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='inLiveResize'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithFrame:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='inputContext'>
<retval declared_type='NSTextInputContext*' type='@'/>
</method>
<method selector='intrinsicContentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='invalidateIntrinsicContentSize'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isDescendantOf:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isDrawingFindIndicator'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFlipped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHidden'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHiddenOrHasHiddenAncestor'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isInFullScreenMode'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isOpaque'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRotatedFromBase'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRotatedOrScaledFromBase'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='knowsPageRange:'>
<arg name='range' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='layer'>
<retval declared_type='CALayer*' type='@'/>
</method>
<method selector='layerContentsPlacement'>
<retval declared_type='NSViewLayerContentsPlacement' type64='q' type='i'/>
</method>
<method selector='layerContentsRedrawPolicy'>
<retval declared_type='NSViewLayerContentsRedrawPolicy' type64='q' type='i'/>
</method>
<method selector='layout'>
<retval declared_type='void' type='v'/>
</method>
<method selector='layoutSubtreeIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='locationOfPrintRect:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='lockFocus'>
<retval declared_type='void' type='v'/>
</method>
<method selector='lockFocusIfCanDraw'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lockFocusIfCanDrawInContext:'>
<arg name='context' declared_type='NSGraphicsContext*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='makeBackingLayer'>
<retval declared_type='CALayer*' type='@'/>
</method>
<method selector='menuForEvent:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method selector='mouse:inRect:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mouseDownCanMoveWindow'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='needsDisplay'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='needsLayout'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='needsPanelToBecomeKey'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='needsToDrawRect:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='needsUpdateConstraints'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='nextKeyView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='nextValidKeyView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='noteFocusRingMaskChanged'>
<retval declared_type='void' type='v'/>
</method>
<method selector='opaqueAncestor'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='pageFooter'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='pageHeader'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method selector='performKeyEquivalent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='performMnemonic:'>
<arg name='theString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='postsBoundsChangedNotifications'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='postsFrameChangedNotifications'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='preservesContentDuringLiveResize'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='previousKeyView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='previousValidKeyView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='print:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='printJobTitle'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='rectForPage:'>
<arg name='page' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='rectPreservedDuringLiveResize'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='reflectScrolledClipView:'>
<arg name='aClipView' declared_type='NSClipView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='registerForDraggedTypes:'>
<arg name='newTypes' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='registeredDraggedTypes'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='releaseGState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAllToolTips'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeConstraint:'>
<arg name='constraint' declared_type='NSLayoutConstraint*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeConstraints:'>
<arg name='constraints' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeCursorRect:cursor:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='anObj' declared_type='NSCursor*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeFromSuperview'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeFromSuperviewWithoutNeedingDisplay'>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeToolTip:'>
<arg name='tag' declared_type='NSToolTipTag' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTrackingArea:'>
<arg name='trackingArea' declared_type='NSTrackingArea*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeTrackingRect:'>
<arg name='tag' declared_type='NSTrackingRectTag' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='renewGState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='replaceSubview:with:'>
<arg name='oldView' declared_type='NSView*' type='@' index='0'/>
<arg name='newView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='requiresConstraintBasedLayout' class_method='true'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='resetCursorRects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='resizeSubviewsWithOldSize:'>
<arg name='oldSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='resizeWithOldSuperviewSize:'>
<arg name='oldSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rotateByAngle:'>
<arg name='angle' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:didAddMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:didMoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:didRemoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:handleMouseDown:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rulerView:locationForPoint:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='rulerView:pointForLocation:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='aPoint' declared_type='CGFloat' type64='d' type='f' index='1'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='rulerView:shouldAddMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rulerView:shouldMoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rulerView:shouldRemoveMarker:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='rulerView:willAddMarker:atLocation:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<arg name='location' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='rulerView:willMoveMarker:toLocation:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='marker' declared_type='NSRulerMarker*' type='@' index='1'/>
<arg name='location' declared_type='CGFloat' type64='d' type='f' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='rulerView:willSetClientView:'>
<arg name='ruler' declared_type='NSRulerView*' type='@' index='0'/>
<arg name='newClient' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scaleUnitSquareToSize:'>
<arg name='newUnitSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollClipView:toPoint:'>
<arg name='aClipView' declared_type='NSClipView*' type='@' index='0'/>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollPoint:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollRect:by:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='delta' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='scrollRectToVisible:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setAcceptsTouchEvents:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlphaValue:'>
<arg name='viewAlpha' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoresizesSubviews:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutoresizingMask:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundFilters:'>
<arg name='filters' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBounds:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBoundsOrigin:'>
<arg name='newOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBoundsRotation:'>
<arg name='angle' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBoundsSize:'>
<arg name='newSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanDrawConcurrently:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompositingFilter:'>
<arg name='filter' declared_type='CIFilter*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentCompressionResistancePriority:forOrientation:'>
<arg name='priority' declared_type='NSLayoutPriority' type='f' index='0'/>
<arg name='orientation' declared_type='NSLayoutConstraintOrientation' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentFilters:'>
<arg name='filters' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentHuggingPriority:forOrientation:'>
<arg name='priority' declared_type='NSLayoutPriority' type='f' index='0'/>
<arg name='orientation' declared_type='NSLayoutConstraintOrientation' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFocusRingType:'>
<arg name='focusRingType' declared_type='NSFocusRingType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrame:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameCenterRotation:'>
<arg name='angle' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameOrigin:'>
<arg name='newOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameRotation:'>
<arg name='angle' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameSize:'>
<arg name='newSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHidden:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setKeyboardFocusRingNeedsDisplayInRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayer:'>
<arg name='newLayer' declared_type='CALayer*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayerContentsPlacement:'>
<arg name='newPlacement' declared_type='NSViewLayerContentsPlacement' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLayerContentsRedrawPolicy:'>
<arg name='newPolicy' declared_type='NSViewLayerContentsRedrawPolicy' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplay:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplayInRect:'>
<arg name='invalidRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsLayout:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsUpdateConstraints:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNextKeyView:'>
<arg name='next' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPostsBoundsChangedNotifications:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPostsFrameChangedNotifications:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShadow:'>
<arg name='shadow' declared_type='NSShadow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSubviews:'>
<arg name='newSubviews' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolTip:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTranslatesAutoresizingMaskIntoConstraints:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUpGState'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWantsBestResolutionOpenGLSurface:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWantsLayer:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWantsRestingTouches:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shadow'>
<retval declared_type='NSShadow*' type='@'/>
</method>
<method selector='shouldDelayWindowOrderingForEvent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldDrawColor'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showDefinitionForAttributedString:atPoint:'>
<arg name='attrString' declared_type='NSAttributedString*' type='@' index='0'/>
<arg name='textBaselineOrigin' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showDefinitionForAttributedString:range:options:baselineOriginProvider:'>
<arg name='attrString' declared_type='NSAttributedString*' type='@' index='0'/>
<arg name='targetRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='originProvider' function_pointer='true' declared_type='NSPoint (^)(NSRange)' type='@?' index='3'>
<arg declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='sortSubviewsUsingFunction:context:'>
<arg name='compare' function_pointer='true' declared_type='NSComparisonResult (*)(id, id, void *)' type='^?' index='0'>
<arg declared_type='id' type='@'/>
<arg declared_type='id' type='@'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='NSComparisonResult' type64='q' type='i'/>
</arg>
<arg name='context' declared_type='void*' type='^v' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subviews'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='superview'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='toolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='trackingAreas'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='translateOriginToPoint:'>
<arg name='translation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='translateRectsNeedingDisplayInRect:by:'>
<arg name='clipRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='delta' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='translatesAutoresizingMaskIntoConstraints'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='unlockFocus'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unregisterDraggedTypes'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateConstraints'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateConstraintsForSubtreeIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateTrackingAreas'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewDidEndLiveResize'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewDidHide'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewDidMoveToSuperview'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewDidMoveToWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewDidUnhide'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewWillDraw'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewWillMoveToSuperview:'>
<arg name='newSuperview' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewWillMoveToWindow:'>
<arg name='newWindow' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewWillStartLiveResize'>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewWithTag:'>
<arg name='aTag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='visibleRect'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='wantsBestResolutionOpenGLSurface'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsDefaultClipping'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsLayer'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='wantsRestingTouches'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='widthAdjustLimit'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='willRemoveSubview:'>
<arg name='subview' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='window'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='writeEPSInsideRect:toPasteboard:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='writePDFInsideRect:toPasteboard:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSViewAnimation'>
<method selector='initWithViewAnimations:'>
<arg name='viewAnimations' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setViewAnimations:'>
<arg name='viewAnimations' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='viewAnimations'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='NSViewController'>
<method selector='commitEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='commitEditingWithDelegate:didCommitSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didCommitSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardEditing'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithNibName:bundle:'>
<arg name='nibNameOrNil' declared_type='NSString*' type='@' index='0'/>
<arg name='nibBundleOrNil' declared_type='NSBundle*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='loadView'>
<retval declared_type='void' type='v'/>
</method>
<method selector='nibBundle'>
<retval declared_type='NSBundle*' type='@'/>
</method>
<method selector='nibName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='representedObject'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setRepresentedObject:'>
<arg name='representedObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setView:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='view'>
<retval declared_type='NSView*' type='@'/>
</method>
</class>
<class name='NSWindow'>
<method selector='acceptsMouseMovedEvents'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='addChildWindow:ordered:'>
<arg name='childWin' declared_type='NSWindow*' type='@' index='0'/>
<arg name='place' declared_type='NSWindowOrderingMode' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='allowsConcurrentViewDrawing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='allowsToolTipsWhenApplicationIsInactive'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='alphaValue'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='anchorAttributeForOrientation:'>
<arg name='orientation' declared_type='NSLayoutConstraintOrientation' type64='q' type='i' index='0'/>
<retval declared_type='NSLayoutAttribute' type64='q' type='i'/>
</method>
<method selector='animationBehavior'>
<retval declared_type='NSWindowAnimationBehavior' type64='q' type='i'/>
</method>
<method selector='animationResizeTime:'>
<arg name='newFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='areCursorRectsEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='aspectRatio'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='attachedSheet'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='autorecalculatesContentBorderThicknessForEdge:'>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='autorecalculatesKeyViewLoop'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='backingAlignedRect:options:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='options' declared_type='NSAlignmentOptions' type='Q' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='backingLocation'>
<retval declared_type='NSWindowBackingLocation' type64='Q' type='I'/>
</method>
<method selector='backingScaleFactor'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='backingType'>
<retval declared_type='NSBackingStoreType' type64='Q' type='I'/>
</method>
<method selector='becomeKeyWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='becomeMainWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='cacheImageInRect:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='canBeVisibleOnAllSpaces'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canBecomeKeyWindow'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canBecomeMainWindow'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canBecomeVisibleWithoutLogin'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canHide'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='canStoreColor'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='cascadeTopLeftFromPoint:'>
<arg name='topLeftPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='center'>
<retval declared_type='void' type='v'/>
</method>
<method selector='childWindows'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='close'>
<retval declared_type='void' type='v'/>
</method>
<method selector='collectionBehavior'>
<retval declared_type='NSWindowCollectionBehavior' type64='Q' type='I'/>
</method>
<method selector='colorSpace'>
<retval declared_type='NSColorSpace*' type='@'/>
</method>
<method selector='constrainFrameRect:toScreen:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='screen' declared_type='NSScreen*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='contentAspectRatio'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentBorderThicknessForEdge:'>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='contentMaxSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentMinSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentRectForFrameRect:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='contentRectForFrameRect:styleMask:' class_method='true'>
<arg name='fRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aStyle' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='contentResizeIncrements'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='contentView'>
<retval declared_type='id' type='@'/>
</method>
<method selector='convertBaseToScreen:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='convertRectFromBacking:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectFromScreen:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectToBacking:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertRectToScreen:'>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='convertScreenToBase:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='currentEvent'>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='dataWithEPSInsideRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='dataWithPDFInsideRect:'>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSData*' type='@'/>
</method>
<method selector='deepestScreen'>
<retval declared_type='NSScreen*' type='@'/>
</method>
<method selector='defaultButtonCell'>
<retval declared_type='NSButtonCell*' type='@'/>
</method>
<method selector='defaultDepthLimit' class_method='true'>
<retval declared_type='NSWindowDepth' type='i'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='deminiaturize:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='depthLimit'>
<retval declared_type='NSWindowDepth' type='i'/>
</method>
<method selector='deviceDescription'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='disableCursorRects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='disableFlushWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='disableKeyEquivalentForDefaultButtonCell'>
<retval declared_type='void' type='v'/>
</method>
<method selector='disableScreenUpdatesUntilFlush'>
<retval declared_type='void' type='v'/>
</method>
<method selector='disableSnapshotRestoration'>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardCachedImage'>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardCursorRects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='discardEventsMatchingMask:beforeEvent:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='lastEvent' declared_type='NSEvent*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='display'>
<retval declared_type='void' type='v'/>
</method>
<method selector='displayIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='displaysWhenScreenProfileChanges'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='dockTile'>
<retval declared_type='NSDockTile*' type='@'/>
</method>
<method selector='dragImage:at:offset:event:pasteboard:source:slideBack:'>
<arg name='anImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='baseLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='initialOffset' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='4'/>
<arg name='sourceObj' declared_type='id' type='@' index='5'/>
<arg name='slideFlag' declared_type='BOOL' type='B' index='6'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='drawers'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='enableCursorRects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='enableFlushWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='enableKeyEquivalentForDefaultButtonCell'>
<retval declared_type='void' type='v'/>
</method>
<method selector='enableSnapshotRestoration'>
<retval declared_type='void' type='v'/>
</method>
<method selector='endEditingFor:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='fieldEditor:forObject:'>
<arg name='createFlag' declared_type='BOOL' type='B' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSText*' type='@'/>
</method>
<method selector='firstResponder'>
<retval declared_type='NSResponder*' type='@'/>
</method>
<method selector='flushWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='flushWindowIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='frame'>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='frameAutosaveName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='frameRectForContentRect:'>
<arg name='contentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='frameRectForContentRect:styleMask:' class_method='true'>
<arg name='cRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aStyle' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method selector='gState'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='graphicsContext'>
<retval declared_type='NSGraphicsContext*' type='@'/>
</method>
<method selector='handleCloseScriptCommand:'>
<arg name='command' declared_type='NSCloseCommand*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='handlePrintScriptCommand:'>
<arg name='command' declared_type='NSScriptCommand*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='handleSaveScriptCommand:'>
<arg name='command' declared_type='NSScriptCommand*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='hasCloseBox'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasDynamicDepthLimit'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasShadow'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasTitleBar'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hidesOnDeactivate'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='ignoresMouseEvents'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='inLiveResize'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithContentRect:styleMask:backing:defer:'>
<arg name='contentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aStyle' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='bufferingType' declared_type='NSBackingStoreType' type64='Q' type='I' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithContentRect:styleMask:backing:defer:screen:'>
<arg name='contentRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='aStyle' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='bufferingType' declared_type='NSBackingStoreType' type64='Q' type='I' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<arg name='screen' declared_type='NSScreen*' type='@' index='4'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithWindowRef:'>
<arg name='windowRef' declared_type='void*' type='^v' index='0'/>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='initialFirstResponder'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='invalidateCursorRectsForView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidateShadow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='isAutodisplay'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isDocumentEdited'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isExcludedFromWindowsMenu'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFloatingPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isFlushWindowDisabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isKeyWindow'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMainWindow'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMiniaturizable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMiniaturized'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isModalPanel'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMovable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isMovableByWindowBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isOnActiveSpace'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isOneShot'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isOpaque'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isReleasedWhenClosed'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isResizable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRestorable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSheet'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isZoomable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isZoomed'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='keyDown:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='keyViewSelectionDirection'>
<retval declared_type='NSSelectionDirection' type64='Q' type='I'/>
</method>
<method selector='layoutIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='level'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='makeFirstResponder:'>
<arg name='aResponder' declared_type='NSResponder*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='makeKeyAndOrderFront:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeKeyWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='makeMainWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='maxSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='menuChanged:' class_method='true'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='minFrameWidthWithTitle:styleMask:' class_method='true'>
<arg name='aTitle' declared_type='NSString*' type='@' index='0'/>
<arg name='aStyle' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='minSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='miniaturize:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='miniwindowImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='miniwindowTitle'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='mouseLocationOutsideOfEventStream'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method selector='nextEventMatchingMask:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='nextEventMatchingMask:untilDate:inMode:dequeue:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='expiration' declared_type='NSDate*' type='@' index='1'/>
<arg name='mode' declared_type='NSString*' type='@' index='2'/>
<arg name='deqFlag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSEvent*' type='@'/>
</method>
<method selector='orderBack:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFront:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderFrontRegardless'>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderOut:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderWindow:relativeTo:'>
<arg name='place' declared_type='NSWindowOrderingMode' type64='q' type='i' index='0'/>
<arg name='otherWin' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='orderedIndex'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='parentWindow'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='performClose:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performMiniaturize:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='performZoom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='postEvent:atStart:'>
<arg name='event' declared_type='NSEvent*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='preferredBackingLocation'>
<retval declared_type='NSWindowBackingLocation' type64='Q' type='I'/>
</method>
<method selector='preservesContentDuringLiveResize'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='preventsApplicationTerminationWhenModal'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='print:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='recalculateKeyViewLoop'>
<retval declared_type='void' type='v'/>
</method>
<method selector='registerForDraggedTypes:'>
<arg name='newTypes' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeChildWindow:'>
<arg name='childWin' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeFrameUsingName:' class_method='true'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='representedFilename'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='representedURL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='resetCursorRects'>
<retval declared_type='void' type='v'/>
</method>
<method selector='resignKeyWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='resignMainWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='resizeFlags'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='resizeIncrements'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method selector='restorationClass'>
<retval declared_type='Class*' type='#'/>
</method>
<method selector='restoreCachedImage'>
<retval declared_type='void' type='v'/>
</method>
<method selector='runToolbarCustomizationPalette:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='saveFrameUsingName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='screen'>
<retval declared_type='NSScreen*' type='@'/>
</method>
<method selector='selectKeyViewFollowingView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectKeyViewPrecedingView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectNextKeyView:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectPreviousKeyView:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sendEvent:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAcceptsMouseMovedEvents:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsConcurrentViewDrawing:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAllowsToolTipsWhenApplicationIsInactive:'>
<arg name='allowWhenInactive' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAlphaValue:'>
<arg name='windowAlpha' declared_type='CGFloat' type64='d' type='f' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnchorAttribute:forOrientation:'>
<arg name='attr' declared_type='NSLayoutAttribute' type64='q' type='i' index='0'/>
<arg name='orientation' declared_type='NSLayoutConstraintOrientation' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAnimationBehavior:'>
<arg name='newAnimationBehavior' declared_type='NSWindowAnimationBehavior' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAspectRatio:'>
<arg name='ratio' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutodisplay:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutorecalculatesContentBorderThickness:forEdge:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutorecalculatesKeyViewLoop:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg name='color' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackingType:'>
<arg name='bufferingType' declared_type='NSBackingStoreType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanBeVisibleOnAllSpaces:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanBecomeVisibleWithoutLogin:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanHide:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCollectionBehavior:'>
<arg name='behavior' declared_type='NSWindowCollectionBehavior' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setColorSpace:'>
<arg name='colorSpace' declared_type='NSColorSpace*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentAspectRatio:'>
<arg name='ratio' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentBorderThickness:forEdge:'>
<arg name='thickness' declared_type='CGFloat' type64='d' type='f' index='0'/>
<arg name='edge' declared_type='NSRectEdge' type64='Q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentMaxSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentMinSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentResizeIncrements:'>
<arg name='increments' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentSize:'>
<arg name='aSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setContentView:'>
<arg name='aView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultButtonCell:'>
<arg name='defButt' declared_type='NSButtonCell*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg name='anObject' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDepthLimit:'>
<arg name='limit' declared_type='NSWindowDepth' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplaysWhenScreenProfileChanges:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDocumentEdited:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDynamicDepthLimit:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setExcludedFromWindowsMenu:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrame:display:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrame:display:animate:'>
<arg name='frameRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='displayFlag' declared_type='BOOL' type='B' index='1'/>
<arg name='animateFlag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameAutosaveName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setFrameFromString:'>
<arg name='string' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameOrigin:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameTopLeftPoint:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFrameUsingName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setFrameUsingName:force:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<arg name='force' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setHasShadow:'>
<arg name='hasShadow' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHidesOnDeactivate:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIgnoresMouseEvents:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setInitialFirstResponder:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsMiniaturized:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsVisible:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setIsZoomed:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLevel:'>
<arg name='newLevel' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinSize:'>
<arg name='size' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMiniwindowImage:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMiniwindowTitle:'>
<arg name='title' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMovable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMovableByWindowBackground:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOneShot:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOpaque:'>
<arg name='isOpaque' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setOrderedIndex:'>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setParentWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreferredBackingLocation:'>
<arg name='backingLocation' declared_type='NSWindowBackingLocation' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreservesContentDuringLiveResize:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPreventsApplicationTerminationWhenModal:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setReleasedWhenClosed:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRepresentedFilename:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRepresentedURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setResizeIncrements:'>
<arg name='increments' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRestorable:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRestorationClass:'>
<arg name='restorationClass' declared_type='Class*' type='#' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSharingType:'>
<arg name='type' declared_type='NSWindowSharingType' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsResizeIndicator:'>
<arg name='show' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsToolbarButton:'>
<arg name='show' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStyleMask:'>
<arg name='styleMask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg name='aString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleWithRepresentedFilename:'>
<arg name='filename' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setToolbar:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setViewsNeedDisplay:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWindowController:'>
<arg name='windowController' declared_type='NSWindowController*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='sharingType'>
<retval declared_type='NSWindowSharingType' type64='Q' type='I'/>
</method>
<method selector='showsResizeIndicator'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsToolbarButton'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='standardWindowButton:'>
<arg name='b' declared_type='NSWindowButton' type64='Q' type='I' index='0'/>
<retval declared_type='NSButton*' type='@'/>
</method>
<method selector='standardWindowButton:forStyleMask:' class_method='true'>
<arg name='b' declared_type='NSWindowButton' type64='Q' type='I' index='0'/>
<arg name='styleMask' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='NSButton*' type='@'/>
</method>
<method selector='stringWithSavedFrame'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='styleMask'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method selector='title'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='toggleFullScreen:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toggleToolbarShown:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='toolbar'>
<retval declared_type='NSToolbar*' type='@'/>
</method>
<method selector='tryToPerform:with:'>
<arg name='anAction' declared_type='SEL' type=':' index='0'/>
<arg name='anObject' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='unregisterDraggedTypes'>
<retval declared_type='void' type='v'/>
</method>
<method selector='update'>
<retval declared_type='void' type='v'/>
</method>
<method selector='updateConstraintsIfNeeded'>
<retval declared_type='void' type='v'/>
</method>
<method selector='useOptimizedDrawing:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='userSpaceScaleFactor'>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method selector='validRequestorForSendType:returnType:'>
<arg name='sendType' declared_type='NSString*' type='@' index='0'/>
<arg name='returnType' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='viewsNeedDisplay'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='visualizeConstraints:'>
<arg name='constraints' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowController'>
<retval declared_type='id' type='@'/>
</method>
<method selector='windowNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='windowNumberAtPoint:belowWindowWithWindowNumber:' class_method='true'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<arg name='windowNumber' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='windowNumbersWithOptions:' class_method='true'>
<arg name='options' declared_type='NSWindowNumberListOptions' type64='Q' type='I' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='windowRef'>
<retval declared_type='void*' type='^v'/>
</method>
<method selector='worksWhenModal'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='zoom:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSWindowController'>
<method selector='close'>
<retval declared_type='void' type='v'/>
</method>
<method selector='document'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithWindowNibName:'>
<arg name='windowNibName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithWindowNibName:owner:'>
<arg name='windowNibName' declared_type='NSString*' type='@' index='0'/>
<arg name='owner' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithWindowNibPath:owner:'>
<arg name='windowNibPath' declared_type='NSString*' type='@' index='0'/>
<arg name='owner' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='isWindowLoaded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadWindow'>
<retval declared_type='void' type='v'/>
</method>
<method selector='owner'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setDocument:'>
<arg name='document' declared_type='NSDocument*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDocumentEdited:'>
<arg name='dirtyFlag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldCascadeWindows:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShouldCloseDocument:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setWindowFrameAutosaveName:'>
<arg name='name' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='shouldCascadeWindows'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldCloseDocument'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showWindow:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='synchronizeWindowTitleWithDocumentName'>
<retval declared_type='void' type='v'/>
</method>
<method selector='window'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method selector='windowDidLoad'>
<retval declared_type='void' type='v'/>
</method>
<method selector='windowFrameAutosaveName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='windowNibName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='windowNibPath'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='windowTitleForDocumentDisplayName:'>
<arg name='displayName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='windowWillLoad'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSWorkspace'>
<method selector='URLForApplicationToOpenURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='URLForApplicationWithBundleIdentifier:'>
<arg name='bundleIdentifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='absolutePathForAppBundleWithIdentifier:'>
<arg name='bundleIdentifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='activateFileViewerSelectingURLs:'>
<arg name='fileURLs' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='activeApplication'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='checkForRemovableMedia'>
<retval declared_type='void' type='v'/>
</method>
<method selector='desktopImageOptionsForScreen:'>
<arg name='screen' declared_type='NSScreen*' type='@' index='0'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='desktopImageURLForScreen:'>
<arg name='screen' declared_type='NSScreen*' type='@' index='0'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='duplicateURLs:completionHandler:'>
<arg name='URLs' declared_type='NSArray*' type='@' index='0'/>
<arg name='handler' function_pointer='true' declared_type='void (^)(NSDictionary *, NSError *)' type='@?' index='1'>
<arg declared_type='NSDictionary*' type='@'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='extendPowerOffBy:'>
<arg name='requested' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method selector='fileLabelColors'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='fileLabels'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='fileSystemChanged'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='filenameExtension:isValidForType:'>
<arg name='filenameExtension' declared_type='NSString*' type='@' index='0'/>
<arg name='typeName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='findApplications'>
<retval declared_type='void' type='v'/>
</method>
<method selector='frontmostApplication'>
<retval declared_type='NSRunningApplication*' type='@'/>
</method>
<method selector='fullPathForApplication:'>
<arg name='appName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<arg name='removableFlag' declared_type='BOOL*' type='^B' index='1'/>
<arg name='writableFlag' declared_type='BOOL*' type='^B' index='2'/>
<arg name='unmountableFlag' declared_type='BOOL*' type='^B' index='3'/>
<arg name='description' declared_type='NSString**' type='^@' index='4'/>
<arg name='fileSystemType' declared_type='NSString**' type='^@' index='5'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='getInfoForFile:application:type:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<arg name='appName' declared_type='NSString**' type='^@' index='1'/>
<arg name='type' declared_type='NSString**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hideOtherApplications'>
<retval declared_type='void' type='v'/>
</method>
<method selector='iconForFile:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='iconForFileType:'>
<arg name='fileType' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='iconForFiles:'>
<arg name='fullPaths' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='isFilePackageAtPath:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:'>
<arg name='bundleIdentifier' declared_type='NSString*' type='@' index='0'/>
<arg name='options' declared_type='NSWorkspaceLaunchOptions' type64='Q' type='I' index='1'/>
<arg name='descriptor' declared_type='NSAppleEventDescriptor*' type='@' index='2'/>
<arg name='identifier' declared_type='NSNumber**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='launchApplication:'>
<arg name='appName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='launchApplication:showIcon:autolaunch:'>
<arg name='appName' declared_type='NSString*' type='@' index='0'/>
<arg name='showIcon' declared_type='BOOL' type='B' index='1'/>
<arg name='autolaunch' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='launchApplicationAtURL:options:configuration:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='options' declared_type='NSWorkspaceLaunchOptions' type64='Q' type='I' index='1'/>
<arg name='configuration' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='NSRunningApplication*' type='@'/>
</method>
<method selector='launchedApplications'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='localizedDescriptionForType:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='menuBarOwningApplication'>
<retval declared_type='NSRunningApplication*' type='@'/>
</method>
<method selector='mountNewRemovableMedia'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='mountedLocalVolumePaths'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='mountedRemovableMedia'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='noteFileSystemChanged'>
<retval declared_type='void' type='v'/>
</method>
<method selector='noteFileSystemChanged:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='noteUserDefaultsChanged'>
<retval declared_type='void' type='v'/>
</method>
<method selector='notificationCenter'>
<retval declared_type='NSNotificationCenter*' type='@'/>
</method>
<method selector='openFile:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='openFile:fromImage:at:inView:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<arg name='anImage' declared_type='NSImage*' type='@' index='1'/>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='aView' declared_type='NSView*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='openFile:withApplication:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<arg name='appName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='openFile:withApplication:andDeactivate:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<arg name='appName' declared_type='NSString*' type='@' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='openTempFile:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='openURL:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:'>
<arg name='urls' declared_type='NSArray*' type='@' index='0'/>
<arg name='bundleIdentifier' declared_type='NSString*' type='@' index='1'/>
<arg name='options' declared_type='NSWorkspaceLaunchOptions' type64='Q' type='I' index='2'/>
<arg name='descriptor' declared_type='NSAppleEventDescriptor*' type='@' index='3'/>
<arg name='identifiers' declared_type='NSArray**' type='^@' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='performFileOperation:source:destination:files:tag:'>
<arg name='operation' declared_type='NSString*' type='@' index='0'/>
<arg name='source' declared_type='NSString*' type='@' index='1'/>
<arg name='destination' declared_type='NSString*' type='@' index='2'/>
<arg name='files' declared_type='NSArray*' type='@' index='3'/>
<arg name='tag' declared_type='NSInteger*' type64='^q' type='^i' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='preferredFilenameExtensionForType:'>
<arg name='typeName' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='recycleURLs:completionHandler:'>
<arg name='URLs' declared_type='NSArray*' type='@' index='0'/>
<arg name='handler' function_pointer='true' declared_type='void (^)(NSDictionary *, NSError *)' type='@?' index='1'>
<arg declared_type='NSDictionary*' type='@'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='runningApplications'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='selectFile:inFileViewerRootedAtPath:'>
<arg name='fullPath' declared_type='NSString*' type='@' index='0'/>
<arg name='rootFullPath' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setDesktopImageURL:forScreen:options:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='screen' declared_type='NSScreen*' type='@' index='1'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='error' declared_type='NSError**' type='^@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setIcon:forFile:options:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='fullPath' declared_type='NSString*' type='@' index='1'/>
<arg name='options' declared_type='NSWorkspaceIconCreationOptions' type64='Q' type='I' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='sharedWorkspace' class_method='true'>
<retval declared_type='NSWorkspace*' type='@'/>
</method>
<method selector='showSearchResultsForQueryString:'>
<arg name='queryString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='slideImage:from:to:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='fromPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='toPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='type:conformsToType:'>
<arg name='firstTypeName' declared_type='NSString*' type='@' index='0'/>
<arg name='secondTypeName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='typeOfFile:error:'>
<arg name='absoluteFilePath' declared_type='NSString*' type='@' index='0'/>
<arg name='outError' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='unmountAndEjectDeviceAtPath:'>
<arg name='path' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='unmountAndEjectDeviceAtURL:error:'>
<arg name='url' declared_type='NSURL*' type='@' index='0'/>
<arg name='error' declared_type='NSError**' type='^@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='userDefaultsChanged'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<informal_protocol name='NSAccessibility'>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='accessibilityActionDescription:'>
<arg name='action' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='accessibilityActionNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='Q24@0:8@16' type='I12@0:4@8' selector='accessibilityArrayAttributeCount:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='@40@0:8@16Q24Q32' type='@20@0:4@8I12I16' selector='accessibilityArrayAttributeValues:index:maxCount:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='maxCount' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='accessibilityAttributeNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='accessibilityAttributeValue:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='accessibilityAttributeValue:forParameter:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<arg name='parameter' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='accessibilityFocusedUIElement'>
<retval declared_type='id' type='@'/>
</method>
<method type64='@32@0:8{CGPoint=dd}16' type='@16@0:4{_NSPoint=ff}8' selector='accessibilityHitTest:'>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='Q24@0:8@16' type='I12@0:4@8' selector='accessibilityIndexOfChild:'>
<arg name='child' declared_type='id' type='@' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='accessibilityIsAttributeSettable:'>
<arg name='attribute' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='accessibilityIsIgnored'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='accessibilityParameterizedAttributeNames'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='accessibilityPerformAction:'>
<arg name='action' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='accessibilitySetValue:forAttribute:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<arg name='attribute' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSAccessibilityAdditions'>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='accessibilitySetOverrideValue:forAttribute:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<arg name='attribute' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSAlertDelegate'>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='alertShowHelp:'>
<arg name='alert' declared_type='NSAlert*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSAnimatablePropertyContainer'>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='animationForKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='animations'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='animator'>
<retval declared_type='id' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='defaultAnimationForKey:' class_method='true'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setAnimations:'>
<arg name='dict' declared_type='NSDictionary*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSAnimationDelegate'>
<method type64='v28@0:8@16f24' type='v16@0:4@8f12' selector='animation:didReachProgressMark:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<arg name='progress' declared_type='NSAnimationProgress' type='f' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='f28@0:8@16f24' type='f16@0:4@8f12' selector='animation:valueForProgress:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<arg name='progress' declared_type='NSAnimationProgress' type='f' index='1'/>
<retval declared_type='float' type='f'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='animationDidEnd:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='animationDidStop:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='animationShouldStart:'>
<arg name='animation' declared_type='NSAnimation*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSApplicationDelegate'>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='application:didDecodeRestorableState:'>
<arg name='app' declared_type='NSApplication*' type='@' index='0'/>
<arg name='coder' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='application:didFailToRegisterForRemoteNotificationsWithError:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='error' declared_type='NSError*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='application:didReceiveRemoteNotification:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='userInfo' declared_type='NSDictionary*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='application:didRegisterForRemoteNotificationsWithDeviceToken:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='deviceToken' declared_type='NSData*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='application:openFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='application:openFileWithoutUI:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='application:openFiles:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filenames' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='application:openTempFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='application:printFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='Q44@0:8@16@24@32B40' type='I24@0:4@8@12@16B20' selector='application:printFiles:withSettings:showPrintPanels:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='fileNames' declared_type='NSArray*' type='@' index='1'/>
<arg name='printSettings' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='showPrintPanels' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSApplicationPrintReply' type64='Q' type='I'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='application:willEncodeRestorableState:'>
<arg name='app' declared_type='NSApplication*' type='@' index='0'/>
<arg name='coder' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='application:willPresentError:'>
<arg name='application' declared_type='NSApplication*' type='@' index='0'/>
<arg name='error' declared_type='NSError*' type='@' index='1'/>
<retval declared_type='NSError*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationDidBecomeActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationDidChangeScreenParameters:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationDidFinishLaunching:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationDidHide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationDidResignActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationDidUnhide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationDidUpdate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='applicationDockMenu:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='applicationOpenUntitledFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B28@0:8@16B24' type='B16@0:4@8B12' selector='applicationShouldHandleReopen:hasVisibleWindows:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='flag' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='applicationShouldOpenUntitledFile:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='Q24@0:8@16' type='I12@0:4@8' selector='applicationShouldTerminate:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='NSApplicationTerminateReply' type64='Q' type='I'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='applicationShouldTerminateAfterLastWindowClosed:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationWillBecomeActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationWillFinishLaunching:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationWillHide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationWillResignActive:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationWillTerminate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationWillUnhide:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='applicationWillUpdate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSApplicationScriptingDelegation'>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='application:delegateHandlesKey:'>
<arg name='sender' declared_type='NSApplication*' type='@' index='0'/>
<arg name='key' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSBrowserDelegate'>
<method type64='B56@0:8@16@24q32q40Q48' type='B28@0:4@8@12i16i20I24' selector='browser:acceptDrop:atRow:column:dropOperation:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='dropOperation' declared_type='NSBrowserDropOperation' type64='Q' type='I' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B48@0:8@16@24q32@40' type='B24@0:4@8@12i16@20' selector='browser:canDragRowsWithIndexes:inColumn:withEvent:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@40@0:8@16q24@32' type='@20@0:4@8i12@16' selector='browser:child:ofItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v40@0:8@16q24@32' type='v20@0:4@8i12@16' selector='browser:createRowsForColumn:inMatrix:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='matrix' declared_type='NSMatrix*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8@16q24q32' type='v20@0:4@8i12i16' selector='browser:didChangeLastColumn:toColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='oldLastColumn' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@56@0:8@16@24q32@40^{CGPoint=dd}48' type='@28@0:4@8@12i16@20^{_NSPoint=ff}24' selector='browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='4'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='browser:headerViewControllerForItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSViewController*' type='@'/>
</method>
<method type64='d40@0:8@16q24q32' type='f20@0:4@8i12i16' selector='browser:heightOfRow:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='B32@0:8@16q24' type='B16@0:4@8i12' selector='browser:isColumnValid:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='browser:isLeafItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@48@0:8@16@24@32q40' type='@24@0:4@8@12@16i20' selector='browser:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='1'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='q56@0:8@16q24q32q40@48' type='i28@0:4@8i12i16i20@24' selector='browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='startRow' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='endRow' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<arg name='searchString' declared_type='NSString*' type='@' index='4'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='q32@0:8@16@24' type='i16@0:4@8@12' selector='browser:numberOfChildrenOfItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='q32@0:8@16q24' type='i16@0:4@8i12' selector='browser:numberOfRowsInColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='browser:objectValueForItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='browser:previewViewControllerForLeafItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSViewController*' type='@'/>
</method>
<method type64='B40@0:8@16@24q32' type='B20@0:4@8@12i16' selector='browser:selectCellWithString:inColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='title' declared_type='NSString*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16q24q32' type='B20@0:4@8i12i16' selector='browser:selectRow:inColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@40@0:8@16@24q32' type='@20@0:4@8@12i16' selector='browser:selectionIndexesForProposedSelection:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='proposedSelectionIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method type64='v40@0:8@16@24@32' type='v20@0:4@8@12@16' selector='browser:setObjectValue:forItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='browser:shouldEditItem:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16q24q32' type='B20@0:4@8i12i16' selector='browser:shouldShowCellExpansionForRow:column:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='d44@0:8@16q24B32d36' type='f24@0:4@8i12B16f20' selector='browser:shouldSizeColumn:forUserResize:toWidth:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='forUserResize' declared_type='BOOL' type='B' index='2'/>
<arg name='suggestedWidth' declared_type='CGFloat' type64='d' type='f' index='3'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='browser:shouldTypeSelectForEvent:withCurrentSearchString:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='searchString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='d32@0:8@16q24' type='f16@0:4@8i12' selector='browser:sizeToFitWidthOfColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='@32@0:8@16q24' type='@16@0:4@8i12' selector='browser:titleOfColumn:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@40@0:8@16q24q32' type='@20@0:4@8i12i16' selector='browser:typeSelectStringForRow:inColumn:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='Q56@0:8@16@24^q32^q40^Q48' type='I28@0:4@8@12^i16^i20^I24' selector='browser:validateDrop:proposedRow:column:dropOperation:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger*' type64='^q' type='^i' index='2'/>
<arg name='column' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<arg name='dropOperation' declared_type='NSBrowserDropOperation*' type64='^Q' type='^I' index='4'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='v48@0:8@16@24q32q40' type='v24@0:4@8@12i16i20' selector='browser:willDisplayCell:atRow:column:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B48@0:8@16@24q32@40' type='B24@0:4@8@12i16@20' selector='browser:writeRowsWithIndexes:inColumn:toPasteboard:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='browserColumnConfigurationDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='browserDidScroll:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='browserWillScroll:'>
<arg name='sender' declared_type='NSBrowser*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='rootItemForBrowser:'>
<arg name='browser' declared_type='NSBrowser*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSChangeSpelling'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='changeSpelling:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSCollectionViewDelegate'>
<method type64='B48@0:8@16@24q32q40' type='B24@0:4@8@12i16i20' selector='collectionView:acceptDrop:index:dropOperation:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='dropOperation' declared_type='NSCollectionViewDropOperation' type64='q' type='i' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='collectionView:canDragItemsAtIndexes:withEvent:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@48@0:8@16@24@32^{CGPoint=dd}40' type='@24@0:4@8@12@16^{_NSPoint=ff}20' selector='collectionView:draggingImageForItemsAtIndexes:withEvent:offset:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<arg name='dragImageOffset' declared_type='NSPointPointer' type64='^{CGPoint=dd}' type='^{_NSPoint=ff}' index='3'/>
<retval declared_type='NSImage*' type='@'/>
</method>
<method type64='v56@0:8@16@24{CGPoint=dd}32Q48' type='v28@0:4@8@12{_NSPoint=ff}16I24' selector='collectionView:draggingSession:endedAtPoint:dragOperation:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v56@0:8@16@24{CGPoint=dd}32@48' type='v28@0:4@8@12{_NSPoint=ff}16@24' selector='collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='dropURL' declared_type='NSURL*' type='@' index='1'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@32@0:8@16Q24' type='@16@0:4@8I12' selector='collectionView:pasteboardWriterForItemAtIndex:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='collectionView:updateDraggingItemsForDrag:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q48@0:8@16@24^q32^q40' type='I24@0:4@8@12^i16^i20' selector='collectionView:validateDrop:proposedIndex:dropOperation:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<arg name='proposedDropIndex' declared_type='NSInteger*' type64='^q' type='^i' index='2'/>
<arg name='proposedDropOperation' declared_type='NSCollectionViewDropOperation*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='collectionView:writeItemsAtIndexes:toPasteboard:'>
<arg name='collectionView' declared_type='NSCollectionView*' type='@' index='0'/>
<arg name='indexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSColorPanelResponderMethod'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='changeColor:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSColorPickingCustom'>
<method type64='q16@0:8' type='i8@0:4' selector='currentMode'>
<retval declared_type='NSColorPanelMode' type64='q' type='i'/>
</method>
<method type64='@20@0:8B16' type='@12@0:4B8' selector='provideNewView:'>
<arg name='initialRequest' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setColor:'>
<arg name='newColor' declared_type='NSColor*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8q16' type='B12@0:4i8' selector='supportsMode:'>
<arg name='mode' declared_type='NSColorPanelMode' type64='q' type='i' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSColorPickingDefault'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='alphaControlAddedOrRemoved:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='attachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='buttonToolTip'>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='detachColorList:'>
<arg name='colorList' declared_type='NSColorList*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@32@0:8Q16@24' type='@16@0:4I8@12' selector='initWithPickerMask:colorPanel:'>
<arg name='mask' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='owningColorPanel' declared_type='NSColorPanel*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='insertNewButtonImage:in:'>
<arg name='newButtonImage' declared_type='NSImage*' type='@' index='0'/>
<arg name='buttonCell' declared_type='NSButtonCell*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{CGSize=dd}16@0:8' type='{_NSSize=ff}8@0:4' selector='minContentSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='provideNewButtonImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method type64='v24@0:8q16' type='v12@0:4i8' selector='setMode:'>
<arg name='mode' declared_type='NSColorPanelMode' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='viewSizeChanged:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSComboBoxCellDataSource'>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='comboBoxCell:completedString:'>
<arg name='aComboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<arg name='uncompletedString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='Q32@0:8@16@24' type='I16@0:4@8@12' selector='comboBoxCell:indexOfItemWithStringValue:'>
<arg name='aComboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='@32@0:8@16q24' type='@16@0:4@8i12' selector='comboBoxCell:objectValueForItemAtIndex:'>
<arg name='aComboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='q24@0:8@16' type='i12@0:4@8' selector='numberOfItemsInComboBoxCell:'>
<arg name='comboBoxCell' declared_type='NSComboBoxCell*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</informal_protocol>
<informal_protocol name='NSComboBoxDataSource'>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='comboBox:completedString:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='Q32@0:8@16@24' type='I16@0:4@8@12' selector='comboBox:indexOfItemWithStringValue:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='@32@0:8@16q24' type='@16@0:4@8i12' selector='comboBox:objectValueForItemAtIndex:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='q24@0:8@16' type='i12@0:4@8' selector='numberOfItemsInComboBox:'>
<arg name='aComboBox' declared_type='NSComboBox*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</informal_protocol>
<informal_protocol name='NSComboBoxDelegate'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='comboBoxSelectionDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='comboBoxSelectionIsChanging:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='comboBoxWillDismiss:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='comboBoxWillPopUp:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSControlSubclassNotifications'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='controlTextDidBeginEditing:'>
<arg name='obj' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='controlTextDidChange:'>
<arg name='obj' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='controlTextDidEndEditing:'>
<arg name='obj' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSControlTextEditingDelegate'>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='control:didFailToFormatString:errorDescription:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<arg name='error' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v40@0:8@16@24@32' type='v20@0:4@8@12@16' selector='control:didFailToValidatePartialString:errorDescription:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<arg name='error' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='control:isValidObject:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='obj' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='control:textShouldBeginEditing:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='fieldEditor' declared_type='NSText*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='control:textShouldEndEditing:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='fieldEditor' declared_type='NSText*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@64@0:8@16@24@32{_NSRange=QQ}40^q56' type='@32@0:4@8@12@16{_NSRange=II}20^i28' selector='control:textView:completions:forPartialWordRange:indexOfSelectedItem:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='textView' declared_type='NSTextView*' type='@' index='1'/>
<arg name='words' declared_type='NSArray*' type='@' index='2'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='3'/>
<arg name='index' declared_type='NSInteger*' type64='^q' type='^i' index='4'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='B40@0:8@16@24:32' type='B20@0:4@8@12:16' selector='control:textView:doCommandBySelector:'>
<arg name='control' declared_type='NSControl*' type='@' index='0'/>
<arg name='textView' declared_type='NSTextView*' type='@' index='1'/>
<arg name='commandSelector' declared_type='SEL' type=':' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSDatePickerCellDelegate'>
<method type64='v40@0:8@16^@24^d32' type='v20@0:4@8^@12^d16' selector='datePickerCell:validateProposedDateValue:timeInterval:'>
<arg name='aDatePickerCell' declared_type='NSDatePickerCell*' type='@' index='0'/>
<arg name='proposedDateValue' declared_type='NSDate**' type='^@' index='1'/>
<arg name='proposedTimeInterval' declared_type='NSTimeInterval*' type='^d' index='2'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSDictionaryControllerKeyValuePair'>
<method type64='B16@0:8' type='B8@0:4' selector='isExplicitlyIncluded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='key'>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='localizedKey'>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setKey:'>
<arg name='key' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setLocalizedKey:'>
<arg name='localizedKey' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setValue:'>
<arg name='value' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='value'>
<retval declared_type='id' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSDockTilePlugIn'>
<method type64='@16@0:8' type='@8@0:4' selector='dockMenu'>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setDockTile:'>
<arg name='dockTile' declared_type='NSDockTile*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSDraggingDestination'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='concludeDragOperation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='draggingEnded:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q24@0:8@16' type='I12@0:4@8' selector='draggingEntered:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='draggingExited:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q24@0:8@16' type='I12@0:4@8' selector='draggingUpdated:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='performDragOperation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='prepareForDragOperation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='updateDraggingItemsForDrag:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='wantsPeriodicDraggingUpdates'>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSDraggingInfo'>
<method type64='B16@0:8' type='B8@0:4' selector='animatesToDestination'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='draggedImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method type64='{CGPoint=dd}16@0:8' type='{_NSPoint=ff}8@0:4' selector='draggedImageLocation'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='draggingDestinationWindow'>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method type64='q16@0:8' type='i8@0:4' selector='draggingFormation'>
<retval declared_type='NSDraggingFormation' type64='q' type='i'/>
</method>
<method type64='{CGPoint=dd}16@0:8' type='{_NSPoint=ff}8@0:4' selector='draggingLocation'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='draggingPasteboard'>
<retval declared_type='NSPasteboard*' type='@'/>
</method>
<method type64='q16@0:8' type='i8@0:4' selector='draggingSequenceNumber'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='draggingSource'>
<retval declared_type='id' type='@'/>
</method>
<method type64='Q16@0:8' type='I8@0:4' selector='draggingSourceOperationMask'>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='v56@0:8Q16@24@32@40@?48' type='v28@0:4I8@12@16@20@?24' selector='enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:'>
<arg name='enumOpts' declared_type='NSDraggingItemEnumerationOptions' type64='Q' type='I' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<arg name='classArray' declared_type='NSArray*' type='@' index='2'/>
<arg name='searchOptions' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='block' function_pointer='true' declared_type='void (^)(NSDraggingItem *, NSInteger, BOOL *)' type='@?' index='4'>
<arg declared_type='NSDraggingItem*' type='@'/>
<arg declared_type='NSInteger' type64='q' type='i'/>
<arg declared_type='BOOL*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='namesOfPromisedFilesDroppedAtDestination:'>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='q16@0:8' type='i8@0:4' selector='numberOfValidItemsForDrop'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='v20@0:8B16' type='v12@0:4B8' selector='setAnimatesToDestination:'>
<arg name='animatesToDestination' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8q16' type='v12@0:4i8' selector='setDraggingFormation:'>
<arg name='draggingFormation' declared_type='NSDraggingFormation' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8q16' type='v12@0:4i8' selector='setNumberOfValidItemsForDrop:'>
<arg name='numberOfValidItemsForDrop' declared_type='NSInteger' type64='q' type='i' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8{CGPoint=dd}16' type='v16@0:4{_NSPoint=ff}8' selector='slideDraggedImageTo:'>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSDraggingSource'>
<method type64='v48@0:8@16{CGPoint=dd}24Q40' type='v24@0:4@8{_NSPoint=ff}12I20' selector='draggingSession:endedAtPoint:operation:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8@16{CGPoint=dd}24' type='v20@0:4@8{_NSPoint=ff}12' selector='draggingSession:movedToPoint:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q32@0:8@16q24' type='I16@0:4@8i12' selector='draggingSession:sourceOperationMaskForDraggingContext:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='context' declared_type='NSDraggingContext' type64='q' type='i' index='1'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='v40@0:8@16{CGPoint=dd}24' type='v20@0:4@8{_NSPoint=ff}12' selector='draggingSession:willBeginAtPoint:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='ignoreModifierKeysForDraggingSession:'>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSDraggingSourceDeprecated'>
<method type64='v40@0:8@16{CGPoint=dd}24' type='v20@0:4@8{_NSPoint=ff}12' selector='draggedImage:beganAt:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v44@0:8@16{CGPoint=dd}24B40' type='v24@0:4@8{_NSPoint=ff}12B20' selector='draggedImage:endedAt:deposited:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v48@0:8@16{CGPoint=dd}24Q40' type='v24@0:4@8{_NSPoint=ff}12I20' selector='draggedImage:endedAt:operation:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8@16{CGPoint=dd}24' type='v20@0:4@8{_NSPoint=ff}12' selector='draggedImage:movedTo:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q20@0:8B16' type='I12@0:4B8' selector='draggingSourceOperationMaskForLocal:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='ignoreModifierKeysWhileDragging'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='namesOfPromisedFilesDroppedAtDestination:'>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSDrawerDelegate'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='drawerDidClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='drawerDidOpen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='drawerShouldClose:'>
<arg name='sender' declared_type='NSDrawer*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='drawerShouldOpen:'>
<arg name='sender' declared_type='NSDrawer*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='drawerWillClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='drawerWillOpen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{CGSize=dd}40@0:8@16{CGSize=dd}24' type='{_NSSize=ff}20@0:4@8{_NSSize=ff}12' selector='drawerWillResizeContents:toSize:'>
<arg name='sender' declared_type='NSDrawer*' type='@' index='0'/>
<arg name='contentSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
</informal_protocol>
<informal_protocol name='NSEditor'>
<method type64='B16@0:8' type='B8@0:4' selector='commitEditing'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B24@0:8^@16' type='B12@0:4^@8' selector='commitEditingAndReturnError:'>
<arg name='error' declared_type='NSError**' type='^@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v40@0:8@16:24^v32' type='v20@0:4@8:12^v16' selector='commitEditingWithDelegate:didCommitSelector:contextInfo:'>
<arg name='delegate' declared_type='id' type='@' index='0'/>
<arg name='didCommitSelector' declared_type='SEL' type=':' index='1'/>
<arg name='contextInfo' declared_type='void*' type='^v' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v16@0:8' type='v8@0:4' selector='discardEditing'>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSEditorRegistration'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='objectDidBeginEditing:'>
<arg name='editor' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='objectDidEndEditing:'>
<arg name='editor' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSFontManagerDelegate'>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='fontManager:willIncludeFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='fontName' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSFontManagerResponderMethod'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='changeFont:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSFontPanelValidationAdditions'>
<method type64='Q24@0:8@16' type='I12@0:4@8' selector='validModesForFontPanel:'>
<arg name='fontPanel' declared_type='NSFontPanel*' type='@' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
</informal_protocol>
<informal_protocol name='NSGlyphStorage'>
<method type64='@16@0:8' type='@8@0:4' selector='attributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method type64='v48@0:8r^I16Q24Q32Q40' type='v24@0:4r^I8I12I16I20' selector='insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:'>
<arg name='glyphs' declared_type='NSGlyph*' const='true' type='^I' index='0'/>
<arg name='length' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q16@0:8' type='I8@0:4' selector='layoutOptions'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='v40@0:8q16q24Q32' type='v20@0:4i8i12I16' selector='setIntAttribute:value:forGlyphAtIndex:'>
<arg name='attributeTag' declared_type='NSInteger' type64='q' type='i' index='0'/>
<arg name='val' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='glyphIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSIgnoreMisspelledWords'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='ignoreSpelling:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSImageDelegate'>
<method type64='v40@0:8@16@24q32' type='v20@0:4@8@12i16' selector='image:didLoadPartOfRepresentation:withValidRows:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<arg name='rows' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8@16@24Q32' type='v20@0:4@8@12I16' selector='image:didLoadRepresentation:withStatus:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<arg name='status' declared_type='NSImageLoadStatus' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='image:didLoadRepresentationHeader:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='image:willLoadRepresentation:'>
<arg name='image' declared_type='NSImage*' type='@' index='0'/>
<arg name='rep' declared_type='NSImageRep*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24' type='@28@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12' selector='imageDidNotDraw:inRect:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='aRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='NSImage*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSInputServerMouseTracker'>
<method type64='B56@0:8Q16{CGPoint=dd}24Q40@48' type='B28@0:4I8{_NSPoint=ff}12I20@24' selector='mouseDownOnCharacterIndex:atCoordinate:withModifier:client:'>
<arg name='theIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='theFlags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='sender' declared_type='id' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B56@0:8Q16{CGPoint=dd}24Q40@48' type='B28@0:4I8{_NSPoint=ff}12I20@24' selector='mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:'>
<arg name='theIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='theFlags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='sender' declared_type='id' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v56@0:8Q16{CGPoint=dd}24Q40@48' type='v28@0:4I8{_NSPoint=ff}12I20@24' selector='mouseUpOnCharacterIndex:atCoordinate:withModifier:client:'>
<arg name='theIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='1'/>
<arg name='theFlags' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='sender' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSInputServiceProvider'>
<method type64='v32@0:8@16q24' type='v16@0:4@8i12' selector='activeConversationChanged:toNewConversation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='newConversation' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16q24' type='v16@0:4@8i12' selector='activeConversationWillChange:fromOldConversation:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='oldConversation' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='canBeDisabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8:16@24' type='v16@0:4:8@12' selector='doCommandBySelector:client:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<arg name='sender' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='inputClientBecomeActive:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='inputClientDisabled:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='inputClientEnabled:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='inputClientResignActive:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='insertText:client:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='sender' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='markedTextAbandoned:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8{_NSRange=QQ}16@32' type='v20@0:4{_NSRange=II}8@16' selector='markedTextSelectionChanged:client:'>
<arg name='newSel' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='sender' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='terminate:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='wantsToDelayTextChangeNotifications'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='wantsToHandleMouseEvents'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='wantsToInterpretAllKeystrokes'>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSKeyValueBindingCreation'>
<method type64='v48@0:8@16@24@32@40' type='v24@0:4@8@12@16@20' selector='bind:toObject:withKeyPath:options:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<arg name='observable' declared_type='id' type='@' index='1'/>
<arg name='keyPath' declared_type='NSString*' type='@' index='2'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='exposeBinding:' class_method='true'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='exposedBindings'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='infoForBinding:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='optionDescriptionsForBinding:'>
<arg name='aBinding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='unbind:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='#24@0:8@16' type='#12@0:4@8' selector='valueClassForBinding:'>
<arg name='binding' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='Class' type='#'/>
</method>
</informal_protocol>
<informal_protocol name='NSLayoutManagerDelegate'>
<method type64='v36@0:8@16@24B32' type='v20@0:4@8@12B16' selector='layoutManager:didCompleteLayoutForTextContainer:atEnd:'>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='0'/>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='1'/>
<arg name='layoutFinishedFlag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@52@0:8@16@24B32Q36^{_NSRange=QQ}44' type='@28@0:4@8@12B16I20^{_NSRange=II}24' selector='layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:'>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='0'/>
<arg name='attrs' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='toScreen' declared_type='BOOL' type='B' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<arg name='effectiveCharRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='4'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='layoutManagerDidInvalidateLayout:'>
<arg name='sender' declared_type='NSLayoutManager*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSMenuDelegate'>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8@16@24' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}16@0:4@8@12' selector='confinementRectForMenu:onScreen:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='screen' declared_type='NSScreen*' type='@' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method type64='B44@0:8@16@24q32B40' type='B24@0:4@8@12i16B20' selector='menu:updateItem:atIndex:shouldCancel:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='item' declared_type='NSMenuItem*' type='@' index='1'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='shouldCancel' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='menu:willHighlightItem:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='item' declared_type='NSMenuItem*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='menuDidClose:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B48@0:8@16@24^@32^:40' type='B24@0:4@8@12^@16^:20' selector='menuHasKeyEquivalent:forEvent:target:action:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='target' declared_type='id*' type='^@' index='2'/>
<arg name='action' declared_type='SEL*' type='^:' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='menuNeedsUpdate:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='menuWillOpen:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='q24@0:8@16' type='i12@0:4@8' selector='numberOfItemsInMenu:'>
<arg name='menu' declared_type='NSMenu*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</informal_protocol>
<informal_protocol name='NSMenuValidation'>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='validateMenuItem:'>
<arg name='menuItem' declared_type='NSMenuItem*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSNibAwaking'>
<method type64='v16@0:8' type='v8@0:4' selector='awakeFromNib'>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSOpenSavePanelDelegate'>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='panel:didChangeToDirectoryURL:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='url' declared_type='NSURL*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='panel:shouldEnableURL:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='url' declared_type='NSURL*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@36@0:8@16@24B32' type='@20@0:4@8@12B16' selector='panel:userEnteredFilename:confirmed:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<arg name='okFlag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='B40@0:8@16@24^@32' type='B20@0:4@8@12^@16' selector='panel:validateURL:error:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='url' declared_type='NSURL*' type='@' index='1'/>
<arg name='outError' declared_type='NSError**' type='^@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v28@0:8@16B24' type='v16@0:4@8B12' selector='panel:willExpand:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='expanding' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='panelSelectionDidChange:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSOutlineViewDataSource'>
<method type64='B48@0:8@16@24@32q40' type='B24@0:4@8@12@16i20' selector='outlineView:acceptDrop:item:childIndex:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@40@0:8@16q24@32' type='@20@0:4@8i12@16' selector='outlineView:child:ofItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v56@0:8@16@24{CGPoint=dd}32Q48' type='v28@0:4@8@12{_NSPoint=ff}16I24' selector='outlineView:draggingSession:endedAtPoint:operation:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v56@0:8@16@24{CGPoint=dd}32@48' type='v28@0:4@8@12{_NSPoint=ff}16@24' selector='outlineView:draggingSession:willBeginAtPoint:forItems:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='draggedItems' declared_type='NSArray*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='outlineView:isItemExpandable:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='outlineView:itemForPersistentObject:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='1'/>
<arg name='items' declared_type='NSArray*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='q32@0:8@16@24' type='i16@0:4@8@12' selector='outlineView:numberOfChildrenOfItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='outlineView:objectValueForTableColumn:byItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='outlineView:pasteboardWriterForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='outlineView:persistentObjectForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v48@0:8@16@24@32@40' type='v24@0:4@8@12@16@20' selector='outlineView:setObjectValue:forTableColumn:byItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='outlineView:sortDescriptorsDidChange:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='oldDescriptors' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='outlineView:updateDraggingItemsForDrag:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q48@0:8@16@24@32q40' type='I24@0:4@8@12@16i20' selector='outlineView:validateDrop:proposedItem:proposedChildIndex:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='outlineView:writeItems:toPasteboard:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='items' declared_type='NSArray*' type='@' index='1'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSOutlineViewDelegate'>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='outlineView:dataCellForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='NSCell*' type='@'/>
</method>
<method type64='v40@0:8@16@24q32' type='v20@0:4@8@12i16' selector='outlineView:didAddRowView:forRow:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='outlineView:didClickTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='outlineView:didDragTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8@16@24q32' type='v20@0:4@8@12i16' selector='outlineView:didRemoveRowView:forRow:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='d32@0:8@16@24' type='f16@0:4@8@12' selector='outlineView:heightOfRowByItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='outlineView:isGroupItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='outlineView:mouseDownInHeaderOfTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@48@0:8@16@24@32@40' type='@24@0:4@8@12@16@20' selector='outlineView:nextTypeSelectMatchFromItem:toItem:forString:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='startItem' declared_type='id' type='@' index='1'/>
<arg name='endItem' declared_type='id' type='@' index='2'/>
<arg name='searchString' declared_type='NSString*' type='@' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='outlineView:rowViewForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='NSTableRowView*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='outlineView:selectionIndexesForProposedSelection:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='proposedSelectionIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='outlineView:shouldCollapseItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='outlineView:shouldEditTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='outlineView:shouldExpandItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16q24q32' type='B20@0:4@8i12i16' selector='outlineView:shouldReorderColumn:toColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='newColumnIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='outlineView:shouldSelectItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='outlineView:shouldSelectTableColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='outlineView:shouldShowCellExpansionForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='outlineView:shouldShowOutlineCellForItem:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='item' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B48@0:8@16@24@32@40' type='B24@0:4@8@12@16@20' selector='outlineView:shouldTrackCell:forTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='outlineView:shouldTypeSelectForEvent:withCurrentSearchString:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='searchString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='d32@0:8@16q24' type='f16@0:4@8i12' selector='outlineView:sizeToFitWidthOfColumn:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='@72@0:8@16@24^{CGRect={CGPoint=dd}{CGSize=dd}}32@40@48{CGPoint=dd}56' type='@36@0:4@8@12^{_NSRect={_NSPoint=ff}{_NSSize=ff}}16@20@24{_NSPoint=ff}28' selector='outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='rect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='3'/>
<arg name='item' declared_type='id' type='@' index='4'/>
<arg name='mouseLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='5'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='outlineView:typeSelectStringForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='outlineView:viewForTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='item' declared_type='id' type='@' index='2'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method type64='v48@0:8@16@24@32@40' type='v24@0:4@8@12@16@20' selector='outlineView:willDisplayCell:forTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v48@0:8@16@24@32@40' type='v24@0:4@8@12@16@20' selector='outlineView:willDisplayOutlineCell:forTableColumn:item:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='item' declared_type='id' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewColumnDidMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewColumnDidResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewItemDidCollapse:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewItemDidExpand:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewItemWillCollapse:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewItemWillExpand:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewSelectionDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='outlineViewSelectionIsChanging:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='selectionShouldChangeInOutlineView:'>
<arg name='outlineView' declared_type='NSOutlineView*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSPasteboardItemDataProvider'>
<method type64='v40@0:8@16@24@32' type='v20@0:4@8@12@16' selector='pasteboard:item:provideDataForType:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='item' declared_type='NSPasteboardItem*' type='@' index='1'/>
<arg name='type' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='pasteboardFinishedWithDataProvider:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSPasteboardOwner'>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='pasteboard:provideDataForType:'>
<arg name='sender' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='pasteboardChangedOwner:'>
<arg name='sender' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSPasteboardReading'>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='initWithPasteboardPropertyList:ofType:'>
<arg name='propertyList' declared_type='id' type='@' index='0'/>
<arg name='type' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='readableTypesForPasteboard:' class_method='true'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='Q32@0:8@16@24' type='I16@0:4@8@12' selector='readingOptionsForType:pasteboard:' class_method='true'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSPasteboardReadingOptions' type64='Q' type='I'/>
</method>
</informal_protocol>
<informal_protocol name='NSPasteboardWriting'>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='pasteboardPropertyListForType:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='writableTypesForPasteboard:'>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='Q32@0:8@16@24' type='I16@0:4@8@12' selector='writingOptionsForType:pasteboard:'>
<arg name='type' declared_type='NSString*' type='@' index='0'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSPasteboardWritingOptions' type64='Q' type='I'/>
</method>
</informal_protocol>
<informal_protocol name='NSPathCellDelegate'>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='pathCell:willDisplayOpenPanel:'>
<arg name='pathCell' declared_type='NSPathCell*' type='@' index='0'/>
<arg name='openPanel' declared_type='NSOpenPanel*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='pathCell:willPopUpMenu:'>
<arg name='pathCell' declared_type='NSPathCell*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSPathControlDelegate'>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='pathControl:acceptDrop:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='pathControl:shouldDragPathComponentCell:withPasteboard:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='pathComponentCell' declared_type='NSPathComponentCell*' type='@' index='1'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='Q32@0:8@16@24' type='I16@0:4@8@12' selector='pathControl:validateDrop:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='pathControl:willDisplayOpenPanel:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='openPanel' declared_type='NSOpenPanel*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='pathControl:willPopUpMenu:'>
<arg name='pathControl' declared_type='NSPathControl*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSPlaceholders'>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='defaultPlaceholderForMarker:withBinding:' class_method='true'>
<arg name='marker' declared_type='id' type='@' index='0'/>
<arg name='binding' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v40@0:8@16@24@32' type='v20@0:4@8@12@16' selector='setDefaultPlaceholder:forMarker:withBinding:' class_method='true'>
<arg name='placeholder' declared_type='id' type='@' index='0'/>
<arg name='marker' declared_type='id' type='@' index='1'/>
<arg name='binding' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSPopoverDelegate'>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='detachableWindowForPopover:'>
<arg name='popover' declared_type='NSPopover*' type='@' index='0'/>
<retval declared_type='NSWindow*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='popoverDidClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='popoverDidShow:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='popoverShouldClose:'>
<arg name='popover' declared_type='NSPopover*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='popoverWillClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='popoverWillShow:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSPrintPanelAccessorizing'>
<method type64='@16@0:8' type='@8@0:4' selector='keyPathsForValuesAffectingPreview'>
<retval declared_type='NSSet*' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='localizedSummaryItems'>
<retval declared_type='NSArray*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSRuleEditorDelegate'>
<method type64='@48@0:8@16q24@32Q40' type='@24@0:4@8i12@16I20' selector='ruleEditor:child:forCriterion:withRowType:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='index' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='criterion' declared_type='id' type='@' index='2'/>
<arg name='rowType' declared_type='NSRuleEditorRowType' type64='Q' type='I' index='3'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@40@0:8@16@24q32' type='@20@0:4@8@12i16' selector='ruleEditor:displayValueForCriterion:inRow:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='criterion' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='q40@0:8@16@24Q32' type='i20@0:4@8@12I16' selector='ruleEditor:numberOfChildrenForCriterion:withRowType:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='criterion' declared_type='id' type='@' index='1'/>
<arg name='rowType' declared_type='NSRuleEditorRowType' type64='Q' type='I' index='2'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='@48@0:8@16@24@32q40' type='@24@0:4@8@12@16i20' selector='ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:'>
<arg name='editor' declared_type='NSRuleEditor*' type='@' index='0'/>
<arg name='criterion' declared_type='id' type='@' index='1'/>
<arg name='value' declared_type='id' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='ruleEditorRowsDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSSavePanelDelegateDeprecated'>
<method type64='q44@0:8@16@24@32B40' type='i24@0:4@8@12@16B20' selector='panel:compareFilename:with:caseSensitive:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='name1' declared_type='NSString*' type='@' index='1'/>
<arg name='name2' declared_type='NSString*' type='@' index='2'/>
<arg name='caseSensitive' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='NSComparisonResult' type64='q' type='i'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='panel:directoryDidChange:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='path' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='panel:isValidFilename:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='panel:shouldShowFilename:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<arg name='filename' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSServicesRequests'>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='readSelectionFromPasteboard:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='writeSelectionToPasteboard:types:'>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='0'/>
<arg name='types' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSSoundDelegate'>
<method type64='v28@0:8@16B24' type='v16@0:4@8B12' selector='sound:didFinishPlaying:'>
<arg name='sound' declared_type='NSSound*' type='@' index='0'/>
<arg name='aBool' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSSpeechRecognizerDelegate'>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='speechRecognizer:didRecognizeCommand:'>
<arg name='sender' declared_type='NSSpeechRecognizer*' type='@' index='0'/>
<arg name='command' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSSpeechSynthesizerDelegate'>
<method type64='v48@0:8@16Q24@32@40' type='v24@0:4@8I12@16@20' selector='speechSynthesizer:didEncounterErrorAtIndex:ofString:message:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='1'/>
<arg name='string' declared_type='NSString*' type='@' index='2'/>
<arg name='message' declared_type='NSString*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='speechSynthesizer:didEncounterSyncMessage:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='message' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v28@0:8@16B24' type='v16@0:4@8B12' selector='speechSynthesizer:didFinishSpeaking:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='finishedSpeaking' declared_type='BOOL' type='B' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v28@0:8@16s24' type='v16@0:4@8s12' selector='speechSynthesizer:willSpeakPhoneme:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='phonemeOpcode' declared_type='short' type='s' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v48@0:8@16{_NSRange=QQ}24@40' type='v24@0:4@8{_NSRange=II}12@20' selector='speechSynthesizer:willSpeakWord:ofString:'>
<arg name='sender' declared_type='NSSpeechSynthesizer*' type='@' index='0'/>
<arg name='characterRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='string' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSSplitViewDelegate'>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8@16q24' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}16@0:4@8i12' selector='splitView:additionalEffectiveRectOfDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='splitView:canCollapseSubview:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='subview' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='d40@0:8@16d24q32' type='f20@0:4@8f12i16' selector='splitView:constrainMaxCoordinate:ofSubviewAt:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedMaximumPosition' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='d40@0:8@16d24q32' type='f20@0:4@8f12i16' selector='splitView:constrainMinCoordinate:ofSubviewAt:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedMinimumPosition' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='d40@0:8@16d24q32' type='f20@0:4@8f12i16' selector='splitView:constrainSplitPosition:ofSubviewAt:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedPosition' declared_type='CGFloat' type64='d' type='f' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}96@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24{CGRect={CGPoint=dd}{CGSize=dd}}56q88' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}48@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12{_NSRect={_NSPoint=ff}{_NSSize=ff}}28i44' selector='splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='proposedEffectiveRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='drawnRect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method type64='v40@0:8@16{CGSize=dd}24' type='v20@0:4@8{_NSSize=ff}12' selector='splitView:resizeSubviewsWithOldSize:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='oldSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='splitView:shouldAdjustSizeOfSubview:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24q32' type='B20@0:4@8@12i16' selector='splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='subview' declared_type='NSView*' type='@' index='1'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16q24' type='B16@0:4@8i12' selector='splitView:shouldHideDividerAtIndex:'>
<arg name='splitView' declared_type='NSSplitView*' type='@' index='0'/>
<arg name='dividerIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='splitViewDidResizeSubviews:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='splitViewWillResizeSubviews:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSTabViewDelegate'>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='tabView:didSelectTabViewItem:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='tabView:shouldSelectTabViewItem:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='tabView:willSelectTabViewItem:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<arg name='tabViewItem' declared_type='NSTabViewItem*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='tabViewDidChangeNumberOfTabViewItems:'>
<arg name='tabView' declared_type='NSTabView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSTableViewDataSource'>
<method type64='q24@0:8@16' type='i12@0:4@8' selector='numberOfRowsInTableView:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='B48@0:8@16@24q32Q40' type='B24@0:4@8@12i16I20' selector='tableView:acceptDrop:row:dropOperation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='dropOperation' declared_type='NSTableViewDropOperation' type64='Q' type='I' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v56@0:8@16@24{CGPoint=dd}32Q48' type='v28@0:4@8@12{_NSPoint=ff}16I24' selector='tableView:draggingSession:endedAtPoint:operation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='operation' declared_type='NSDragOperation' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v56@0:8@16@24{CGPoint=dd}32@48' type='v28@0:4@8@12{_NSPoint=ff}16@24' selector='tableView:draggingSession:willBeginAtPoint:forRowIndexes:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='session' declared_type='NSDraggingSession*' type='@' index='1'/>
<arg name='screenPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='dropDestination' declared_type='NSURL*' type='@' index='1'/>
<arg name='indexSet' declared_type='NSIndexSet*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@40@0:8@16@24q32' type='@20@0:4@8@12i16' selector='tableView:objectValueForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@32@0:8@16q24' type='@16@0:4@8i12' selector='tableView:pasteboardWriterForRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='v48@0:8@16@24@32q40' type='v24@0:4@8@12@16i20' selector='tableView:setObjectValue:forTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='object' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='tableView:sortDescriptorsDidChange:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='oldDescriptors' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='tableView:updateDraggingItemsForDrag:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='draggingInfo' declared_type='id' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='Q48@0:8@16@24q32Q40' type='I24@0:4@8@12i16I20' selector='tableView:validateDrop:proposedRow:proposedDropOperation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='info' declared_type='id' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='dropOperation' declared_type='NSTableViewDropOperation' type64='Q' type='I' index='3'/>
<retval declared_type='NSDragOperation' type64='Q' type='I'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='tableView:writeRowsWithIndexes:toPasteboard:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rowIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSTableViewDataSourceDeprecated'>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='tableView:writeRows:toPasteboard:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rows' declared_type='NSArray*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSTableViewDelegate'>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='selectionShouldChangeInTableView:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@40@0:8@16@24q32' type='@20@0:4@8@12i16' selector='tableView:dataCellForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSCell*' type='@'/>
</method>
<method type64='v40@0:8@16@24q32' type='v20@0:4@8@12i16' selector='tableView:didAddRowView:forRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='tableView:didClickTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='tableView:didDragTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8@16@24q32' type='v20@0:4@8@12i16' selector='tableView:didRemoveRowView:forRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='rowView' declared_type='NSTableRowView*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='d32@0:8@16q24' type='f16@0:4@8i12' selector='tableView:heightOfRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='B32@0:8@16q24' type='B16@0:4@8i12' selector='tableView:isGroupRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='tableView:mouseDownInHeaderOfTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='q48@0:8@16q24q32@40' type='i24@0:4@8i12i16@20' selector='tableView:nextTypeSelectMatchFromRow:toRow:forString:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='startRow' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='endRow' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='searchString' declared_type='NSString*' type='@' index='3'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='@32@0:8@16q24' type='@16@0:4@8i12' selector='tableView:rowViewForRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='NSTableRowView*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tableView:selectionIndexesForProposedSelection:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='proposedSelectionIndexes' declared_type='NSIndexSet*' type='@' index='1'/>
<retval declared_type='NSIndexSet*' type='@'/>
</method>
<method type64='B40@0:8@16@24q32' type='B20@0:4@8@12i16' selector='tableView:shouldEditTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16q24q32' type='B20@0:4@8i12i16' selector='tableView:shouldReorderColumn:toColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='columnIndex' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='newColumnIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16q24' type='B16@0:4@8i12' selector='tableView:shouldSelectRow:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='tableView:shouldSelectTableColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24q32' type='B20@0:4@8@12i16' selector='tableView:shouldShowCellExpansionForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B48@0:8@16@24@32q40' type='B24@0:4@8@12@16i20' selector='tableView:shouldTrackCell:forTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='tableView:shouldTypeSelectForEvent:withCurrentSearchString:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='searchString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='d32@0:8@16q24' type='f16@0:4@8i12' selector='tableView:sizeToFitWidthOfColumn:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='column' declared_type='NSInteger' type64='q' type='i' index='1'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='@72@0:8@16@24^{CGRect={CGPoint=dd}{CGSize=dd}}32@40q48{CGPoint=dd}56' type='@36@0:4@8@12^{_NSRect={_NSPoint=ff}{_NSSize=ff}}16@20i24{_NSPoint=ff}28' selector='tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='cell' declared_type='NSCell*' type='@' index='1'/>
<arg name='rect' declared_type='NSRectPointer' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}' type='^{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='3'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='4'/>
<arg name='mouseLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='5'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@40@0:8@16@24q32' type='@20@0:4@8@12i16' selector='tableView:typeSelectStringForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@40@0:8@16@24q32' type='@20@0:4@8@12i16' selector='tableView:viewForTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='1'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='2'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method type64='v48@0:8@16@24@32q40' type='v24@0:4@8@12@16i20' selector='tableView:willDisplayCell:forTableColumn:row:'>
<arg name='tableView' declared_type='NSTableView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='tableColumn' declared_type='NSTableColumn*' type='@' index='2'/>
<arg name='row' declared_type='NSInteger' type64='q' type='i' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='tableViewColumnDidMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='tableViewColumnDidResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='tableViewSelectionDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='tableViewSelectionIsChanging:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextAttachmentCell'>
<method type64='@16@0:8' type='@8@0:4' selector='attachment'>
<retval declared_type='NSTextAttachment*' type='@'/>
</method>
<method type64='{CGPoint=dd}16@0:8' type='{_NSPoint=ff}8@0:4' selector='cellBaselineOffset'>
<retval declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}'/>
</method>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24{CGPoint=dd}56Q72' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}40@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12{_NSPoint=ff}28I36' selector='cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:'>
<arg name='textContainer' declared_type='NSTextContainer*' type='@' index='0'/>
<arg name='lineFrag' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='position' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method type64='{CGSize=dd}16@0:8' type='{_NSSize=ff}8@0:4' selector='cellSize'>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method type64='v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48' type='v28@0:4{_NSRect={_NSPoint=ff}{_NSSize=ff}}8@24' selector='drawWithFrame:inView:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48Q56' type='v32@0:4{_NSRect={_NSPoint=ff}{_NSSize=ff}}8@24I28' selector='drawWithFrame:inView:characterIndex:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v72@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48Q56@64' type='v36@0:4{_NSRect={_NSPoint=ff}{_NSSize=ff}}8@24I28@32' selector='drawWithFrame:inView:characterIndex:layoutManager:'>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='0'/>
<arg name='controlView' declared_type='NSView*' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='layoutManager' declared_type='NSLayoutManager*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v60@0:8B16{CGRect={CGPoint=dd}{CGSize=dd}}20@52' type='v32@0:4B8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12@28' selector='highlight:withFrame:inView:'>
<arg name='flag' declared_type='BOOL' type='B' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setAttachment:'>
<arg name='anObject' declared_type='NSTextAttachment*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B76@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24@56Q64B72' type='B40@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12@28I32B36' selector='trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<arg name='flag' declared_type='BOOL' type='B' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B68@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24@56B64' type='B36@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12@28B32' selector='trackMouse:inRect:ofView:untilMouseUp:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='flag' declared_type='BOOL' type='B' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='wantsToTrackMouse'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B72@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24@56Q64' type='B36@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12@28I32' selector='wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:'>
<arg name='theEvent' declared_type='NSEvent*' type='@' index='0'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<arg name='controlView' declared_type='NSView*' type='@' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextDelegate'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='textDidBeginEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='textDidChange:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='textDidEndEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='textShouldBeginEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='textShouldEndEditing:'>
<arg name='textObject' declared_type='NSText*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextFinderBarContainer'>
<method type64='@16@0:8' type='@8@0:4' selector='contentView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='findBarView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method type64='v16@0:8' type='v8@0:4' selector='findBarViewDidChangeHeight'>
<retval declared_type='void' type='v'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='isFindBarVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setFindBarView:'>
<arg name='findBarView' declared_type='NSView*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v20@0:8B16' type='v12@0:4B8' selector='setFindBarVisible:'>
<arg name='findBarVisible' declared_type='BOOL' type='B' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextFinderClient'>
<method type64='B16@0:8' type='B8@0:4' selector='allowsMultipleSelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@32@0:8Q16^{_NSRange=QQ}24' type='@16@0:4I8^{_NSRange=II}12' selector='contentViewAtIndex:effectiveCharacterRange:'>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='outRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSView*' type='@'/>
</method>
<method type64='v16@0:8' type='v8@0:4' selector='didReplaceCharacters'>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8{_NSRange=QQ}16@32' type='v20@0:4{_NSRange=II}8@16' selector='drawCharactersInRange:forContentView:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='view' declared_type='NSView*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{_NSRange=QQ}16@0:8' type='{_NSRange=II}8@0:4' selector='firstSelectedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='isEditable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='isSelectable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@32@0:8{_NSRange=QQ}16' type='@16@0:4{_NSRange=II}8' selector='rectsForCharacterRange:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v40@0:8{_NSRange=QQ}16@32' type='v20@0:4{_NSRange=II}8@16' selector='replaceCharactersInRange:withString:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='string' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8{_NSRange=QQ}16' type='v16@0:4{_NSRange=II}8' selector='scrollRangeToVisible:'>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='selectedRanges'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setSelectedRanges:'>
<arg name='selectedRanges' declared_type='NSArray*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='shouldReplaceCharactersInRanges:withStrings:'>
<arg name='ranges' declared_type='NSArray*' type='@' index='0'/>
<arg name='strings' declared_type='NSArray*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='string'>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@40@0:8Q16^{_NSRange=QQ}24^B32' type='@20@0:4I8^{_NSRange=II}12^B16' selector='stringAtIndex:effectiveRange:endsWithSearchBoundary:'>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<arg name='outRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<arg name='outFlag' declared_type='BOOL*' type='^B' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='Q16@0:8' type='I8@0:4' selector='stringLength'>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='visibleCharacterRanges'>
<retval declared_type='NSArray*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextInput'>
<method type64='@32@0:8{_NSRange=QQ}16' type='@16@0:4{_NSRange=II}8' selector='attributedSubstringFromRange:'>
<arg name='theRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method type64='Q32@0:8{CGPoint=dd}16' type='I16@0:4{_NSPoint=ff}8' selector='characterIndexForPoint:'>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='q16@0:8' type='i8@0:4' selector='conversationIdentifier'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='v24@0:8:16' type='v12@0:4:8' selector='doCommandBySelector:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8{_NSRange=QQ}16' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}16@0:4{_NSRange=II}8' selector='firstRectForCharacterRange:'>
<arg name='theRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='hasMarkedText'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='insertText:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{_NSRange=QQ}16@0:8' type='{_NSRange=II}8@0:4' selector='markedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method type64='{_NSRange=QQ}16@0:8' type='{_NSRange=II}8@0:4' selector='selectedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method type64='v40@0:8@16{_NSRange=QQ}24' type='v20@0:4@8{_NSRange=II}12' selector='setMarkedText:selectedRange:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='selRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v16@0:8' type='v8@0:4' selector='unmarkText'>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='validAttributesForMarkedText'>
<retval declared_type='NSArray*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextInputClient'>
<method type64='@16@0:8' type='@8@0:4' selector='attributedString'>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method type64='@40@0:8{_NSRange=QQ}16^{_NSRange=QQ}32' type='@20@0:4{_NSRange=II}8^{_NSRange=II}16' selector='attributedSubstringForProposedRange:actualRange:'>
<arg name='aRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSAttributedString*' type='@'/>
</method>
<method type64='d24@0:8Q16' type='f12@0:4I8' selector='baselineDeltaForCharacterAtIndex:'>
<arg name='anIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='Q32@0:8{CGPoint=dd}16' type='I16@0:4{_NSPoint=ff}8' selector='characterIndexForPoint:'>
<arg name='thePoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='NSUInteger' type64='Q' type='I'/>
</method>
<method type64='v24@0:8:16' type='v12@0:4:8' selector='doCommandBySelector:'>
<arg name='aSelector' declared_type='SEL' type=':' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8Q16' type='B12@0:4I8' selector='drawsVerticallyForCharacterAtIndex:'>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}40@0:8{_NSRange=QQ}16^{_NSRange=QQ}32' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}20@0:4{_NSRange=II}8^{_NSRange=II}16' selector='firstRectForCharacterRange:actualRange:'>
<arg name='aRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='0'/>
<arg name='actualRange' declared_type='NSRangePointer' type64='^{_NSRange=QQ}' type='^{_NSRange=II}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method type64='d32@0:8{CGPoint=dd}16' type='f16@0:4{_NSPoint=ff}8' selector='fractionOfDistanceThroughGlyphForPoint:'>
<arg name='aPoint' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='0'/>
<retval declared_type='CGFloat' type64='d' type='f'/>
</method>
<method type64='B16@0:8' type='B8@0:4' selector='hasMarkedText'>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v40@0:8@16{_NSRange=QQ}24' type='v20@0:4@8{_NSRange=II}12' selector='insertText:replacementRange:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='replacementRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{_NSRange=QQ}16@0:8' type='{_NSRange=II}8@0:4' selector='markedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method type64='{_NSRange=QQ}16@0:8' type='{_NSRange=II}8@0:4' selector='selectedRange'>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method type64='v56@0:8@16{_NSRange=QQ}24{_NSRange=QQ}40' type='v28@0:4@8{_NSRange=II}12{_NSRange=II}20' selector='setMarkedText:selectedRange:replacementRange:'>
<arg name='aString' declared_type='id' type='@' index='0'/>
<arg name='selectedRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='replacementRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v16@0:8' type='v8@0:4' selector='unmarkText'>
<retval declared_type='void' type='v'/>
</method>
<method type64='@16@0:8' type='@8@0:4' selector='validAttributesForMarkedText'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='q16@0:8' type='i8@0:4' selector='windowLevel'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextLayoutOrientationProvider'>
<method type64='q16@0:8' type='i8@0:4' selector='layoutOrientation'>
<retval declared_type='NSTextLayoutOrientation' type64='q' type='i'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextStorageDelegate'>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='textStorageDidProcessEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='textStorageWillProcessEditing:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSTextViewDelegate'>
<method type64='@40@0:8@16@24Q32' type='@20@0:4@8@12I16' selector='textView:URLForContentsOfTextAttachment:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='textAttachment' declared_type='NSTextAttachment*' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSURL*' type='@'/>
</method>
<method type64='v64@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32' type='v32@0:4@8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16' selector='textView:clickedOnCell:inRect:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v72@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32Q64' type='v36@0:4@8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16I32' selector='textView:clickedOnCell:inRect:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='textView:clickedOnLink:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='link' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24Q32' type='B20@0:4@8@12I16' selector='textView:clickedOnLink:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='link' declared_type='id' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@56@0:8@16@24{_NSRange=QQ}32^q48' type='@28@0:4@8@12{_NSRange=II}16^i24' selector='textView:completions:forPartialWordRange:indexOfSelectedItem:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='words' declared_type='NSArray*' type='@' index='1'/>
<arg name='charRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<arg name='index' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@80@0:8@16{_NSRange=QQ}24Q40@48@56@64q72' type='@44@0:4@8{_NSRange=II}12Q20@28@32@36i40' selector='textView:didCheckTextInRange:types:options:results:orthography:wordCount:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes' type='Q' index='2'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='3'/>
<arg name='results' declared_type='NSArray*' type='@' index='4'/>
<arg name='orthography' declared_type='NSOrthography*' type='@' index='5'/>
<arg name='wordCount' declared_type='NSInteger' type64='q' type='i' index='6'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='B32@0:8@16:24' type='B16@0:4@8:12' selector='textView:doCommandBySelector:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='commandSelector' declared_type='SEL' type=':' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v64@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32' type='v32@0:4@8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16' selector='textView:doubleClickedOnCell:inRect:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v72@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32Q64' type='v36@0:4@8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16I32' selector='textView:doubleClickedOnCell:inRect:atIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='cellFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v72@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32@64' type='v36@0:4@8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16@32' selector='textView:draggedCell:inRect:event:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v80@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32@64Q72' type='v40@0:4@8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16@32I36' selector='textView:draggedCell:inRect:event:atIndex:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<arg name='event' declared_type='NSEvent*' type='@' index='3'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='4'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@48@0:8@16@24@32Q40' type='@24@0:4@8@12@16I20' selector='textView:menu:forEvent:atIndex:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<arg name='event' declared_type='NSEvent*' type='@' index='2'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='3'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method type64='B48@0:8@16{_NSRange=QQ}24@40' type='B24@0:4@8{_NSRange=II}12@20' selector='textView:shouldChangeTextInRange:replacementString:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='affectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='replacementString' declared_type='NSString*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='textView:shouldChangeTextInRanges:replacementStrings:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='affectedRanges' declared_type='NSArray*' type='@' index='1'/>
<arg name='replacementStrings' declared_type='NSArray*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='textView:shouldChangeTypingAttributes:toAttributes:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='oldTypingAttributes' declared_type='NSDictionary*' type='@' index='1'/>
<arg name='newTypingAttributes' declared_type='NSDictionary*' type='@' index='2'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method type64='q48@0:8@16q24{_NSRange=QQ}32' type='i24@0:4@8i12{_NSRange=II}16' selector='textView:shouldSetSpellingState:range:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='value' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='affectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
<method type64='{_NSRange=QQ}56@0:8@16{_NSRange=QQ}24{_NSRange=QQ}40' type='{_NSRange=II}28@0:4@8{_NSRange=II}12{_NSRange=II}20' selector='textView:willChangeSelectionFromCharacterRange:toCharacterRange:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='oldSelectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='newSelectedCharRange' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='2'/>
<retval declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}'/>
</method>
<method type64='@40@0:8@16@24@32' type='@20@0:4@8@12@16' selector='textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='oldSelectedCharRanges' declared_type='NSArray*' type='@' index='1'/>
<arg name='newSelectedCharRanges' declared_type='NSArray*' type='@' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@56@0:8@16{_NSRange=QQ}24@40^Q48' type='@28@0:4@8{_NSRange=II}12@20^Q24' selector='textView:willCheckTextInRange:options:types:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='range' declared_type='NSRange' type64='{_NSRange=QQ}' type='{_NSRange=II}' index='1'/>
<arg name='options' declared_type='NSDictionary*' type='@' index='2'/>
<arg name='checkingTypes' declared_type='NSTextCheckingTypes*' type='^Q' index='3'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method type64='@40@0:8@16@24Q32' type='@20@0:4@8@12I16' selector='textView:willDisplayToolTip:forCharacterAtIndex:'>
<arg name='textView' declared_type='NSTextView*' type='@' index='0'/>
<arg name='tooltip' declared_type='NSString*' type='@' index='1'/>
<arg name='characterIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@40@0:8@16@24Q32' type='@20@0:4@8@12I16' selector='textView:writablePasteboardTypesForCell:atIndex:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='B56@0:8@16@24Q32@40@48' type='B28@0:4@8@12I16@20@24' selector='textView:writeCell:atIndex:toPasteboard:type:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<arg name='cell' declared_type='id' type='@' index='1'/>
<arg name='charIndex' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='3'/>
<arg name='type' declared_type='NSString*' type='@' index='4'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='textViewDidChangeSelection:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='textViewDidChangeTypingAttributes:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='undoManagerForTextView:'>
<arg name='view' declared_type='NSTextView*' type='@' index='0'/>
<retval declared_type='NSUndoManager*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSTokenFieldCellDelegate'>
<method type64='@48@0:8@16@24q32^q40' type='@24@0:4@8@12i16^i20' selector='tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='substring' declared_type='NSString*' type='@' index='1'/>
<arg name='tokenIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='selectedIndex' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenFieldCell:displayStringForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenFieldCell:editingStringForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='tokenFieldCell:hasMenuForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenFieldCell:menuForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenFieldCell:readFromPasteboard:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenFieldCell:representedObjectForEditingString:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='editingString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@40@0:8@16@24Q32' type='@20@0:4@8@12I16' selector='tokenFieldCell:shouldAddObjects:atIndex:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='tokens' declared_type='NSArray*' type='@' index='1'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='Q32@0:8@16@24' type='I16@0:4@8@12' selector='tokenFieldCell:styleForRepresentedObject:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSTokenStyle' type64='Q' type='I'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='tokenFieldCell:writeRepresentedObjects:toPasteboard:'>
<arg name='tokenFieldCell' declared_type='NSTokenFieldCell*' type='@' index='0'/>
<arg name='objects' declared_type='NSArray*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSTokenFieldDelegate'>
<method type64='@48@0:8@16@24q32^q40' type='@24@0:4@8@12i16^i20' selector='tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='substring' declared_type='NSString*' type='@' index='1'/>
<arg name='tokenIndex' declared_type='NSInteger' type64='q' type='i' index='2'/>
<arg name='selectedIndex' declared_type='NSInteger*' type64='^q' type='^i' index='3'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenField:displayStringForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenField:editingStringForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='tokenField:hasMenuForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenField:menuForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSMenu*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenField:readFromPasteboard:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='1'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='tokenField:representedObjectForEditingString:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='editingString' declared_type='NSString*' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@40@0:8@16@24Q32' type='@20@0:4@8@12I16' selector='tokenField:shouldAddObjects:atIndex:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='tokens' declared_type='NSArray*' type='@' index='1'/>
<arg name='index' declared_type='NSUInteger' type64='Q' type='I' index='2'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='Q32@0:8@16@24' type='I16@0:4@8@12' selector='tokenField:styleForRepresentedObject:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='representedObject' declared_type='id' type='@' index='1'/>
<retval declared_type='NSTokenStyle' type64='Q' type='I'/>
</method>
<method type64='B40@0:8@16@24@32' type='B20@0:4@8@12@16' selector='tokenField:writeRepresentedObjects:toPasteboard:'>
<arg name='tokenField' declared_type='NSTokenField*' type='@' index='0'/>
<arg name='objects' declared_type='NSArray*' type='@' index='1'/>
<arg name='pboard' declared_type='NSPasteboard*' type='@' index='2'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSToolTipOwner'>
<method type64='@56@0:8@16q24{CGPoint=dd}32^v48' type='@28@0:4@8i12{_NSPoint=ff}16^v24' selector='view:stringForToolTip:point:userData:'>
<arg name='view' declared_type='NSView*' type='@' index='0'/>
<arg name='tag' declared_type='NSToolTipTag' type64='q' type='i' index='1'/>
<arg name='point' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='data' declared_type='void*' type='^v' index='3'/>
<retval declared_type='NSString*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='NSToolbarDelegate'>
<method type64='@36@0:8@16@24B32' type='@20@0:4@8@12B16' selector='toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<arg name='itemIdentifier' declared_type='NSString*' type='@' index='1'/>
<arg name='flag' declared_type='BOOL' type='B' index='2'/>
<retval declared_type='NSToolbarItem*' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='toolbarAllowedItemIdentifiers:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='toolbarDefaultItemIdentifiers:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='toolbarDidRemoveItem:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='toolbarSelectableItemIdentifiers:'>
<arg name='toolbar' declared_type='NSToolbar*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='toolbarWillAddItem:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSToolbarItemValidation'>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='validateToolbarItem:'>
<arg name='theItem' declared_type='NSToolbarItem*' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSUserInterfaceItemIdentification'>
<method type64='@16@0:8' type='@8@0:4' selector='identifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='setIdentifier:'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSUserInterfaceItemSearching'>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='localizedTitlesForItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='performActionForItem:'>
<arg name='item' declared_type='id' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v40@0:8@16q24@?32' type='v20@0:4@8i12@?16' selector='searchForItemsWithSearchString:resultLimit:matchedItemHandler:'>
<arg name='searchString' declared_type='NSString*' type='@' index='0'/>
<arg name='resultLimit' declared_type='NSInteger' type64='q' type='i' index='1'/>
<arg name='handleMatchedItems' function_pointer='true' declared_type='void (^)(NSArray *)' type='@?' index='2'>
<arg declared_type='NSArray*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='showAllHelpTopicsForSearchString:'>
<arg name='searchString' declared_type='NSString*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='NSUserInterfaceValidations'>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='validateUserInterfaceItem:'>
<arg name='anItem' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='NSValidatedUserInterfaceItem'>
<method type64=':16@0:8' type=':8@0:4' selector='action'>
<retval declared_type='SEL' type=':'/>
</method>
<method type64='q16@0:8' type='i8@0:4' selector='tag'>
<retval declared_type='NSInteger' type64='q' type='i'/>
</method>
</informal_protocol>
<informal_protocol name='NSWindowDelegate'>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='customWindowsToEnterFullScreenForWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='customWindowsToExitFullScreenForWindow:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='window:didDecodeRestorableState:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B56@0:8@16@24{CGPoint=dd}32@48' type='B28@0:4@8@12{_NSPoint=ff}16@24' selector='window:shouldDragDocumentWithEvent:from:withPasteboard:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='event' declared_type='NSEvent*' type='@' index='1'/>
<arg name='dragImageLocation' declared_type='NSPoint' type64='{CGPoint=dd}' type='{_NSPoint=ff}' index='2'/>
<arg name='pasteboard' declared_type='NSPasteboard*' type='@' index='3'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B32@0:8@16@24' type='B16@0:4@8@12' selector='window:shouldPopUpDocumentPathMenu:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='menu' declared_type='NSMenu*' type='@' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v32@0:8@16d24' type='v20@0:4@8d12' selector='window:startCustomAnimationToEnterFullScreenWithDuration:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='duration' declared_type='NSTimeInterval' type='d' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16d24' type='v20@0:4@8d12' selector='window:startCustomAnimationToExitFullScreenWithDuration:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='duration' declared_type='NSTimeInterval' type='d' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v32@0:8@16@24' type='v16@0:4@8@12' selector='window:willEncodeRestorableState:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}64@0:8@16@24{CGRect={CGPoint=dd}{CGSize=dd}}32' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}32@0:4@8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16' selector='window:willPositionSheet:usingRect:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='sheet' declared_type='NSWindow*' type='@' index='1'/>
<arg name='rect' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='2'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
<method type64='{CGSize=dd}56@0:8@16{CGSize=dd}24{CGSize=dd}40' type='{_NSSize=ff}28@0:4@8{_NSSize=ff}12{_NSSize=ff}20' selector='window:willResizeForVersionBrowserWithMaxPreferredSize:maxAllowedSize:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='maxPreferredFrameSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<arg name='maxAllowedFrameSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='2'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method type64='{CGSize=dd}40@0:8@16{CGSize=dd}24' type='{_NSSize=ff}20@0:4@8{_NSSize=ff}12' selector='window:willUseFullScreenContentSize:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='proposedSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method type64='Q32@0:8@16Q24' type='I16@0:4@8I12' selector='window:willUseFullScreenPresentationOptions:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='proposedOptions' declared_type='NSApplicationPresentationOptions' type64='Q' type='I' index='1'/>
<retval declared_type='NSApplicationPresentationOptions' type64='Q' type='I'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidBecomeKey:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidBecomeMain:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidChangeScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidChangeScreenProfile:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidDeminiaturize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidEndLiveResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidEndSheet:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidEnterFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidEnterVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidExitFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidExitVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidExpose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidFailToEnterFullScreen:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidFailToExitFullScreen:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidMiniaturize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidResignKey:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidResignMain:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowDidUpdate:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='B24@0:8@16' type='B12@0:4@8' selector='windowShouldClose:'>
<arg name='sender' declared_type='id' type='@' index='0'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='B56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24' type='B28@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12' selector='windowShouldZoom:toFrame:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='newFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillBeginSheet:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillClose:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillEnterFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillEnterVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillExitFullScreen:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillExitVersionBrowser:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillMiniaturize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillMove:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{CGSize=dd}40@0:8@16{CGSize=dd}24' type='{_NSSize=ff}20@0:4@8{_NSSize=ff}12' selector='windowWillResize:toSize:'>
<arg name='sender' declared_type='NSWindow*' type='@' index='0'/>
<arg name='frameSize' declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}' index='1'/>
<retval declared_type='NSSize' type64='{CGSize=dd}' type='{_NSSize=ff}'/>
</method>
<method type64='@32@0:8@16@24' type='@16@0:4@8@12' selector='windowWillReturnFieldEditor:toObject:'>
<arg name='sender' declared_type='NSWindow*' type='@' index='0'/>
<arg name='client' declared_type='id' type='@' index='1'/>
<retval declared_type='id' type='@'/>
</method>
<method type64='@24@0:8@16' type='@12@0:4@8' selector='windowWillReturnUndoManager:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<retval declared_type='NSUndoManager*' type='@'/>
</method>
<method type64='v24@0:8@16' type='v12@0:4@8' selector='windowWillStartLiveResize:'>
<arg name='notification' declared_type='NSNotification*' type='@' index='0'/>
<retval declared_type='void' type='v'/>
</method>
<method type64='{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}28@0:4@8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12' selector='windowWillUseStandardFrame:defaultFrame:'>
<arg name='window' declared_type='NSWindow*' type='@' index='0'/>
<arg name='newFrame' declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' index='1'/>
<retval declared_type='NSRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}'/>
</method>
</informal_protocol>
<informal_protocol name='NSWindowRestoration'>
<method type64='v40@0:8@16@24@?32' type='v20@0:4@8@12@?16' selector='restoreWindowWithIdentifier:state:completionHandler:' class_method='true'>
<arg name='identifier' declared_type='NSString*' type='@' index='0'/>
<arg name='state' declared_type='NSCoder*' type='@' index='1'/>
<arg name='completionHandler' function_pointer='true' declared_type='void (^)(NSWindow *, NSError *)' type='@?' index='2'>
<arg declared_type='NSWindow*' type='@'/>
<arg declared_type='NSError*' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
</signatures>
